[
{"url": "http://flask.pocoo.org/docs/0.12/genindex/", "text": "\n   \n     \n     Index \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n\n Index \n\n \n  _ \n |  A \n |  B \n |  C \n |  D \n |  E \n |  F \n |  G \n |  H \n |  I \n |  J \n |  K \n |  L \n |  M \n |  N \n |  O \n |  P \n |  R \n |  S \n |  T \n |  U \n |  V \n |  W \n |  Y \n \n \n _ \n \n   \n       _app_ctx_stack (in module flask) \n \n   \n   \n       _request_ctx_stack (in module flask) \n \n   \n \n\n A \n \n   \n       abort() (in module flask) \n \n       add_app_template_filter() (flask.Blueprint method) \n \n       add_app_template_global() (flask.Blueprint method) \n \n       add_app_template_test() (flask.Blueprint method) \n \n       add_template_filter() (flask.Flask method) \n \n       add_template_global() (flask.Flask method) \n \n       add_template_test() (flask.Flask method) \n \n       add_url_rule() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n         (flask.blueprints.BlueprintSetupState method) \n \n       \n       after_app_request() (flask.Blueprint method) \n \n       after_request() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       after_request_funcs (flask.Flask attribute) \n \n       after_this_request() (in module flask) \n \n       app (flask.blueprints.BlueprintSetupState attribute) \n \n       app_context() (flask.Flask method) \n \n   \n   \n       app_context_processor() (flask.Blueprint method) \n \n       app_ctx_globals_class (flask.Flask attribute) \n \n       app_errorhandler() (flask.Blueprint method) \n \n       app_import_path (flask.cli.ScriptInfo attribute) \n \n       app_template_filter() (flask.Blueprint method) \n \n       app_template_global() (flask.Blueprint method) \n \n       app_template_test() (flask.Blueprint method) \n \n       app_url_defaults() (flask.Blueprint method) \n \n       app_url_value_preprocessor() (flask.Blueprint method) \n \n       AppContext (class in flask.ctx) \n \n       appcontext_popped (in module flask) \n \n       appcontext_pushed (in module flask) \n \n       appcontext_tearing_down (in module flask) \n \n       AppGroup (class in flask.cli) \n \n       args (flask.Request attribute) \n \n       as_view() (flask.views.View class method) \n \n       auto_find_instance_path() (flask.Flask method) \n \n   \n \n\n B \n \n   \n       base_url (flask.Request attribute) \n \n       before_app_first_request() (flask.Blueprint method) \n \n       before_app_request() (flask.Blueprint method) \n \n       before_first_request() (flask.Flask method) \n \n       before_first_request_funcs (flask.Flask attribute) \n \n       before_request() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n   \n   \n       before_request_funcs (flask.Flask attribute) \n \n       Blueprint (class in flask) \n \n       blueprint (flask.blueprints.BlueprintSetupState attribute) \n\n       \n         (flask.Request attribute) \n \n       \n       blueprints (flask.Flask attribute) \n \n       BlueprintSetupState (class in flask.blueprints) \n \n   \n \n\n C \n \n   \n       cli (flask.Flask attribute) \n \n       command() (flask.cli.AppGroup method) \n \n       Config (class in flask) \n \n       config (flask.Flask attribute) \n \n       config_class (flask.Flask attribute) \n \n       context_processor() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n   \n   \n       cookies (flask.Request attribute) \n \n       copy() (flask.ctx.RequestContext method) \n \n       copy_current_request_context() (in module flask) \n \n       create_app (flask.cli.ScriptInfo attribute) \n \n       create_global_jinja_loader() (flask.Flask method) \n \n       create_jinja_environment() (flask.Flask method) \n \n       create_url_adapter() (flask.Flask method) \n \n       current_app (in module flask) \n \n   \n \n\n D \n \n   \n       data (flask.cli.ScriptInfo attribute) \n\n       \n         (flask.Request attribute) \n \n         (flask.Response attribute) \n \n       \n       debug (flask.Flask attribute) \n \n       decorators (flask.views.View attribute) \n \n       default() (flask.json.JSONEncoder method) \n \n       default_config (flask.Flask attribute) \n \n   \n   \n       digest_method() (flask.sessions.SecureCookieSessionInterface static method) \n \n       dispatch_request() (flask.Flask method) \n\n       \n         (flask.views.View method) \n \n       \n       do_teardown_appcontext() (flask.Flask method) \n \n       do_teardown_request() (flask.Flask method) \n \n       dump() (in module flask.json) \n \n       dumps() (in module flask.json) \n \n   \n \n\n E \n \n   \n       endpoint (flask.Request attribute) \n \n       endpoint() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       environ (flask.Request attribute) \n \n       \n    environment variable\n\n       \n         FLASKR_SETTINGS \n \n         FLASK_DEBUG \n \n         YOURAPPLICATION_SETTINGS \n \n       \n   \n   \n       error_handler_spec (flask.Flask attribute) \n \n       errorhandler() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       escape() (flask.Markup class method) \n\n       \n         (in module flask) \n \n       \n       extensions (flask.Flask attribute) \n \n   \n \n\n F \n \n   \n       files (flask.Request attribute) \n \n       first_registration (flask.blueprints.BlueprintSetupState attribute) \n \n       flash() (in module flask) \n \n       Flask (class in flask) \n \n       flask (module) \n \n       flask.ext (in module flask) \n \n       flask.json (module) \n \n       FLASK_DEBUG \n \n       FlaskClient (class in flask.testing) \n \n   \n   \n       FlaskGroup (class in flask.cli) \n \n       FLASKR_SETTINGS \n \n       form (flask.Request attribute) \n \n       from_envvar() (flask.Config method) \n \n       from_json() (flask.Config method) \n \n       from_mapping() (flask.Config method) \n \n       from_object() (flask.Config method) \n \n       from_pyfile() (flask.Config method) \n \n       full_dispatch_request() (flask.Flask method) \n \n       full_path (flask.Request attribute) \n \n   \n \n\n G \n \n   \n       g (in module flask) \n \n       get_cookie_domain() (flask.sessions.SessionInterface method) \n \n       get_cookie_httponly() (flask.sessions.SessionInterface method) \n \n       get_cookie_path() (flask.sessions.SessionInterface method) \n \n       get_cookie_secure() (flask.sessions.SessionInterface method) \n \n       get_expiration_time() (flask.sessions.SessionInterface method) \n \n       get_flashed_messages() (in module flask) \n \n   \n   \n       get_json() (flask.Request method) \n \n       get_namespace() (flask.Config method) \n \n       get_send_file_max_age() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       get_template_attribute() (in module flask) \n \n       got_first_request (flask.Flask attribute) \n \n       got_request_exception (in module flask) \n \n       group() (flask.cli.AppGroup method) \n \n   \n \n\n H \n \n   \n       handle_exception() (flask.Flask method) \n \n       handle_http_exception() (flask.Flask method) \n \n       handle_url_build_error() (flask.Flask method) \n \n       handle_user_exception() (flask.Flask method) \n \n       has_app_context() (in module flask) \n \n   \n   \n       has_request_context() (in module flask) \n \n       has_static_folder (flask.Blueprint attribute) \n\n       \n         (flask.Flask attribute) \n \n       \n       headers (flask.Request attribute) \n\n       \n         (flask.Response attribute) \n \n       \n   \n \n\n I \n \n   \n       init_jinja_globals() (flask.Flask method) \n \n       inject_url_defaults() (flask.Flask method) \n \n       instance_path (flask.Flask attribute) \n \n   \n   \n       is_json (flask.Request attribute) \n \n       is_null_session() (flask.sessions.SessionInterface method) \n \n       is_xhr (flask.Request attribute) \n \n       iter_blueprints() (flask.Flask method) \n \n   \n \n\n J \n \n   \n       jinja_env (flask.Flask attribute) \n \n       jinja_environment (flask.Flask attribute) \n \n       jinja_loader (flask.Blueprint attribute) \n\n       \n         (flask.Flask attribute) \n \n       \n       jinja_options (flask.Flask attribute) \n \n   \n   \n       json (flask.Request attribute) \n \n       json_decoder (flask.Flask attribute) \n \n       json_encoder (flask.Flask attribute) \n \n       JSONDecoder (class in flask.json) \n \n       JSONEncoder (class in flask.json) \n \n       jsonify() (in module flask.json) \n \n   \n \n\n K \n \n   \n       key_derivation (flask.sessions.SecureCookieSessionInterface attribute) \n \n   \n \n\n L \n \n   \n       load() (in module flask.json) \n \n       load_app() (flask.cli.ScriptInfo method) \n \n       loads() (in module flask.json) \n \n   \n   \n       log_exception() (flask.Flask method) \n \n       logger (flask.Flask attribute) \n \n       logger_name (flask.Flask attribute) \n \n   \n \n\n M \n \n   \n       make_config() (flask.Flask method) \n \n       make_default_options_response() (flask.Flask method) \n \n       make_null_session() (flask.Flask method) \n\n       \n         (flask.sessions.SessionInterface method) \n \n       \n       make_response() (flask.Flask method) \n\n       \n         (in module flask) \n \n       \n       make_setup_state() (flask.Blueprint method) \n \n       make_shell_context() (flask.Flask method) \n \n       Markup (class in flask) \n \n   \n   \n       match_request() (flask.ctx.RequestContext method) \n \n       max_content_length (flask.Request attribute) \n \n       message_flashed (in module flask) \n \n       method (flask.Request attribute) \n \n       methods (flask.views.View attribute) \n \n       MethodView (class in flask.views) \n \n       mimetype (flask.Response attribute) \n \n       modified (flask.session attribute) \n\n       \n         (flask.sessions.SessionMixin attribute) \n \n       \n       module (flask.Request attribute) \n \n   \n \n\n N \n \n   \n       name (flask.Flask attribute) \n \n       new (flask.session attribute) \n\n       \n         (flask.sessions.SessionMixin attribute) \n \n       \n   \n   \n       null_session_class (flask.sessions.SessionInterface attribute) \n \n       NullSession (class in flask.sessions) \n \n   \n \n\n O \n \n   \n       on_json_loading_failed() (flask.Request method) \n \n       open_instance_resource() (flask.Flask method) \n \n       open_resource() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n   \n   \n       open_session() (flask.Flask method) \n\n       \n         (flask.sessions.SessionInterface method) \n \n       \n       options (flask.blueprints.BlueprintSetupState attribute) \n \n   \n \n\n P \n \n   \n       pass_script_info() (in module flask.cli) \n \n       path (flask.Request attribute) \n \n       permanent (flask.session attribute) \n\n       \n         (flask.sessions.SessionMixin attribute) \n \n       \n       permanent_session_lifetime (flask.Flask attribute) \n \n       pickle_based (flask.sessions.SessionInterface attribute) \n \n       pop() (flask.ctx.AppContext method) \n\n       \n         (flask.ctx.RequestContext method) \n \n       \n   \n   \n       preprocess_request() (flask.Flask method) \n \n       preserve_context_on_exception (flask.Flask attribute) \n \n       process_response() (flask.Flask method) \n \n       propagate_exceptions (flask.Flask attribute) \n \n       push() (flask.ctx.AppContext method) \n\n       \n         (flask.ctx.RequestContext method) \n \n       \n       \n    Python Enhancement Proposals\n\n       \n         PEP 8 \n \n       \n   \n \n\n R \n \n   \n       record() (flask.Blueprint method) \n \n       record_once() (flask.Blueprint method) \n \n       redirect() (in module flask) \n \n       register() (flask.Blueprint method) \n \n       register_blueprint() (flask.Flask method) \n \n       register_error_handler() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       render_template() (in module flask) \n \n       render_template_string() (in module flask) \n \n       Request (class in flask) \n \n       request (class in flask) \n \n       request_class (flask.Flask attribute) \n \n       request_context() (flask.Flask method) \n \n   \n   \n       request_finished (in module flask) \n \n       request_started (in module flask) \n \n       request_tearing_down (in module flask) \n \n       RequestContext (class in flask.ctx) \n \n       Response (class in flask) \n \n       response_class (flask.Flask attribute) \n \n       \n    RFC\n\n       \n         RFC 822 \n \n       \n       route() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       routing_exception (flask.Request attribute) \n \n       run() (flask.Flask method) \n \n       run_command (in module flask.cli) \n \n   \n \n\n S \n \n   \n       safe_join() (in module flask) \n \n       salt (flask.sessions.SecureCookieSessionInterface attribute) \n \n       save_session() (flask.Flask method) \n\n       \n         (flask.sessions.SessionInterface method) \n \n       \n       script_root (flask.Request attribute) \n \n       ScriptInfo (class in flask.cli) \n \n       secret_key (flask.Flask attribute) \n \n       SecureCookieSession (class in flask.sessions) \n \n       SecureCookieSessionInterface (class in flask.sessions) \n \n       select_jinja_autoescape() (flask.Flask method) \n \n       send_file() (in module flask) \n \n       send_file_max_age_default (flask.Flask attribute) \n \n       send_from_directory() (in module flask) \n \n       send_static_file() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       serializer (flask.sessions.SecureCookieSessionInterface attribute) \n \n       session (class in flask) \n \n       session_class (flask.sessions.SecureCookieSessionInterface attribute) \n \n       session_cookie_name (flask.Flask attribute) \n \n       session_interface (flask.Flask attribute) \n \n   \n   \n       session_json_serializer (in module flask.sessions) \n \n       session_transaction() (flask.testing.FlaskClient method) \n \n       SessionInterface (class in flask.sessions) \n \n       SessionMixin (class in flask.sessions) \n \n       set_cookie() (flask.Response method) \n \n       shell_command (in module flask.cli) \n \n       shell_context_processor() (flask.Flask method) \n \n       shell_context_processors (flask.Flask attribute) \n \n       should_ignore_error() (flask.Flask method) \n \n       should_set_cookie() (flask.sessions.SessionInterface method) \n \n       signal() (flask.signals.Namespace method) \n \n       signals.Namespace (class in flask) \n \n       signals.signals_available (in module flask) \n \n       static_folder (flask.Blueprint attribute) \n\n       \n         (flask.Flask attribute) \n \n       \n       status (flask.Response attribute) \n \n       status_code (flask.Response attribute) \n \n       stream (flask.Request attribute) \n \n       stream_with_context() (in module flask) \n \n       striptags() (flask.Markup method) \n \n       subdomain (flask.blueprints.BlueprintSetupState attribute) \n \n   \n \n\n T \n \n   \n       teardown_app_request() (flask.Blueprint method) \n \n       teardown_appcontext() (flask.Flask method) \n \n       teardown_appcontext_funcs (flask.Flask attribute) \n \n       teardown_request() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       teardown_request_funcs (flask.Flask attribute) \n \n       template_context_processors (flask.Flask attribute) \n \n       template_filter() (flask.Flask method) \n \n   \n   \n       template_global() (flask.Flask method) \n \n       template_rendered (in module flask) \n \n       template_test() (flask.Flask method) \n \n       test_client() (flask.Flask method) \n \n       test_client_class (flask.Flask attribute) \n \n       test_request_context() (flask.Flask method) \n \n       testing (flask.Flask attribute) \n \n       trap_http_exception() (flask.Flask method) \n \n   \n \n\n U \n \n   \n       unescape() (flask.Markup method) \n \n       update_template_context() (flask.Flask method) \n \n       url (flask.Request attribute) \n \n       url_build_error_handlers (flask.Flask attribute) \n \n       url_default_functions (flask.Flask attribute) \n \n       url_defaults (flask.blueprints.BlueprintSetupState attribute) \n \n       url_defaults() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       url_for() (in module flask) \n \n   \n   \n       url_map (flask.Flask attribute) \n \n       url_prefix (flask.blueprints.BlueprintSetupState attribute) \n \n       url_root (flask.Request attribute) \n \n       url_rule (flask.Request attribute) \n \n       url_rule_class (flask.Flask attribute) \n \n       url_value_preprocessor() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       url_value_preprocessors (flask.Flask attribute) \n \n       use_x_sendfile (flask.Flask attribute) \n \n   \n \n\n V \n \n   \n       values (flask.Request attribute) \n \n       View (class in flask.views) \n \n   \n   \n       view_args (flask.Request attribute) \n \n       view_functions (flask.Flask attribute) \n \n   \n \n\n W \n \n   \n       with_appcontext() (in module flask.cli) \n \n   \n   \n       wsgi_app() (flask.Flask method) \n \n   \n \n\n Y \n \n   \n       YOURAPPLICATION_SETTINGS \n \n   \n \n\n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/", "text": "\n   \n     \n     Welcome to Flask \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n   \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Welcome to Flask \u00b6 \n \n Welcome to Flask\u2019s documentation.  This documentation is divided into\ndifferent parts.  I recommend that you get started with\n Installation  and then head over to the  Quickstart .\nBesides the quickstart, there is also a more detailed  Tutorial  that\nshows how to create a complete (albeit small) application with Flask.  If\nyou\u2019d rather dive into the internals of Flask, check out\nthe  API  documentation.  Common patterns are described in the\n Patterns for Flask  section. \n Flask depends on two external libraries: the  Jinja2  template\nengine and the  Werkzeug  WSGI toolkit.  These libraries are not documented\nhere.  If you want to dive into their documentation, check out the\nfollowing links: \n \n Jinja2 Documentation \n Werkzeug Documentation \n \n \n User\u2019s Guide \u00b6 \n This part of the documentation, which is mostly prose, begins with some\nbackground information about Flask, then focuses on step-by-step\ninstructions for web development with Flask. \n \n \n Foreword \n What does \u201cmicro\u201d mean? \n Configuration and Conventions \n Growing with Flask \n \n \n Foreword for Experienced Programmers \n Thread-Locals in Flask \n Develop for the Web with Caution \n Python 3 Support in Flask \n \n \n Installation \n virtualenv \n System-Wide Installation \n Living on the Edge \n pip  and  setuptools  on Windows \n \n \n Quickstart \n A Minimal Application \n What to do if the Server does not Start \n Debug Mode \n Routing \n Static Files \n Rendering Templates \n Accessing Request Data \n Redirects and Errors \n About Responses \n Sessions \n Message Flashing \n Logging \n Hooking in WSGI Middlewares \n Using Flask Extensions \n Deploying to a Web Server \n \n \n Tutorial \n Introducing Flaskr \n Step 0: Creating The Folders \n Step 1: Database Schema \n Step 2: Application Setup Code \n Step 3: Installing flaskr as a Package \n Step 4: Database Connections \n Step 5: Creating The Database \n Step 6: The View Functions \n Step 7: The Templates \n Step 8: Adding Style \n Bonus: Testing the Application \n \n \n Templates \n Jinja Setup \n Standard Context \n Standard Filters \n Controlling Autoescaping \n Registering Filters \n Context Processors \n \n \n Testing Flask Applications \n The Application \n The Testing Skeleton \n The First Test \n Logging In and Out \n Test Adding Messages \n Other Testing Tricks \n Faking Resources and Context \n Keeping the Context Around \n Accessing and Modifying Sessions \n \n \n Application Errors \n Error Logging Tools \n Error handlers \n Error Mails \n Logging to a File \n Controlling the Log Format \n Other Libraries \n \n \n Debugging Application Errors \n When in Doubt, Run Manually \n Working with Debuggers \n \n \n Configuration Handling \n Configuration Basics \n Builtin Configuration Values \n Configuring from Files \n Configuration Best Practices \n Development / Production \n Instance Folders \n \n \n Signals \n Subscribing to Signals \n Creating Signals \n Sending Signals \n Signals and Flask\u2019s Request Context \n Decorator Based Signal Subscriptions \n Core Signals \n \n \n Pluggable Views \n Basic Principle \n Method Hints \n Method Based Dispatching \n Decorating Views \n Method Views for APIs \n \n \n The Application Context \n Purpose of the Application Context \n Creating an Application Context \n Locality of the Context \n Context Usage \n \n \n The Request Context \n Diving into Context Locals \n How the Context Works \n Callbacks and Errors \n Teardown Callbacks \n Notes On Proxies \n Context Preservation on Error \n \n \n Modular Applications with Blueprints \n Why Blueprints? \n The Concept of Blueprints \n My First Blueprint \n Registering Blueprints \n Blueprint Resources \n Building URLs \n Error Handlers \n \n \n Flask Extensions \n Finding Extensions \n Using Extensions \n Building Extensions \n Flask Before 0.8 \n \n \n Command Line Interface \n Basic Usage \n Virtualenv Integration \n Debug Flag \n Running a Shell \n Custom Commands \n Application Context \n Factory Functions \n Custom Scripts \n CLI Plugins \n \n \n Development Server \n Command Line \n In Code \n \n \n Working with the Shell \n Command Line Interface \n Creating a Request Context \n Firing Before/After Request \n Further Improving the Shell Experience \n \n \n Patterns for Flask \n Larger Applications \n Application Factories \n Application Dispatching \n Implementing API Exceptions \n Using URL Processors \n Deploying with Setuptools \n Deploying with Fabric \n Using SQLite 3 with Flask \n SQLAlchemy in Flask \n Uploading Files \n Caching \n View Decorators \n Form Validation with WTForms \n Template Inheritance \n Message Flashing \n AJAX with jQuery \n Custom Error Pages \n Lazily Loading Views \n MongoKit in Flask \n Adding a favicon \n Streaming Contents \n Deferred Request Callbacks \n Adding HTTP Method Overrides \n Request Content Checksums \n Celery Based Background Tasks \n Subclassing Flask \n \n \n Deployment Options \n Hosted options \n Self-hosted options \n \n \n Becoming Big \n Read the Source. \n Hook. Extend. \n Subclass. \n Wrap with middleware. \n Fork. \n Scale like a pro. \n Discuss with the community. \n \n \n \n \n \n \n API Reference \u00b6 \n If you are looking for information on a specific function, class or\nmethod, this part of the documentation is for you. \n \n \n API \n Application Object \n Blueprint Objects \n Incoming Request Data \n Response Objects \n Sessions \n Session Interface \n Test Client \n Application Globals \n Useful Functions and Classes \n Message Flashing \n JSON Support \n Template Rendering \n Configuration \n Extensions \n Stream Helpers \n Useful Internals \n Signals \n Class-Based Views \n URL Route Registrations \n View Function Options \n Command Line Interface \n \n \n \n \n \n \n Additional Notes \u00b6 \n Design notes, legal information and changelog are here for the interested. \n \n \n Design Decisions in Flask \n The Explicit Application Object \n The Routing System \n One Template Engine \n Micro with Dependencies \n Thread Locals \n What Flask is, What Flask is Not \n \n \n HTML/XHTML FAQ \n History of XHTML \n History of HTML5 \n HTML versus XHTML \n What does \u201cstrict\u201d mean? \n New technologies in HTML5 \n What should be used? \n \n \n Security Considerations \n Cross-Site Scripting (XSS) \n Cross-Site Request Forgery (CSRF) \n JSON Security \n \n \n Unicode in Flask \n Automatic Conversion \n The Golden Rule \n Encoding and Decoding Yourself \n Configuring Editors \n \n \n Flask Extension Development \n Anatomy of an Extension \n \u201cHello Flaskext!\u201d \n Initializing Extensions \n The Extension Code \n Using _app_ctx_stack \n Teardown Behavior \n Learn from Others \n Approved Extensions \n Extension Import Transition \n \n \n Pocoo Styleguide \n General Layout \n Expressions and Statements \n Naming Conventions \n Docstrings \n Comments \n \n \n Python 3 Support \n Upgrading to Newer Releases \n Version 0.12 \n Version 0.11 \n Version 0.10 \n Version 0.9 \n Version 0.8 \n Version 0.7 \n Version 0.6 \n Version 0.5 \n Version 0.4 \n Version 0.3 \n \n \n Flask Changelog \n Version 0.13 \n Version 0.12.2 \n Version 0.12.1 \n Version 0.12 \n Version 0.11.2 \n Version 0.11.1 \n Version 0.11 \n Version 0.10.2 \n Version 0.10.1 \n Version 0.10 \n Version 0.9 \n Version 0.8.1 \n Version 0.8 \n Version 0.7.3 \n Version 0.7.2 \n Version 0.7.1 \n Version 0.7 \n Version 0.6.1 \n Version 0.6 \n Version 0.5.2 \n Version 0.5.1 \n Version 0.5 \n Version 0.4 \n Version 0.3.1 \n Version 0.3 \n Version 0.2 \n Version 0.1 \n \n \n License \n Authors \n General License Definitions \n Flask License \n Flask Artwork License \n \n \n \n \n \n \n\n\n           \n         \n       \n\n       \n         About Flask \n \n  Flask is a micro webdevelopment framework for Python.\n \n Useful Links \n \n   The Flask Website \n   Flask @ PyPI \n   Flask @ github \n   Issue Tracker \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/", "text": "\n   \n     \n     Patterns for Flask \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Patterns for Flask \u00b6 \n Certain things are common enough that the chances are high you will find\nthem in most web applications.  For example quite a lot of applications\nare using relational databases and user authentication.  In that case,\nchances are they will open a database connection at the beginning of the\nrequest and get the information of the currently logged in user.  At the\nend of the request, the database connection is closed again. \n There are more user contributed snippets and patterns in the  Flask\nSnippet Archives . \n \n \n Larger Applications \n Simple Packages \n Working with Blueprints \n \n \n Application Factories \n Basic Factories \n Factories & Extensions \n Using Applications \n Factory Improvements \n \n \n Application Dispatching \n Working with this Document \n Combining Applications \n Dispatch by Subdomain \n Dispatch by Path \n \n \n Implementing API Exceptions \n Simple Exception Class \n Registering an Error Handler \n Usage in Views \n \n \n Using URL Processors \n Internationalized Application URLs \n Internationalized Blueprint URLs \n \n \n Deploying with Setuptools \n Basic Setup Script \n Tagging Builds \n Distributing Resources \n Declaring Dependencies \n Installing / Developing \n \n \n Deploying with Fabric \n Creating the first Fabfile \n Running Fabfiles \n The WSGI File \n The Configuration File \n First Deployment \n Next Steps \n \n \n Using SQLite 3 with Flask \n Connect on Demand \n Easy Querying \n Initial Schemas \n \n \n SQLAlchemy in Flask \n Flask-SQLAlchemy Extension \n Declarative \n Manual Object Relational Mapping \n SQL Abstraction Layer \n \n \n Uploading Files \n A Gentle Introduction \n Improving Uploads \n Upload Progress Bars \n An Easier Solution \n \n \n Caching \n Setting up a Cache \n Using a Cache \n \n \n View Decorators \n Login Required Decorator \n Caching Decorator \n Templating Decorator \n Endpoint Decorator \n \n \n Form Validation with WTForms \n The Forms \n In the View \n Forms in Templates \n \n \n Template Inheritance \n Base Template \n Child Template \n \n \n Message Flashing \n Simple Flashing \n Flashing With Categories \n Filtering Flash Messages \n \n \n AJAX with jQuery \n Loading jQuery \n Where is My Site? \n JSON View Functions \n The HTML \n \n \n Custom Error Pages \n Common Error Codes \n Error Handlers \n \n \n Lazily Loading Views \n Converting to Centralized URL Map \n Loading Late \n \n \n MongoKit in Flask \n Declarative \n PyMongo Compatibility Layer \n \n \n Adding a favicon \n See also \n \n \n Streaming Contents \n Basic Usage \n Streaming from Templates \n Streaming with Context \n \n \n Deferred Request Callbacks \n The Decorator \n Calling the Deferred \n A Practical Example \n \n \n Adding HTTP Method Overrides \n Request Content Checksums \n Celery Based Background Tasks \n Installing Celery \n Configuring Celery \n Minimal Example \n Running the Celery Worker \n \n \n Subclassing Flask \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Working with the Shell \n       Next:  Larger Applications \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/foreword/", "text": "\n   \n     \n     Foreword \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Foreword \u00b6 \n Read this before you get started with Flask.  This hopefully answers some\nquestions about the purpose and goals of the project, and when you\nshould or should not be using it. \n \n What does \u201cmicro\u201d mean? \u00b6 \n \u201cMicro\u201d does not mean that your whole web application has to fit into a single\nPython file (although it certainly can), nor does it mean that Flask is lacking\nin functionality. The \u201cmicro\u201d in microframework means Flask aims to keep the\ncore simple but extensible. Flask won\u2019t make many decisions for you, such as\nwhat database to use. Those decisions that it does make, such as what\ntemplating engine to use, are easy to change.  Everything else is up to you, so\nthat Flask can be everything you need and nothing you don\u2019t. \n By default, Flask does not include a database abstraction layer, form\nvalidation or anything else where different libraries already exist that can\nhandle that. Instead, Flask supports extensions to add such functionality to\nyour application as if it was implemented in Flask itself. Numerous extensions\nprovide database integration, form validation, upload handling, various open\nauthentication technologies, and more. Flask may be \u201cmicro\u201d, but it\u2019s ready for\nproduction use on a variety of needs. \n \n \n Configuration and Conventions \u00b6 \n Flask has many configuration values, with sensible defaults, and a few\nconventions when getting started.  By convention, templates and static files are\nstored in subdirectories within the application\u2019s Python source tree, with the\nnames  templates  and  static  respectively. While this can be changed, you\nusually don\u2019t have to, especially when getting started. \n \n \n Growing with Flask \u00b6 \n Once you have Flask up and running, you\u2019ll find a variety of extensions\navailable in the community to integrate your project for production. The Flask\ncore team reviews extensions and ensures approved extensions do not break with\nfuture releases. \n As your codebase grows, you are free to make the design decisions appropriate\nfor your project.  Flask will continue to provide a very simple glue layer to\nthe best that Python has to offer.  You can implement advanced patterns in\nSQLAlchemy or another database tool, introduce non-relational data persistence\nas appropriate, and take advantage of framework-agnostic tools built for WSGI,\nthe Python web interface. \n Flask includes many hooks to customize its behavior. Should you need more\ncustomization, the Flask class is built for subclassing. If you are interested\nin that, check out the  Becoming Big  chapter.  If you are curious about\nthe Flask design principles, head over to the section about  Design Decisions in Flask . \n Continue to  Installation , the  Quickstart , or the\n Foreword for Experienced Programmers . \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Foreword \n What does \u201cmicro\u201d mean? \n Configuration and Conventions \n Growing with Flask \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Welcome to Flask \n       Next:  Foreword for Experienced Programmers \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/tutorial/", "text": "\n   \n     \n     Tutorial \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Tutorial \u00b6 \n You want to develop an application with Python and Flask?  Here you have\nthe chance to learn by example.  In this tutorial, we will create a simple\nmicroblogging application.  It only supports one user that can create\ntext-only entries and there are no feeds or comments, but it still\nfeatures everything you need to get started.  We will use Flask and SQLite\nas a database (which comes out of the box with Python) so there is nothing\nelse you need. \n If you want the full source code in advance or for comparison, check out\nthe  example source . \n \n \n Introducing Flaskr \n Step 0: Creating The Folders \n Step 1: Database Schema \n Step 2: Application Setup Code \n Step 3: Installing flaskr as a Package \n Step 4: Database Connections \n Step 5: Creating The Database \n Step 6: The View Functions \n Show Entries \n Add New Entry \n Login and Logout \n \n \n Step 7: The Templates \n layout.html \n show_entries.html \n login.html \n \n \n Step 8: Adding Style \n Bonus: Testing the Application \n Adding tests to flaskr \n Running the tests \n Testing + setuptools \n \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Quickstart \n       Next:  Introducing Flaskr \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/advanced_foreword/", "text": "\n   \n     \n     Foreword for Experienced Programmers \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Foreword for Experienced Programmers \u00b6 \n \n Thread-Locals in Flask \u00b6 \n One of the design decisions in Flask was that simple tasks should be simple;\nthey should not take a lot of code and yet they should not limit you. Because\nof that, Flask has a few design choices that some people might find surprising or\nunorthodox. For example, Flask uses thread-local objects internally so that you\ndon\u2019t have to pass objects around from function to function within a request in\norder to stay threadsafe. This approach is convenient, but requires a valid\nrequest context for dependency injection or when attempting to reuse code which\nuses a value pegged to the request.  The Flask project is honest about\nthread-locals, does not hide them, and calls out in the code and documentation\nwhere they are used. \n \n \n Develop for the Web with Caution \u00b6 \n Always keep security in mind when building web applications. \n If you write a web application, you are probably allowing users to register\nand leave their data on your server.  The users are entrusting you with data.\nAnd even if you are the only user that might leave data in your application,\nyou still want that data to be stored securely. \n Unfortunately, there are many ways the security of a web application can be\ncompromised.  Flask protects you against one of the most common security\nproblems of modern web applications: cross-site scripting (XSS).  Unless you\ndeliberately mark insecure HTML as secure, Flask and the underlying Jinja2\ntemplate engine have you covered.  But there are many more ways to cause\nsecurity problems. \n The documentation will warn you about aspects of web development that require\nattention to security.  Some of these security concerns are far more complex\nthan one might think, and we all sometimes underestimate the likelihood that a\nvulnerability will be exploited - until a clever attacker figures out a way to\nexploit our applications.  And don\u2019t think that your application is not\nimportant enough to attract an attacker.  Depending on the kind of attack,\nchances are that automated bots are probing for ways to fill your database with\nspam, links to malicious software, and the like. \n Flask is no different from any other framework in that you the developer must\nbuild with caution, watching for exploits when building to your requirements. \n \n \n Python 3 Support in Flask \u00b6 \n Flask, its dependencies, and most Flask extensions all support Python 3.\nIf you want to use Flask with Python 3 have a look at the  Python 3 Support  page. \n Continue to  Installation  or the  Quickstart . \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Foreword for Experienced Programmers \n Thread-Locals in Flask \n Develop for the Web with Caution \n Python 3 Support in Flask \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Foreword \n       Next:  Installation \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/installation/", "text": "\n   \n     \n     Installation \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Installation \u00b6 \n Flask depends on some external libraries, like  Werkzeug  and  Jinja2 .\nWerkzeug is a toolkit for WSGI, the standard Python interface between web\napplications and a variety of servers for both development and deployment.\nJinja2 renders templates. \n So how do you get all that on your computer quickly?  There are many ways you\ncould do that, but the most kick-ass method is virtualenv, so let\u2019s have a look\nat that first. \n You will need Python 2.6 or newer to get started, so be sure to have an\nup-to-date Python 2.x installation.  For using Flask with Python 3 have a\nlook at  Python 3 Support . \n \n virtualenv \u00b6 \n Virtualenv is probably what you want to use during development, and if you have\nshell access to your production machines, you\u2019ll probably want to use it there,\ntoo. \n What problem does virtualenv solve?  If you like Python as much as I do,\nchances are you want to use it for other projects besides Flask-based web\napplications.  But the more projects you have, the more likely it is that you\nwill be working with different versions of Python itself, or at least different\nversions of Python libraries.  Let\u2019s face it: quite often libraries break\nbackwards compatibility, and it\u2019s unlikely that any serious application will\nhave zero dependencies.  So what do you do if two or more of your projects have\nconflicting dependencies? \n Virtualenv to the rescue!  Virtualenv enables multiple side-by-side\ninstallations of Python, one for each project.  It doesn\u2019t actually install\nseparate copies of Python, but it does provide a clever way to keep different\nproject environments isolated.  Let\u2019s see how virtualenv works. \n If you are on Mac OS X or Linux, chances are that the following\ncommand will work for you: \n $ sudo pip install virtualenv\n \n \n It will probably install virtualenv on your system.  Maybe it\u2019s even\nin your package manager.  If you use Ubuntu, try: \n $ sudo apt-get install python-virtualenv\n \n \n If you are on Windows and don\u2019t have the  easy_install  command, you must\ninstall it first.  Check the  pip and setuptools on Windows  section for more\ninformation about how to do that.  Once you have it installed, run the same\ncommands as above, but without the  sudo  prefix. \n Once you have virtualenv installed, just fire up a shell and create\nyour own environment.  I usually create a project folder and a  venv \nfolder within: \n $ mkdir myproject\n$ cd myproject\n$ virtualenv venv\nNew python executable in venv/bin/python\nInstalling setuptools, pip............done.\n \n \n Now, whenever you want to work on a project, you only have to activate the\ncorresponding environment.  On OS X and Linux, do the following: \n $ . venv/bin/activate\n \n \n If you are a Windows user, the following command is for you: \n $ venv\\Scripts\\activate\n \n \n Either way, you should now be using your virtualenv (notice how the prompt of\nyour shell has changed to show the active environment). \n And if you want to go back to the real world, use the following command: \n $ deactivate\n \n \n After doing this, the prompt of your shell should be as familiar as before. \n Now, let\u2019s move on. Enter the following command to get Flask activated in your\nvirtualenv: \n $ pip install Flask\n \n \n A few seconds later and you are good to go. \n \n \n System-Wide Installation \u00b6 \n This is possible as well, though I do not recommend it.  Just run\n pip  with root privileges: \n $ sudo pip install Flask\n \n \n (On Windows systems, run it in a command-prompt window with administrator\nprivileges, and leave out  sudo .) \n \n \n Living on the Edge \u00b6 \n If you want to work with the latest version of Flask, there are two ways: you\ncan either let  pip  pull in the development version, or you can tell\nit to operate on a git checkout.  Either way, virtualenv is recommended. \n Get the git checkout in a new virtualenv and run in development mode: \n $ git clone http://github.com/pallets/flask.git\nInitialized empty Git repository in ~/dev/flask/.git/\n$ cd flask\n$ virtualenv venv\nNew python executable in venv/bin/python\nInstalling setuptools, pip............done.\n$ . venv/bin/activate\n$ python setup.py develop\n...\nFinished processing dependencies for Flask\n \n \n This will pull in the dependencies and activate the git head as the current\nversion inside the virtualenv.  Then all you have to do is run  git   pull \n origin  to update to the latest version. \n \n \n pip  and  setuptools  on Windows \u00b6 \n Sometimes getting the standard \u201cPython packaging tools\u201d like  pip ,  setuptools \nand  virtualenv  can be a little trickier, but nothing very hard. The crucial\npackage you will need is pip - this will let you install\nanything else (like virtualenv). Fortunately there is a \u201cbootstrap script\u201d\nyou can run to install. \n If you don\u2019t currently have  pip , then  get-pip.py  will install it for you. \n get-pip.py \n It should be double-clickable once you download it. If you already have  pip ,\nyou can upgrade them by running: \n >   pip   install   -- upgrade   pip   setuptools \n \n \n Most often, once you pull up a command prompt you want to be able to type  pip \nand  python  which will run those things, but this might not automatically happen\non Windows, because it doesn\u2019t know where those executables are (give either a try!). \n To fix this, you should be able to navigate to your Python install directory\n(e.g  C:Python27 ), then go to  Tools , then  Scripts , then find the\n win_add2path.py  file and run that. Open a  new  Command Prompt and\ncheck that you can now just type  python  to bring up the interpreter. \n Finally, to install  virtualenv , you can simply run: \n >   pip   install   virtualenv \n \n \n Then you can be off on your way following the installation instructions above. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Installation \n virtualenv \n System-Wide Installation \n Living on the Edge \n pip  and  setuptools  on Windows \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Foreword for Experienced Programmers \n       Next:  Quickstart \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/quickstart/", "text": "\n   \n     \n     Quickstart \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Quickstart \u00b6 \n Eager to get started?  This page gives a good introduction to Flask.  It\nassumes you already have Flask installed.  If you do not, head over to the\n Installation  section. \n \n A Minimal Application \u00b6 \n A minimal Flask application looks something like this: \n from   flask   import   Flask \n app   =   Flask ( __name__ ) \n\n @app . route ( '/' ) \n def   hello_world (): \n     return   'Hello, World!' \n \n \n So what did that code do? \n \n First we imported the  Flask  class.  An instance of this\nclass will be our WSGI application. \n Next we create an instance of this class. The first argument is the name of\nthe application\u2019s module or package.  If you are using a single module (as\nin this example), you should use  __name__  because depending on if it\u2019s\nstarted as application or imported as module the name will be different\n( '__main__'  versus the actual import name). This is needed so that\nFlask knows where to look for templates, static files, and so on. For more\ninformation have a look at the  Flask  documentation. \n We then use the  route()  decorator to tell Flask what URL\nshould trigger our function. \n The function is given a name which is also used to generate URLs for that\nparticular function, and returns the message we want to display in the\nuser\u2019s browser. \n \n Just save it as  hello.py  or something similar. Make sure to not call\nyour application  flask.py  because this would conflict with Flask\nitself. \n To run the application you can either use the  flask  command or\npython\u2019s  -m  switch with Flask.  Before you can do that you need\nto tell your terminal the application to work with by exporting the\n FLASK_APP  environment variable: \n $ export FLASK_APP=hello.py\n$ flask run\n * Running on http://127.0.0.1:5000/\n \n \n If you are on Windows you need to use  set  instead of  export . \n Alternatively you can use  python -m flask : \n $ export FLASK_APP=hello.py\n$ python -m flask run\n * Running on http://127.0.0.1:5000/\n \n \n This launches a very simple builtin server, which is good enough for testing\nbut probably not what you want to use in production. For deployment options see\n Deployment Options . \n Now head over to  http://127.0.0.1:5000/ , and you\nshould see your hello world greeting. \n \n Externally Visible Server \n If you run the server you will notice that the server is only accessible\nfrom your own computer, not from any other in the network.  This is the\ndefault because in debugging mode a user of the application can execute\narbitrary Python code on your computer. \n If you have the debugger disabled or trust the users on your network,\nyou can make the server publicly available simply by adding\n --host=0.0.0.0  to the command line: \n flask   run   -- host = 0.0 . 0.0 \n \n \n This tells your operating system to listen on all public IPs. \n \n \n \n What to do if the Server does not Start \u00b6 \n In case the  python -m flask  fails or  flask  does not exist,\nthere are multiple reasons this might be the case.  First of all you need\nto look at the error message. \n \n Old Version of Flask \u00b6 \n Versions of Flask older than 0.11 use to have different ways to start the\napplication.  In short, the  flask  command did not exist, and\nneither did  python -m flask .  In that case you have two options:\neither upgrade to newer Flask versions or have a look at the  Development Server \ndocs to see the alternative method for running a server. \n \n \n Invalid Import Name \u00b6 \n The  FLASK_APP  environment variable is the name of the module to import at\n flask run . In case that module is incorrectly named you will get an\nimport error upon start (or if debug is enabled when you navigate to the\napplication). It will tell you what it tried to import and why it failed. \n The most common reason is a typo or because you did not actually create an\n app  object. \n \n \n \n Debug Mode \u00b6 \n (Want to just log errors and stack traces? See  Application Errors ) \n The  flask  script is nice to start a local development server, but\nyou would have to restart it manually after each change to your code.\nThat is not very nice and Flask can do better.  If you enable debug\nsupport the server will reload itself on code changes, and it will also\nprovide you with a helpful debugger if things go wrong. \n To enable debug mode you can export the  FLASK_DEBUG  environment variable\nbefore running the server: \n $ export FLASK_DEBUG=1\n$ flask run\n \n \n (On Windows you need to use  set  instead of  export ). \n This does the following things: \n \n it activates the debugger \n it activates the automatic reloader \n it enables the debug mode on the Flask application. \n \n There are more parameters that are explained in the  Development Server  docs. \n \n Attention \n Even though the interactive debugger does not work in forking environments\n(which makes it nearly impossible to use on production servers), it still\nallows the execution of arbitrary code. This makes it a major security risk\nand therefore it  must never be used on production machines . \n \n Screenshot of the debugger in action: \n \n Have another debugger in mind? See  Working with Debuggers . \n \n \n Routing \u00b6 \n Modern web applications have beautiful URLs.  This helps people remember\nthe URLs, which is especially handy for applications that are used from\nmobile devices with slower network connections.  If the user can directly\ngo to the desired page without having to hit the index page it is more\nlikely they will like the page and come back next time. \n As you have seen above, the  route()  decorator is used to\nbind a function to a URL.  Here are some basic examples: \n @app . route ( '/' ) \n def   index (): \n     return   'Index Page' \n\n @app . route ( '/hello' ) \n def   hello (): \n     return   'Hello, World' \n \n \n But there is more to it!  You can make certain parts of the URL dynamic and\nattach multiple rules to a function. \n \n Variable Rules \u00b6 \n To add variable parts to a URL you can mark these special sections as\n <variable_name> .  Such a part is then passed as a keyword argument to your\nfunction.  Optionally a converter can be used by specifying a rule with\n <converter:variable_name> .  Here are some nice examples: \n @app . route ( '/user/<username>' ) \n def   show_user_profile ( username ): \n     # show the user profile for that user \n     return   'User  %s '   %   username \n\n @app . route ( '/post/<int:post_id>' ) \n def   show_post ( post_id ): \n     # show the post with the given id, the id is an integer \n     return   'Post  %d '   %   post_id \n \n \n The following converters exist: \n \n \n \n \n \n \n string \n accepts any text without a slash (the default) \n \n int \n accepts integers \n \n float \n like  int  but for floating point values \n \n path \n like the default but also accepts slashes \n \n any \n matches one of the items provided \n \n uuid \n accepts UUID strings \n \n \n \n \n Unique URLs / Redirection Behavior \n Flask\u2019s URL rules are based on Werkzeug\u2019s routing module.  The idea\nbehind that module is to ensure beautiful and unique URLs based on\nprecedents laid down by Apache and earlier HTTP servers. \n Take these two rules: \n @app . route ( '/projects/' ) \n def   projects (): \n     return   'The project page' \n\n @app . route ( '/about' ) \n def   about (): \n     return   'The about page' \n \n \n Though they look rather similar, they differ in their use of the trailing\nslash in the URL  definition .  In the first case, the canonical URL for the\n projects  endpoint has a trailing slash.  In that sense, it is similar to\na folder on a filesystem.  Accessing it without a trailing slash will cause\nFlask to redirect to the canonical URL with the trailing slash. \n In the second case, however, the URL is defined without a trailing slash,\nrather like the pathname of a file on UNIX-like systems. Accessing the URL\nwith a trailing slash will produce a 404 \u201cNot Found\u201d error. \n This behavior allows relative URLs to continue working even if the trailing\nslash is omitted, consistent with how Apache and other servers work.  Also,\nthe URLs will stay unique, which helps search engines avoid indexing the\nsame page twice. \n \n \n \n URL Building \u00b6 \n If it can match URLs, can Flask also generate them?  Of course it can.  To\nbuild a URL to a specific function you can use the  url_for() \nfunction.  It accepts the name of the function as first argument and a number\nof keyword arguments, each corresponding to the variable part of the URL rule.\nUnknown variable parts are appended to the URL as query parameters.  Here are\nsome examples: \n >>>  from   flask   import   Flask ,   url_for \n >>>  app   =   Flask ( __name__ ) \n >>>  @app . route ( '/' ) \n ...  def   index ():   pass \n ... \n >>>  @app . route ( '/login' ) \n ...  def   login ():   pass \n ... \n >>>  @app . route ( '/user/<username>' ) \n ...  def   profile ( username ):   pass \n ... \n >>>  with   app . test_request_context (): \n ...    print   url_for ( 'index' ) \n ...    print   url_for ( 'login' ) \n ...    print   url_for ( 'login' ,   next = '/' ) \n ...    print   url_for ( 'profile' ,   username = 'John Doe' ) \n ... \n / \n /login \n /login?next=/ \n /user/John%20Doe \n \n \n (This also uses the  test_request_context()  method, explained\nbelow.  It tells Flask to behave as though it is handling a request, even\nthough we are interacting with it through a Python shell.  Have a look at the\nexplanation below.  Context Locals ). \n Why would you want to build URLs using the URL reversing function\n url_for()  instead of hard-coding them into your templates?\nThere are three good reasons for this: \n \n Reversing is often more descriptive than hard-coding the URLs.  More\nimportantly, it allows you to change URLs in one go, without having to\nremember to change URLs all over the place. \n URL building will handle escaping of special characters and Unicode\ndata transparently for you, so you don\u2019t have to deal with them. \n If your application is placed outside the URL root - say, in\n /myapplication  instead of  /  -  url_for()  will handle\nthat properly for you. \n \n \n \n HTTP Methods \u00b6 \n HTTP (the protocol web applications are speaking) knows different methods for\naccessing URLs.  By default, a route only answers to  GET  requests, but that\ncan be changed by providing the  methods  argument to the\n route()  decorator.  Here are some examples: \n from   flask   import   request \n\n @app . route ( '/login' ,   methods = [ 'GET' ,   'POST' ]) \n def   login (): \n     if   request . method   ==   'POST' : \n         do_the_login () \n     else : \n         show_the_login_form () \n \n \n If  GET  is present,  HEAD  will be added automatically for you.  You\ndon\u2019t have to deal with that.  It will also make sure that  HEAD  requests\nare handled as the  HTTP RFC  (the document describing the HTTP\nprotocol) demands, so you can completely ignore that part of the HTTP\nspecification.  Likewise, as of Flask 0.6,  OPTIONS  is implemented for you\nautomatically as well. \n You have no idea what an HTTP method is?  Worry not, here is a quick\nintroduction to HTTP methods and why they matter: \n The HTTP method (also often called \u201cthe verb\u201d) tells the server what the\nclient wants to  do  with the requested page.  The following methods are\nvery common: \n \n GET \n The browser tells the server to just  get  the information stored on\nthat page and send it.  This is probably the most common method. \n HEAD \n The browser tells the server to get the information, but it is only\ninterested in the  headers , not the content of the page.  An\napplication is supposed to handle that as if a  GET  request was\nreceived but to not deliver the actual content.  In Flask you don\u2019t\nhave to deal with that at all, the underlying Werkzeug library handles\nthat for you. \n POST \n The browser tells the server that it wants to  post  some new\ninformation to that URL and that the server must ensure the data is\nstored and only stored once.  This is how HTML forms usually\ntransmit data to the server. \n PUT \n Similar to  POST  but the server might trigger the store procedure\nmultiple times by overwriting the old values more than once.  Now you\nmight be asking why this is useful, but there are some good reasons\nto do it this way.  Consider that the connection is lost during\ntransmission: in this situation a system between the browser and the\nserver might receive the request safely a second time without breaking\nthings.  With  POST  that would not be possible because it must only\nbe triggered once. \n DELETE \n Remove the information at the given location. \n OPTIONS \n Provides a quick way for a client to figure out which methods are\nsupported by this URL.  Starting with Flask 0.6, this is implemented\nfor you automatically. \n \n Now the interesting part is that in HTML4 and XHTML1, the only methods a\nform can submit to the server are  GET  and  POST .  But with JavaScript\nand future HTML standards you can use the other methods as well.  Furthermore\nHTTP has become quite popular lately and browsers are no longer the only\nclients that are using HTTP. For instance, many revision control systems\nuse it. \n \n \n \n Static Files \u00b6 \n Dynamic web applications also need static files.  That\u2019s usually where\nthe CSS and JavaScript files are coming from.  Ideally your web server is\nconfigured to serve them for you, but during development Flask can do that\nas well.  Just create a folder called  static  in your package or next to\nyour module and it will be available at  /static  on the application. \n To generate URLs for static files, use the special  'static'  endpoint name: \n url_for ( 'static' ,   filename = 'style.css' ) \n \n \n The file has to be stored on the filesystem as  static/style.css . \n \n \n Rendering Templates \u00b6 \n Generating HTML from within Python is not fun, and actually pretty\ncumbersome because you have to do the HTML escaping on your own to keep\nthe application secure.  Because of that Flask configures the  Jinja2  template engine for you automatically. \n To render a template you can use the  render_template() \nmethod.  All you have to do is provide the name of the template and the\nvariables you want to pass to the template engine as keyword arguments.\nHere\u2019s a simple example of how to render a template: \n from   flask   import   render_template \n\n @app . route ( '/hello/' ) \n @app . route ( '/hello/<name>' ) \n def   hello ( name = None ): \n     return   render_template ( 'hello.html' ,   name = name ) \n \n \n Flask will look for templates in the  templates  folder.  So if your\napplication is a module, this folder is next to that module, if it\u2019s a\npackage it\u2019s actually inside your package: \n Case 1 : a module: \n / application . py \n / templates \n     / hello . html \n \n \n Case 2 : a package: \n / application \n     / __init__ . py \n     / templates \n         / hello . html \n \n \n For templates you can use the full power of Jinja2 templates.  Head over\nto the official  Jinja2 Template Documentation  for more information. \n Here is an example template: \n <!doctype html> \n < title > Hello from Flask </ title > \n {%   if   name   %} \n   < h1 > Hello  {{   name   }} ! </ h1 > \n {%   else   %} \n   < h1 > Hello, World! </ h1 > \n {%   endif   %} \n \n \n Inside templates you also have access to the  request ,\n session  and  g   [1]  objects\nas well as the  get_flashed_messages()  function. \n Templates are especially useful if inheritance is used.  If you want to\nknow how that works, head over to the  Template Inheritance  pattern\ndocumentation.  Basically template inheritance makes it possible to keep\ncertain elements on each page (like header, navigation and footer). \n Automatic escaping is enabled, so if  name  contains HTML it will be escaped\nautomatically.  If you can trust a variable and you know that it will be\nsafe HTML (for example because it came from a module that converts wiki\nmarkup to HTML) you can mark it as safe by using the\n Markup  class or by using the  |safe  filter in the\ntemplate.  Head over to the Jinja 2 documentation for more examples. \n Here is a basic introduction to how the  Markup  class works: \n >>>  from   flask   import   Markup \n >>>  Markup ( '<strong>Hello  %s !</strong>' )   %   '<blink>hacker</blink>' \n Markup(u'<strong>Hello &lt;blink&gt;hacker&lt;/blink&gt;!</strong>') \n >>>  Markup . escape ( '<blink>hacker</blink>' ) \n Markup(u'&lt;blink&gt;hacker&lt;/blink&gt;') \n >>>  Markup ( '<em>Marked up</em> &raquo; HTML' ) . striptags () \n u'Marked up \\xbb HTML' \n \n \n \n Changed in version 0.5:  Autoescaping is no longer enabled for all templates.  The following\nextensions for templates trigger autoescaping:  .html ,  .htm ,\n .xml ,  .xhtml .  Templates loaded from a string will have\nautoescaping disabled. \n \n \n \n \n [1] Unsure what that  g  object is? It\u2019s something in which\nyou can store information for your own needs, check the documentation of\nthat object ( g ) and the  Using SQLite 3 with Flask  for more\ninformation. \n \n \n \n \n Accessing Request Data \u00b6 \n For web applications it\u2019s crucial to react to the data a client sends to\nthe server.  In Flask this information is provided by the global\n request  object.  If you have some experience with Python\nyou might be wondering how that object can be global and how Flask\nmanages to still be threadsafe.  The answer is context locals: \n \n Context Locals \u00b6 \n \n Insider Information \n If you want to understand how that works and how you can implement\ntests with context locals, read this section, otherwise just skip it. \n \n Certain objects in Flask are global objects, but not of the usual kind.\nThese objects are actually proxies to objects that are local to a specific\ncontext.  What a mouthful.  But that is actually quite easy to understand. \n Imagine the context being the handling thread.  A request comes in and the\nweb server decides to spawn a new thread (or something else, the\nunderlying object is capable of dealing with concurrency systems other\nthan threads).  When Flask starts its internal request handling it\nfigures out that the current thread is the active context and binds the\ncurrent application and the WSGI environments to that context (thread).\nIt does that in an intelligent way so that one application can invoke another\napplication without breaking. \n So what does this mean to you?  Basically you can completely ignore that\nthis is the case unless you are doing something like unit testing.  You\nwill notice that code which depends on a request object will suddenly break\nbecause there is no request object.  The solution is creating a request\nobject yourself and binding it to the context.  The easiest solution for\nunit testing is to use the  test_request_context() \ncontext manager.  In combination with the  with  statement it will bind a\ntest request so that you can interact with it.  Here is an example: \n from   flask   import   request \n\n with   app . test_request_context ( '/hello' ,   method = 'POST' ): \n     # now you can do something with the request until the \n     # end of the with block, such as basic assertions: \n     assert   request . path   ==   '/hello' \n     assert   request . method   ==   'POST' \n \n \n The other possibility is passing a whole WSGI environment to the\n request_context()  method: \n from   flask   import   request \n\n with   app . request_context ( environ ): \n     assert   request . method   ==   'POST' \n \n \n \n \n The Request Object \u00b6 \n The request object is documented in the API section and we will not cover\nit here in detail (see  request ). Here is a broad overview of\nsome of the most common operations.  First of all you have to import it from\nthe  flask  module: \n from   flask   import   request \n \n \n The current request method is available by using the\n method  attribute.  To access form data (data\ntransmitted in a  POST  or  PUT  request) you can use the\n form  attribute.  Here is a full example of the two\nattributes mentioned above: \n @app . route ( '/login' ,   methods = [ 'POST' ,   'GET' ]) \n def   login (): \n     error   =   None \n     if   request . method   ==   'POST' : \n         if   valid_login ( request . form [ 'username' ], \n                        request . form [ 'password' ]): \n             return   log_the_user_in ( request . form [ 'username' ]) \n         else : \n             error   =   'Invalid username/password' \n     # the code below is executed if the request method \n     # was GET or the credentials were invalid \n     return   render_template ( 'login.html' ,   error = error ) \n \n \n What happens if the key does not exist in the  form  attribute?  In that\ncase a special  KeyError  is raised.  You can catch it like a\nstandard  KeyError  but if you don\u2019t do that, a HTTP 400 Bad Request\nerror page is shown instead.  So for many situations you don\u2019t have to\ndeal with that problem. \n To access parameters submitted in the URL ( ?key=value ) you can use the\n args  attribute: \n searchword   =   request . args . get ( 'key' ,   '' ) \n \n \n We recommend accessing URL parameters with  get  or by catching the\n KeyError  because users might change the URL and presenting them a 400\nbad request page in that case is not user friendly. \n For a full list of methods and attributes of the request object, head over\nto the  request  documentation. \n \n \n File Uploads \u00b6 \n You can handle uploaded files with Flask easily.  Just make sure not to\nforget to set the  enctype=\"multipart/form-data\"  attribute on your HTML\nform, otherwise the browser will not transmit your files at all. \n Uploaded files are stored in memory or at a temporary location on the\nfilesystem.  You can access those files by looking at the\n files  attribute on the request object.  Each\nuploaded file is stored in that dictionary.  It behaves just like a\nstandard Python  file  object, but it also has a\n save()  method that allows you to store that\nfile on the filesystem of the server.  Here is a simple example showing how\nthat works: \n from   flask   import   request \n\n @app . route ( '/upload' ,   methods = [ 'GET' ,   'POST' ]) \n def   upload_file (): \n     if   request . method   ==   'POST' : \n         f   =   request . files [ 'the_file' ] \n         f . save ( '/var/www/uploads/uploaded_file.txt' ) \n     ... \n \n \n If you want to know how the file was named on the client before it was\nuploaded to your application, you can access the\n filename  attribute.  However please keep in\nmind that this value can be forged so never ever trust that value.  If you\nwant to use the filename of the client to store the file on the server,\npass it through the  secure_filename()  function that\nWerkzeug provides for you: \n from   flask   import   request \n from   werkzeug.utils   import   secure_filename \n\n @app . route ( '/upload' ,   methods = [ 'GET' ,   'POST' ]) \n def   upload_file (): \n     if   request . method   ==   'POST' : \n         f   =   request . files [ 'the_file' ] \n         f . save ( '/var/www/uploads/'   +   secure_filename ( f . filename )) \n     ... \n \n \n For some better examples, checkout the  Uploading Files  pattern. \n \n \n Cookies \u00b6 \n To access cookies you can use the  cookies \nattribute.  To set cookies you can use the\n set_cookie  method of response objects.  The\n cookies  attribute of request objects is a\ndictionary with all the cookies the client transmits.  If you want to use\nsessions, do not use the cookies directly but instead use the\n Sessions  in Flask that add some security on top of cookies for you. \n Reading cookies: \n from   flask   import   request \n\n @app . route ( '/' ) \n def   index (): \n     username   =   request . cookies . get ( 'username' ) \n     # use cookies.get(key) instead of cookies[key] to not get a \n     # KeyError if the cookie is missing. \n \n \n Storing cookies: \n from   flask   import   make_response \n\n @app . route ( '/' ) \n def   index (): \n     resp   =   make_response ( render_template ( ... )) \n     resp . set_cookie ( 'username' ,   'the username' ) \n     return   resp \n \n \n Note that cookies are set on response objects.  Since you normally\njust return strings from the view functions Flask will convert them into\nresponse objects for you.  If you explicitly want to do that you can use\nthe  make_response()  function and then modify it. \n Sometimes you might want to set a cookie at a point where the response\nobject does not exist yet.  This is possible by utilizing the\n Deferred Request Callbacks  pattern. \n For this also see  About Responses . \n \n \n \n Redirects and Errors \u00b6 \n To redirect a user to another endpoint, use the  redirect() \nfunction; to abort a request early with an error code, use the\n abort()  function: \n from   flask   import   abort ,   redirect ,   url_for \n\n @app . route ( '/' ) \n def   index (): \n     return   redirect ( url_for ( 'login' )) \n\n @app . route ( '/login' ) \n def   login (): \n     abort ( 401 ) \n     this_is_never_executed () \n \n \n This is a rather pointless example because a user will be redirected from\nthe index to a page they cannot access (401 means access denied) but it\nshows how that works. \n By default a black and white error page is shown for each error code.  If\nyou want to customize the error page, you can use the\n errorhandler()  decorator: \n from   flask   import   render_template \n\n @app . errorhandler ( 404 ) \n def   page_not_found ( error ): \n     return   render_template ( 'page_not_found.html' ),   404 \n \n \n Note the  404  after the  render_template()  call.  This\ntells Flask that the status code of that page should be 404 which means\nnot found.  By default 200 is assumed which translates to: all went well. \n See  Error handlers  for more details. \n \n \n About Responses \u00b6 \n The return value from a view function is automatically converted into a\nresponse object for you.  If the return value is a string it\u2019s converted\ninto a response object with the string as response body, a  200   OK \nstatus code and a  text/html  mimetype.  The logic that Flask applies to\nconverting return values into response objects is as follows: \n \n If a response object of the correct type is returned it\u2019s directly\nreturned from the view. \n If it\u2019s a string, a response object is created with that data and the\ndefault parameters. \n If a tuple is returned the items in the tuple can provide extra\ninformation.  Such tuples have to be in the form  (response,   status, \n headers)  or  (response,   headers)  where at least one item has\nto be in the tuple.  The  status  value will override the status code\nand  headers  can be a list or dictionary of additional header values. \n If none of that works, Flask will assume the return value is a\nvalid WSGI application and convert that into a response object. \n \n If you want to get hold of the resulting response object inside the view\nyou can use the  make_response()  function. \n Imagine you have a view like this: \n @app . errorhandler ( 404 ) \n def   not_found ( error ): \n     return   render_template ( 'error.html' ),   404 \n \n \n You just need to wrap the return expression with\n make_response()  and get the response object to modify it, then\nreturn it: \n @app . errorhandler ( 404 ) \n def   not_found ( error ): \n     resp   =   make_response ( render_template ( 'error.html' ),   404 ) \n     resp . headers [ 'X-Something' ]   =   'A value' \n     return   resp \n \n \n \n \n Sessions \u00b6 \n In addition to the request object there is also a second object called\n session  which allows you to store information specific to a\nuser from one request to the next.  This is implemented on top of cookies\nfor you and signs the cookies cryptographically.  What this means is that\nthe user could look at the contents of your cookie but not modify it,\nunless they know the secret key used for signing. \n In order to use sessions you have to set a secret key.  Here is how\nsessions work: \n from   flask   import   Flask ,   session ,   redirect ,   url_for ,   escape ,   request \n\n app   =   Flask ( __name__ ) \n\n @app . route ( '/' ) \n def   index (): \n     if   'username'   in   session : \n         return   'Logged in as  %s '   %   escape ( session [ 'username' ]) \n     return   'You are not logged in' \n\n @app . route ( '/login' ,   methods = [ 'GET' ,   'POST' ]) \n def   login (): \n     if   request . method   ==   'POST' : \n         session [ 'username' ]   =   request . form [ 'username' ] \n         return   redirect ( url_for ( 'index' )) \n     return   ''' \n         <form method=\"post\"> \n             <p><input type=text name=username> \n             <p><input type=submit value=Login> \n         </form> \n     ''' \n\n @app . route ( '/logout' ) \n def   logout (): \n     # remove the username from the session if it's there \n     session . pop ( 'username' ,   None ) \n     return   redirect ( url_for ( 'index' )) \n\n # set the secret key.  keep this really secret: \n app . secret_key   =   'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT' \n \n \n The  escape()  mentioned here does escaping for you if you are\nnot using the template engine (as in this example). \n \n How to generate good secret keys \n The problem with random is that it\u2019s hard to judge what is truly random.  And\na secret key should be as random as possible.  Your operating system\nhas ways to generate pretty random stuff based on a cryptographic\nrandom generator which can be used to get such a key: \n >>>  import   os \n >>>  os . urandom ( 24 ) \n '\\xfd{H\\xe5<\\x95\\xf9\\xe3\\x96.5\\xd1\\x01O<!\\xd5\\xa2\\xa0\\x9fR\"\\xa1\\xa8' \n\n Just take that thing and copy/paste it into your code and you're done. \n \n \n \n A note on cookie-based sessions: Flask will take the values you put into the\nsession object and serialize them into a cookie.  If you are finding some\nvalues do not persist across requests, cookies are indeed enabled, and you are\nnot getting a clear error message, check the size of the cookie in your page\nresponses compared to the size supported by web browsers. \n Besides the default client-side based sessions, if you want to handle\nsessions on the server-side instead, there are several\nFlask extensions that support this. \n \n \n Message Flashing \u00b6 \n Good applications and user interfaces are all about feedback.  If the user\ndoes not get enough feedback they will probably end up hating the\napplication.  Flask provides a really simple way to give feedback to a\nuser with the flashing system.  The flashing system basically makes it\npossible to record a message at the end of a request and access it on the next\n(and only the next) request.  This is usually combined with a layout\ntemplate to expose the message. \n To flash a message use the  flash()  method, to get hold of the\nmessages you can use  get_flashed_messages()  which is also\navailable in the templates.  Check out the  Message Flashing \nfor a full example. \n \n \n Logging \u00b6 \n \n New in version 0.3. \n \n Sometimes you might be in a situation where you deal with data that\nshould be correct, but actually is not.  For example you may have some client-side\ncode that sends an HTTP request to the server but it\u2019s obviously\nmalformed.  This might be caused by a user tampering with the data, or the\nclient code failing.  Most of the time it\u2019s okay to reply with  400   Bad \n Request  in that situation, but sometimes that won\u2019t do and the code has\nto continue working. \n You may still want to log that something fishy happened.  This is where\nloggers come in handy.  As of Flask 0.3 a logger is preconfigured for you\nto use. \n Here are some example log calls: \n app . logger . debug ( 'A value for debugging' ) \n app . logger . warning ( 'A warning occurred ( %d  apples)' ,   42 ) \n app . logger . error ( 'An error occurred' ) \n \n \n The attached  logger  is a standard logging\n Logger , so head over to the official  logging\ndocumentation  for more\ninformation. \n Read more on  Application Errors . \n \n \n Hooking in WSGI Middlewares \u00b6 \n If you want to add a WSGI middleware to your application you can wrap the\ninternal WSGI application.  For example if you want to use one of the\nmiddlewares from the Werkzeug package to work around bugs in lighttpd, you\ncan do it like this: \n from   werkzeug.contrib.fixers   import   LighttpdCGIRootFix \n app . wsgi_app   =   LighttpdCGIRootFix ( app . wsgi_app ) \n \n \n \n \n Using Flask Extensions \u00b6 \n Extensions are packages that help you accomplish common tasks. For\nexample, Flask-SQLAlchemy provides SQLAlchemy support that makes it simple\nand easy to use with Flask. \n For more on Flask extensions, have a look at  Flask Extensions . \n \n \n Deploying to a Web Server \u00b6 \n Ready to deploy your new Flask app? Go to  Deployment Options . \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Quickstart \n A Minimal Application \n What to do if the Server does not Start \n Old Version of Flask \n Invalid Import Name \n \n \n Debug Mode \n Routing \n Variable Rules \n URL Building \n HTTP Methods \n \n \n Static Files \n Rendering Templates \n Accessing Request Data \n Context Locals \n The Request Object \n File Uploads \n Cookies \n \n \n Redirects and Errors \n About Responses \n Sessions \n Message Flashing \n Logging \n Hooking in WSGI Middlewares \n Using Flask Extensions \n Deploying to a Web Server \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Installation \n       Next:  Tutorial \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/tutorial/folders/", "text": "\n   \n     \n     Step 0: Creating The Folders \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Step 0: Creating The Folders \u00b6 \n Before getting started, you will need to create the folders needed for this\napplication: \n / flaskr \n     / flaskr \n         / static \n         / templates \n \n \n The application will be installed and run as Python package.  This is the\nrecommended way to install and run Flask applications.  You will see exactly\nhow to run  flaskr  later on in this tutorial.  For now go ahead and create\nthe applications directory structure.  In the next few steps you will be\ncreating the database schema as well as the main module. \n As a quick side note, the files inside of the  static  folder are\navailable to users of the application via HTTP.  This is the place where CSS and\nJavaScript files go.  Inside the  templates  folder, Flask will look for\n Jinja2  templates.  You will see examples of this later on. \n For now you should continue with  Step 1: Database Schema . \n \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Tutorial \n       Previous:  Introducing Flaskr \n       Next:  Step 1: Database Schema \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/tutorial/introduction/", "text": "\n   \n     \n     Introducing Flaskr \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Introducing Flaskr \u00b6 \n This tutorial will demonstrate a blogging application named Flaskr, but feel\nfree to choose your own less Web-2.0-ish name ;)  Essentially, it will do the\nfollowing things: \n \n Let the user sign in and out with credentials specified in the\nconfiguration.  Only one user is supported. \n When the user is logged in, they can add new entries to the page\nconsisting of a text-only title and some HTML for the text.  This HTML\nis not sanitized because we trust the user here. \n The index page shows all entries so far in reverse chronological order\n(newest on top) and the user can add new ones from there if logged in. \n \n SQLite3 will be used directly for this application because it\u2019s good enough\nfor an application of this size.  For larger applications, however,\nit makes a lot of sense to use  SQLAlchemy , as it handles database\nconnections in a more intelligent way, allowing you to target different\nrelational databases at once and more.  You might also want to consider\none of the popular NoSQL databases if your data is more suited for those. \n Here a screenshot of the final application: \n \n Continue with  Step 0: Creating The Folders . \n \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Tutorial \n       Previous:  Tutorial \n       Next:  Step 0: Creating The Folders \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/testing/", "text": "\n   \n     \n     Testing Flask Applications \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Testing Flask Applications \u00b6 \n \n Something that is untested is broken. \n The origin of this quote is unknown and while it is not entirely correct, it is also\nnot far from the truth.  Untested applications make it hard to\nimprove existing code and developers of untested applications tend to\nbecome pretty paranoid.  If an application has automated tests, you can\nsafely make changes and instantly know if anything breaks. \n Flask provides a way to test your application by exposing the Werkzeug\ntest  Client  and handling the context locals for you.\nYou can then use that with your favourite testing solution.  In this documentation\nwe will use the  unittest  package that comes pre-installed with Python. \n \n The Application \u00b6 \n First, we need an application to test; we will use the application from\nthe  Tutorial .  If you don\u2019t have that application yet, get the\nsources from  the examples . \n \n \n The Testing Skeleton \u00b6 \n In order to test the application, we add a second module\n( flaskr_tests.py ) and create a unittest skeleton there: \n import   os \n import   flaskr \n import   unittest \n import   tempfile \n\n class   FlaskrTestCase ( unittest . TestCase ): \n\n     def   setUp ( self ): \n         self . db_fd ,   flaskr . app . config [ 'DATABASE' ]   =   tempfile . mkstemp () \n         flaskr . app . testing   =   True \n         self . app   =   flaskr . app . test_client () \n         with   flaskr . app . app_context (): \n             flaskr . init_db () \n\n     def   tearDown ( self ): \n         os . close ( self . db_fd ) \n         os . unlink ( flaskr . app . config [ 'DATABASE' ]) \n\n if   __name__   ==   '__main__' : \n     unittest . main () \n \n \n The code in the  setUp()  method creates a new test\nclient and initializes a new database.  This function is called before\neach individual test function is run.  To delete the database after the\ntest, we close the file and remove it from the filesystem in the\n tearDown()  method.  Additionally during setup the\n TESTING  config flag is activated.  What it does is disable the error\ncatching during request handling so that you get better error reports when\nperforming test requests against the application. \n This test client will give us a simple interface to the application.  We can\ntrigger test requests to the application, and the client will also keep track\nof cookies for us. \n Because SQLite3 is filesystem-based we can easily use the tempfile module\nto create a temporary database and initialize it.  The\n mkstemp()  function does two things for us: it returns a\nlow-level file handle and a random file name, the latter we use as\ndatabase name.  We just have to keep the  db_fd  around so that we can use\nthe  os.close()  function to close the file. \n If we now run the test suite, we should see the following output: \n $ python flaskr_tests.py\n\n----------------------------------------------------------------------\nRan 0 tests in 0.000s\n\nOK\n \n \n Even though it did not run any actual tests, we already know that our flaskr\napplication is syntactically valid, otherwise the import would have died\nwith an exception. \n \n \n The First Test \u00b6 \n Now it\u2019s time to start testing the functionality of the application.\nLet\u2019s check that the application shows \u201cNo entries here so far\u201d if we\naccess the root of the application ( / ). To do this, we add a new\ntest method to our class, like this: \n class   FlaskrTestCase ( unittest . TestCase ): \n\n     def   setUp ( self ): \n         self . db_fd ,   flaskr . app . config [ 'DATABASE' ]   =   tempfile . mkstemp () \n         flaskr . app . testing   =   True \n         self . app   =   flaskr . app . test_client () \n         with   flaskr . app . app_context (): \n             flaskr . init_db () \n\n     def   tearDown ( self ): \n         os . close ( self . db_fd ) \n         os . unlink ( flaskr . app . config [ 'DATABASE' ]) \n\n     def   test_empty_db ( self ): \n         rv   =   self . app . get ( '/' ) \n         assert   b 'No entries here so far'   in   rv . data \n \n \n Notice that our test functions begin with the word  test ; this allows\n unittest  to automatically identify the method as a test to run. \n By using  self.app.get  we can send an HTTP  GET  request to the application with\nthe given path.  The return value will be a  response_class  object.\nWe can now use the  data  attribute to inspect\nthe return value (as string) from the application.  In this case, we ensure that\n 'No   entries   here   so   far'  is part of the output. \n Run it again and you should see one passing test: \n $ python flaskr_tests.py\n.\n----------------------------------------------------------------------\nRan 1 test in 0.034s\n\nOK\n \n \n \n \n Logging In and Out \u00b6 \n The majority of the functionality of our application is only available for\nthe administrative user, so we need a way to log our test client in and out\nof the application.  To do this, we fire some requests to the login and logout\npages with the required form data (username and password).  And because the\nlogin and logout pages redirect, we tell the client to  follow_redirects . \n Add the following two methods to your  FlaskrTestCase  class: \n def   login ( self ,   username ,   password ): \n     return   self . app . post ( '/login' ,   data = dict ( \n         username = username , \n         password = password \n     ),   follow_redirects = True ) \n\n def   logout ( self ): \n     return   self . app . get ( '/logout' ,   follow_redirects = True ) \n \n \n Now we can easily test that logging in and out works and that it fails with\ninvalid credentials.  Add this new test to the class: \n def   test_login_logout ( self ): \n     rv   =   self . login ( 'admin' ,   'default' ) \n     assert   b 'You were logged in'   in   rv . data \n     rv   =   self . logout () \n     assert   b 'You were logged out'   in   rv . data \n     rv   =   self . login ( 'adminx' ,   'default' ) \n     assert   b 'Invalid username'   in   rv . data \n     rv   =   self . login ( 'admin' ,   'defaultx' ) \n     assert   b 'Invalid password'   in   rv . data \n \n \n \n \n Test Adding Messages \u00b6 \n We should also test that adding messages works.  Add a new test method\nlike this: \n def   test_messages ( self ): \n     self . login ( 'admin' ,   'default' ) \n     rv   =   self . app . post ( '/add' ,   data = dict ( \n         title = '<Hello>' , \n         text = '<strong>HTML</strong> allowed here' \n     ),   follow_redirects = True ) \n     assert   b 'No entries here so far'   not   in   rv . data \n     assert   b '&lt;Hello&gt;'   in   rv . data \n     assert   b '<strong>HTML</strong> allowed here'   in   rv . data \n \n \n Here we check that HTML is allowed in the text but not in the title,\nwhich is the intended behavior. \n Running that should now give us three passing tests: \n $ python flaskr_tests.py\n...\n----------------------------------------------------------------------\nRan 3 tests in 0.332s\n\nOK\n \n \n For more complex tests with headers and status codes, check out the\n MiniTwit Example  from the sources which contains a larger test\nsuite. \n \n \n Other Testing Tricks \u00b6 \n Besides using the test client as shown above, there is also the\n test_request_context()  method that can be used\nin combination with the  with  statement to activate a request context\ntemporarily.  With this you can access the  request ,\n g  and  session  objects like in view\nfunctions.  Here is a full example that demonstrates this approach: \n import   flask \n\n app   =   flask . Flask ( __name__ ) \n\n with   app . test_request_context ( '/?name=Peter' ): \n     assert   flask . request . path   ==   '/' \n     assert   flask . request . args [ 'name' ]   ==   'Peter' \n \n \n All the other objects that are context bound can be used in the same\nway. \n If you want to test your application with different configurations and\nthere does not seem to be a good way to do that, consider switching to\napplication factories (see  Application Factories ). \n Note however that if you are using a test request context, the\n before_request()  and  after_request() \nfunctions are not called automatically.  However\n teardown_request()  functions are indeed executed when\nthe test request context leaves the  with  block.  If you do want the\n before_request()  functions to be called as well, you\nneed to call  preprocess_request()  yourself: \n app   =   flask . Flask ( __name__ ) \n\n with   app . test_request_context ( '/?name=Peter' ): \n     app . preprocess_request () \n     ... \n \n \n This can be necessary to open database connections or something similar\ndepending on how your application was designed. \n If you want to call the  after_request()  functions you\nneed to call into  process_response()  which however\nrequires that you pass it a response object: \n app   =   flask . Flask ( __name__ ) \n\n with   app . test_request_context ( '/?name=Peter' ): \n     resp   =   Response ( '...' ) \n     resp   =   app . process_response ( resp ) \n     ... \n \n \n This in general is less useful because at that point you can directly\nstart using the test client. \n \n \n Faking Resources and Context \u00b6 \n \n New in version 0.10. \n \n A very common pattern is to store user authorization information and\ndatabase connections on the application context or the  flask.g \nobject.  The general pattern for this is to put the object on there on\nfirst usage and then to remove it on a teardown.  Imagine for instance\nthis code to get the current user: \n def   get_user (): \n     user   =   getattr ( g ,   'user' ,   None ) \n     if   user   is   None : \n         user   =   fetch_current_user_from_database () \n         g . user   =   user \n     return   user \n \n \n For a test it would be nice to override this user from the outside without\nhaving to change some code.  This can be accomplished with\nhooking the  flask.appcontext_pushed  signal: \n from   contextlib   import   contextmanager \n from   flask   import   appcontext_pushed ,   g \n\n @contextmanager \n def   user_set ( app ,   user ): \n     def   handler ( sender ,   ** kwargs ): \n         g . user   =   user \n     with   appcontext_pushed . connected_to ( handler ,   app ): \n         yield \n \n \n And then to use it: \n from   flask   import   json ,   jsonify \n\n @app . route ( '/users/me' ) \n def   users_me (): \n     return   jsonify ( username = g . user . username ) \n\n with   user_set ( app ,   my_user ): \n     with   app . test_client ()   as   c : \n         resp   =   c . get ( '/users/me' ) \n         data   =   json . loads ( resp . data ) \n         self . assert_equal ( data [ 'username' ],   my_user . username ) \n \n \n \n \n Keeping the Context Around \u00b6 \n \n New in version 0.4. \n \n Sometimes it is helpful to trigger a regular request but still keep the\ncontext around for a little longer so that additional introspection can\nhappen.  With Flask 0.4 this is possible by using the\n test_client()  with a  with  block: \n app   =   flask . Flask ( __name__ ) \n\n with   app . test_client ()   as   c : \n     rv   =   c . get ( '/?tequila=42' ) \n     assert   request . args [ 'tequila' ]   ==   '42' \n \n \n If you were to use just the  test_client()  without\nthe  with  block, the  assert  would fail with an error because  request \nis no longer available (because you are trying to use it outside of the actual request). \n \n \n Accessing and Modifying Sessions \u00b6 \n \n New in version 0.8. \n \n Sometimes it can be very helpful to access or modify the sessions from the\ntest client.  Generally there are two ways for this.  If you just want to\nensure that a session has certain keys set to certain values you can just\nkeep the context around and access  flask.session : \n with   app . test_client ()   as   c : \n     rv   =   c . get ( '/' ) \n     assert   flask . session [ 'foo' ]   ==   42 \n \n \n This however does not make it possible to also modify the session or to\naccess the session before a request was fired.  Starting with Flask 0.8 we\nprovide a so called \u201csession transaction\u201d which simulates the appropriate\ncalls to open a session in the context of the test client and to modify\nit.  At the end of the transaction the session is stored.  This works\nindependently of the session backend used: \n with   app . test_client ()   as   c : \n     with   c . session_transaction ()   as   sess : \n         sess [ 'a_key' ]   =   'a value' \n\n     # once this is reached the session was stored \n \n \n Note that in this case you have to use the  sess  object instead of the\n flask.session  proxy.  The object however itself will provide the\nsame interface. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Testing Flask Applications \n The Application \n The Testing Skeleton \n The First Test \n Logging In and Out \n Test Adding Messages \n Other Testing Tricks \n Faking Resources and Context \n Keeping the Context Around \n Accessing and Modifying Sessions \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Templates \n       Next:  Application Errors \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/py-modindex/", "text": "\n   \n     \n     Python Module Index \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n\n   \n  \n    \n  \n   \n   \n\n\n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n\n    Python Module Index \n\n    \n    f \n    \n\n    \n      \u00a0 \n      \n        f \n      \n        \n        \n        flask \n        \n      \n        \n        \u00a0\u00a0\u00a0\n        flask.json \n        \n    \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/templating/", "text": "\n   \n     \n     Templates \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Templates \u00b6 \n Flask leverages Jinja2 as template engine.  You are obviously free to use\na different template engine, but you still have to install Jinja2 to run\nFlask itself.  This requirement is necessary to enable rich extensions.\nAn extension can depend on Jinja2 being present. \n This section only gives a very quick introduction into how Jinja2\nis integrated into Flask.  If you want information on the template\nengine\u2019s syntax itself, head over to the official  Jinja2 Template\nDocumentation  for\nmore information. \n \n Jinja Setup \u00b6 \n Unless customized, Jinja2 is configured by Flask as follows: \n \n autoescaping is enabled for all templates ending in  .html ,\n .htm ,  .xml  as well as  .xhtml  when using\n render_template() . \n autoescaping is enabled for all strings when using\n render_template_string() . \n a template has the ability to opt in/out autoescaping with the\n {%   autoescape   %}  tag. \n Flask inserts a couple of global functions and helpers into the\nJinja2 context, additionally to the values that are present by\ndefault. \n \n \n \n Standard Context \u00b6 \n The following global variables are available within Jinja2 templates\nby default: \n \n \n config \n The current configuration object ( flask.config ) \n \n New in version 0.6. \n \n \n Changed in version 0.10:  This is now always available, even in imported templates. \n \n \n\n \n \n request \n The current request object ( flask.request ).  This variable is\nunavailable if the template was rendered without an active request\ncontext. \n \n\n \n \n session \n The current session object ( flask.session ).  This variable\nis unavailable if the template was rendered without an active request\ncontext. \n \n\n \n \n g \n The request-bound object for global variables ( flask.g ).  This\nvariable is unavailable if the template was rendered without an active\nrequest context. \n \n\n \n \n url_for ( ) \n The  flask.url_for()  function. \n \n\n \n \n get_flashed_messages ( ) \n The  flask.get_flashed_messages()  function. \n \n\n \n The Jinja Context Behavior \n These variables are added to the context of variables, they are not\nglobal variables.  The difference is that by default these will not\nshow up in the context of imported templates.  This is partially caused\nby performance considerations, partially to keep things explicit. \n What does this mean for you?  If you have a macro you want to import,\nthat needs to access the request object you have two possibilities: \n \n you explicitly pass the request to the macro as parameter, or\nthe attribute of the request object you are interested in. \n you import the macro \u201cwith context\u201d. \n \n Importing with context looks like this: \n {%   from   '_helpers.html'   import   my_macro   with context   %} \n \n \n \n \n \n Standard Filters \u00b6 \n These filters are available in Jinja2 additionally to the filters provided\nby Jinja2 itself: \n \n \n tojson ( ) \n This function converts the given object into JSON representation.  This\nis for example very helpful if you try to generate JavaScript on the\nfly. \n Note that inside  script  tags no escaping must take place, so make\nsure to disable escaping with  |safe  before Flask 0.10 if you intend\nto use it inside  script  tags: \n < script   type = text/javascript > \n     doSomethingWith ( {{   user.username | tojson | safe   }} ); \n </ script > \n \n \n \n\n \n \n Controlling Autoescaping \u00b6 \n Autoescaping is the concept of automatically escaping special characters\nfor you.  Special characters in the sense of HTML (or XML, and thus XHTML)\nare  & ,  > ,  < ,  \"  as well as  ' .  Because these characters\ncarry specific meanings in documents on their own you have to replace them\nby so called \u201centities\u201d if you want to use them for text.  Not doing so\nwould not only cause user frustration by the inability to use these\ncharacters in text, but can also lead to security problems.  (see\n Cross-Site Scripting (XSS) ) \n Sometimes however you will need to disable autoescaping in templates.\nThis can be the case if you want to explicitly inject HTML into pages, for\nexample if they come from a system that generates secure HTML like a\nmarkdown to HTML converter. \n There are three ways to accomplish that: \n \n In the Python code, wrap the HTML string in a  Markup \nobject before passing it to the template.  This is in general the\nrecommended way. \n Inside the template, use the  |safe  filter to explicitly mark a\nstring as safe HTML ( {{   myvariable|safe   }} ) \n Temporarily disable the autoescape system altogether. \n \n To disable the autoescape system in templates, you can use the  {% \n autoescape   %}  block: \n {%   autoescape   false   %} \n     < p > autoescaping is disabled here\n     < p > {{   will_not_be_escaped   }} \n {%   endautoescape   %} \n \n \n Whenever you do this, please be very cautious about the variables you are\nusing in this block. \n \n \n Registering Filters \u00b6 \n If you want to register your own filters in Jinja2 you have two ways to do\nthat.  You can either put them by hand into the\n jinja_env  of the application or use the\n template_filter()  decorator. \n The two following examples work the same and both reverse an object: \n @app . template_filter ( 'reverse' ) \n def   reverse_filter ( s ): \n     return   s [:: - 1 ] \n\n def   reverse_filter ( s ): \n     return   s [:: - 1 ] \n app . jinja_env . filters [ 'reverse' ]   =   reverse_filter \n \n \n In case of the decorator the argument is optional if you want to use the\nfunction name as name of the filter.  Once registered, you can use the filter\nin your templates in the same way as Jinja2\u2019s builtin filters, for example if\nyou have a Python list in context called  mylist : \n { %   for   x   in   mylist   |   reverse   % } \n { %   endfor   % } \n \n \n \n \n Context Processors \u00b6 \n To inject new variables automatically into the context of a template,\ncontext processors exist in Flask.  Context processors run before the\ntemplate is rendered and have the ability to inject new values into the\ntemplate context.  A context processor is a function that returns a\ndictionary.  The keys and values of this dictionary are then merged with\nthe template context, for all templates in the app: \n @app . context_processor \n def   inject_user (): \n     return   dict ( user = g . user ) \n \n \n The context processor above makes a variable called  user  available in\nthe template with the value of  g.user .  This example is not very\ninteresting because  g  is available in templates anyways, but it gives an\nidea how this works. \n Variables are not limited to values; a context processor can also make\nfunctions available to templates (since Python allows passing around\nfunctions): \n @app . context_processor \n def   utility_processor (): \n     def   format_price ( amount ,   currency = u '\u20ac' ): \n         return   u ' {0:.2f}{1} ' . format ( amount ,   currency ) \n     return   dict ( format_price = format_price ) \n \n \n The context processor above makes the  format_price  function available to all\ntemplates: \n {{   format_price ( 0.33 )   }} \n \n \n You could also build  format_price  as a template filter (see\n Registering Filters ), but this demonstrates how to pass functions in a\ncontext processor. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Templates \n Jinja Setup \n Standard Context \n Standard Filters \n Controlling Autoescaping \n Registering Filters \n Context Processors \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Bonus: Testing the Application \n       Next:  Testing Flask Applications \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/tutorial/testing/", "text": "\n   \n     \n     Bonus: Testing the Application \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Bonus: Testing the Application \u00b6 \n Now that you have finished the application and everything works as\nexpected, it\u2019s probably not a bad idea to add automated tests to simplify\nmodifications in the future.  The application above is used as a basic\nexample of how to perform unit testing in the  Testing Flask Applications  section of the\ndocumentation.  Go there to see how easy it is to test Flask applications. \n \n Adding tests to flaskr \u00b6 \n Assuming you have seen the  Testing Flask Applications  section and have either written\nyour own tests for  flaskr  or have followed along with the examples\nprovided, you might be wondering about ways to organize the project. \n One possible and recommended project structure is: \n flaskr / \n     flaskr / \n         __init__ . py \n         static / \n         templates / \n     tests / \n         test_flaskr . py \n     setup . py \n     MANIFEST . in \n \n \n For now go ahead a create the  tests/  directory as well as the\n test_flaskr.py  file. \n \n \n Running the tests \u00b6 \n At this point you can run the tests. Here  pytest  will be used. \n \n Note \n Make sure that  pytest  is installed in the same virtualenv\nas flaskr. Otherwise  pytest  test will not be able to import the\nrequired components to test the application: \n pip   install   - e   . \n pip   install   pytest \n \n \n \n Run and watch the tests pass, within the top-level  flaskr/ \ndirectory as: \n py . test \n \n \n \n \n Testing + setuptools \u00b6 \n One way to handle testing is to integrate it with  setuptools . Here\nthat requires adding a couple of lines to the  setup.py  file and\ncreating a new file  setup.cfg . One benefit of running the tests\nthis way is that you do not have to install  pytest . Go ahead and\nupdate the  setup.py  file to contain: \n from   setuptools   import   setup \n\n setup ( \n     name = 'flaskr' , \n     packages = [ 'flaskr' ], \n     include_package_data = True , \n     install_requires = [ \n         'flask' , \n     ], \n     setup_requires = [ \n         'pytest-runner' , \n     ], \n     tests_require = [ \n         'pytest' , \n     ], \n ) \n \n \n Now create  setup.cfg  in the project root (alongside\n setup.py ): \n [ aliases ] \n test = pytest \n \n \n Now you can run: \n python   setup . py   test \n \n \n This calls on the alias created in  setup.cfg  which in turn runs\n pytest  via  pytest-runner , as the  setup.py  script has\nbeen called. (Recall the  setup_requires  argument in  setup.py )\nFollowing the standard rules of test-discovery your tests will be\nfound, run, and hopefully pass. \n This is one possible way to run and manage testing.  Here  pytest  is\nused, but there are other options such as  nose .  Integrating testing\nwith  setuptools  is convenient because it is not necessary to actually\ndownload  pytest  or any other testing framework one might use. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Bonus: Testing the Application \n Adding tests to flaskr \n Running the tests \n Testing + setuptools \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Tutorial \n       Previous:  Step 8: Adding Style \n       Next:  Templates \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/tutorial/css/", "text": "\n   \n     \n     Step 8: Adding Style \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Step 8: Adding Style \u00b6 \n Now that everything else works, it\u2019s time to add some style to the\napplication.  Just create a stylesheet called  style.css  in the\n static  folder: \n body              {   font-family :   sans-serif ;   background :   #eee ;   } \n a ,   h1 ,   h2         {   color :   #377ba8 ;   } \n h1 ,   h2            {   font-family :   'Georgia' ,   serif ;   margin :   0 ;   } \n h1                {   border-bottom :   2 px   solid   #eee ;   } \n h2                {   font-size :   1.2 em ;   } \n\n . page             {   margin :   2 em   auto ;   width :   35 em ;   border :   5 px   solid   #ccc ; \n                   padding :   0.8 em ;   background :   white ;   } \n . entries          {   list-style :   none ;   margin :   0 ;   padding :   0 ;   } \n . entries   li       {   margin :   0.8 em   1.2 em ;   } \n . entries   li   h2    {   margin-left :   -1 em ;   } \n . add-entry        {   font-size :   0.9 em ;   border-bottom :   1 px   solid   #ccc ;   } \n . add-entry   dl     {   font-weight :   bold ;   } \n . metanav          {   text-align :   right ;   font-size :   0.8 em ;   padding :   0.3 em ; \n                   margin-bottom :   1 em ;   background :   #fafafa ;   } \n . flash            {   background :   #cee5F5 ;   padding :   0.5 em ; \n                   border :   1 px   solid   #aacbe2 ;   } \n . error            {   background :   #f0d6d6 ;   padding :   0.5 em ;   } \n \n \n Continue with  Bonus: Testing the Application . \n \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Tutorial \n       Previous:  Step 7: The Templates \n       Next:  Bonus: Testing the Application \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/license/", "text": "\n   \n     \n     License \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n License \u00b6 \n Flask is licensed under a three clause BSD License.  It basically means:\ndo whatever you want with it as long as the copyright in Flask sticks\naround, the conditions are not modified and the disclaimer is present.\nFurthermore you must not use the names of the authors to promote derivatives\nof the software without written consent. \n The full license text can be found below ( Flask License ).  For the\ndocumentation and artwork different licenses apply. \n \n Authors \u00b6 \n Flask is written and maintained by Armin Ronacher and\nvarious contributors: \n \n Development Lead \u00b6 \n \n Armin Ronacher < armin . ronacher @ active-4 . com > \n \n \n \n Patches and Suggestions \u00b6 \n \n Adam Zapletal \n Ali Afshar \n Chris Edgemon \n Chris Grindstaff \n Christopher Grebs \n Daniel Neuh\u00e4user \n Dan Sully \n David Lord @davidism \n Edmond Burnett \n Florent Xicluna \n Georg Brandl \n Jeff Widman @jeffwidman \n Justin Quick \n Kenneth Reitz \n Keyan Pishdadian \n Marian Sigler \n Martijn Pieters \n Matt Campell \n Matthew Frazier \n Michael van Tellingen \n Ron DuPlain \n Sebastien Estienne \n Simon Sapin \n Stephane Wirtel \n Thomas Schranz \n Zhao Xiaohong \n \n \n \n \n General License Definitions \u00b6 \n The following section contains the full license texts for Flask and the\ndocumentation. \n \n \u201cAUTHORS\u201d hereby refers to all the authors listed in the\n Authors  section. \n The \u201c Flask License \u201d applies to all the source code shipped as\npart of Flask (Flask itself as well as the examples and the unittests)\nas well as documentation. \n The \u201c Flask Artwork License \u201d applies to the project\u2019s Horn-Logo. \n \n \n \n Flask License \u00b6 \n Copyright (c) 2015 by Armin Ronacher and contributors.  See AUTHORS\nfor more details. \n Some rights reserved. \n Redistribution and use in source and binary forms of the software as well\nas documentation, with or without modification, are permitted provided\nthat the following conditions are met: \n \n Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer. \n Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided\nwith the distribution. \n The names of the contributors may not be used to endorse or\npromote products derived from this software without specific\nprior written permission. \n \n THIS SOFTWARE AND DOCUMENTATION IS PROVIDED BY THE COPYRIGHT HOLDERS AND\nCONTRIBUTORS \u201cAS IS\u201d AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\nNOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER\nOR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE AND DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE. \n \n \n Flask Artwork License \u00b6 \n Copyright (c) 2010 by Armin Ronacher. \n Some rights reserved. \n This logo or a modified version may be used by anyone to refer to the\nFlask project, but does not indicate endorsement by the project. \n Redistribution and use in source (the SVG file) and binary forms (rendered\nPNG files etc.) of the image, with or without modification, are permitted\nprovided that the following conditions are met: \n \n Redistributions of source code must retain the above copyright\nnotice and this list of conditions. \n The names of the contributors to the Flask software (see AUTHORS) may\nnot be used to endorse or promote products derived from this software\nwithout specific prior written permission. \n \n Note: we would appreciate that you make the image a link to\n http://flask.pocoo.org/  if you use it on a web page. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n License \n Authors \n Development Lead \n Patches and Suggestions \n \n \n General License Definitions \n Flask License \n Flask Artwork License \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Flask Changelog \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/upgrading/", "text": "\n   \n     \n     Upgrading to Newer Releases \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Upgrading to Newer Releases \u00b6 \n Flask itself is changing like any software is changing over time.  Most of\nthe changes are the nice kind, the kind where you don\u2019t have to change\nanything in your code to profit from a new release. \n However every once in a while there are changes that do require some\nchanges in your code or there are changes that make it possible for you to\nimprove your own code quality by taking advantage of new features in\nFlask. \n This section of the documentation enumerates all the changes in Flask from\nrelease to release and how you can change your code to have a painless\nupdating experience. \n Use the  pip  command to upgrade your existing Flask installation by\nproviding the  --upgrade  parameter: \n $ pip install --upgrade Flask\n \n \n \n Version 0.12 \u00b6 \n \n Changes to send_file \u00b6 \n The  filename  is no longer automatically inferred from file-like objects.\nThis means that the following code will no longer automatically have\n X-Sendfile  support, etag generation or MIME-type guessing: \n response   =   send_file ( open ( '/path/to/file.txt' )) \n \n \n Any of the following is functionally equivalent: \n fname   =   '/path/to/file.txt' \n\n # Just pass the filepath directly \n response   =   send_file ( fname ) \n\n # Set the MIME-type and ETag explicitly \n response   =   send_file ( open ( fname ),   mimetype = 'text/plain' ) \n response . set_etag ( ... ) \n\n # Set `attachment_filename` for MIME-type guessing \n # ETag still needs to be manually set \n response   =   send_file ( open ( fname ),   attachment_filename = fname ) \n response . set_etag ( ... ) \n \n \n The reason for this is that some file-like objects have a invalid or even\nmisleading  name  attribute. Silently swallowing errors in such cases was not\na satisfying solution. \n Additionally the default of falling back to  application/octet-stream  has\nbeen restricted. If Flask can\u2019t guess one or the user didn\u2019t provide one, the\nfunction fails if no filename information was provided. \n \n \n \n Version 0.11 \u00b6 \n 0.11 is an odd release in the Flask release cycle because it was supposed\nto be the 1.0 release.  However because there was such a long lead time up\nto the release we decided to push out a 0.11 release first with some\nchanges removed to make the transition easier.  If you have been tracking\nthe master branch which was 1.0 you might see some unexpected changes. \n In case you did track the master branch you will notice that  flask --app \nis removed now.  You need to use the environment variable to specify an\napplication. \n \n Debugging \u00b6 \n Flask 0.11 removed the  debug_log_format  attribute from Flask\napplications.  Instead the new  LOGGER_HANDLER_POLICY  configuration can\nbe used to disable the default log handlers and custom log handlers can be\nset up. \n \n \n Error handling \u00b6 \n The behavior of error handlers was changed.\nThe precedence of handlers used to be based on the decoration/call order of\n errorhandler()  and\n register_error_handler() , respectively.\nNow the inheritance hierarchy takes precedence and handlers for more\nspecific exception classes are executed instead of more general ones.\nSee  Error handlers  for specifics. \n Trying to register a handler on an instance now raises  ValueError . \n \n Note \n There used to be a logic error allowing you to register handlers\nonly for exception  instances . This was unintended and plain wrong,\nand therefore was replaced with the intended behavior of registering\nhandlers only using exception classes and HTTP error codes. \n \n \n \n Templating \u00b6 \n The  render_template_string()  function has changed to\nautoescape template variables by default. This better matches the behavior\nof  render_template() . \n \n \n Extension imports \u00b6 \n Extension imports of the form  flask.ext.foo  are deprecated, you should use\n flask_foo . \n The old form still works, but Flask will issue a\n flask.exthook.ExtDeprecationWarning  for each extension you import the old\nway. We also provide a migration utility called  flask-ext-migrate  that is supposed to\nautomatically rewrite your imports for this. \n \n \n \n Version 0.10 \u00b6 \n The biggest change going from 0.9 to 0.10 is that the cookie serialization\nformat changed from pickle to a specialized JSON format.  This change has\nbeen done in order to avoid the damage an attacker can do if the secret\nkey is leaked.  When you upgrade you will notice two major changes: all\nsessions that were issued before the upgrade are invalidated and you can\nonly store a limited amount of types in the session.  The new sessions are\nby design much more restricted to only allow JSON with a few small\nextensions for tuples and strings with HTML markup. \n In order to not break people\u2019s sessions it is possible to continue using\nthe old session system by using the  Flask-OldSessions  extension. \n Flask also started storing the  flask.g  object on the application\ncontext instead of the request context.  This change should be transparent\nfor you but it means that you now can store things on the  g  object\nwhen there is no request context yet but an application context.  The old\n flask.Flask.request_globals_class  attribute was renamed to\n flask.Flask.app_ctx_globals_class . \n \n \n Version 0.9 \u00b6 \n The behavior of returning tuples from a function was simplified.  If you\nreturn a tuple it no longer defines the arguments for the response object\nyou\u2019re creating, it\u2019s now always a tuple in the form  (response,   status, \n headers)  where at least one item has to be provided.  If you depend on\nthe old behavior, you can add it easily by subclassing Flask: \n class   TraditionalFlask ( Flask ): \n     def   make_response ( self ,   rv ): \n         if   isinstance ( rv ,   tuple ): \n             return   self . response_class ( * rv ) \n         return   Flask . make_response ( self ,   rv ) \n \n \n If you maintain an extension that was using  _request_ctx_stack \nbefore, please consider changing to  _app_ctx_stack  if it makes\nsense for your extension.  For instance, the app context stack makes sense for\nextensions which connect to databases.  Using the app context stack instead of\nthe request context stack will make extensions more readily handle use cases\noutside of requests. \n \n \n Version 0.8 \u00b6 \n Flask introduced a new session interface system.  We also noticed that\nthere was a naming collision between  flask.session  the module that\nimplements sessions and  flask.session  which is the global session\nobject.  With that introduction we moved the implementation details for\nthe session system into a new module called  flask.sessions .  If you\nused the previously undocumented session support we urge you to upgrade. \n If invalid JSON data was submitted Flask will now raise a\n BadRequest  exception instead of letting the\ndefault  ValueError  bubble up.  This has the advantage that you no\nlonger have to handle that error to avoid an internal server error showing\nup for the user.  If you were catching this down explicitly in the past\nas  ValueError  you will need to change this. \n Due to a bug in the test client Flask 0.7 did not trigger teardown\nhandlers when the test client was used in a with statement.  This was\nsince fixed but might require some changes in your test suites if you\nrelied on this behavior. \n \n \n Version 0.7 \u00b6 \n In Flask 0.7 we cleaned up the code base internally a lot and did some\nbackwards incompatible changes that make it easier to implement larger\napplications with Flask.  Because we want to make upgrading as easy as\npossible we tried to counter the problems arising from these changes by\nproviding a script that can ease the transition. \n The script scans your whole application and generates an unified diff with\nchanges it assumes are safe to apply.  However as this is an automated\ntool it won\u2019t be able to find all use cases and it might miss some.  We\ninternally spread a lot of deprecation warnings all over the place to make\nit easy to find pieces of code that it was unable to upgrade. \n We strongly recommend that you hand review the generated patchfile and\nonly apply the chunks that look good. \n If you are using git as version control system for your project we\nrecommend applying the patch with  path   -p1   <   patchfile.diff  and then\nusing the interactive commit feature to only apply the chunks that look\ngood. \n To apply the upgrade script do the following: \n \n Download the script:  flask-07-upgrade.py \n \n Run it in the directory of your application: \n python   flask - 07 - upgrade . py   >   patchfile . diff \n \n \n \n Review the generated patchfile. \n \n Apply the patch: \n patch   - p1   <   patchfile . diff \n \n \n \n If you were using per-module template folders you need to move some\ntemplates around.  Previously if you had a folder named  templates \nnext to a blueprint named  admin  the implicit template path\nautomatically was  admin/index.html  for a template file called\n templates/index.html .  This no longer is the case.  Now you need\nto name the template  templates/admin/index.html .  The tool will\nnot detect this so you will have to do that on your own. \n \n \n Please note that deprecation warnings are disabled by default starting\nwith Python 2.7.  In order to see the deprecation warnings that might be\nemitted you have to enabled them with the  warnings  module. \n If you are working with windows and you lack the  patch  command line\nutility you can get it as part of various Unix runtime environments for\nwindows including cygwin, msysgit or ming32.  Also source control systems\nlike svn, hg or git have builtin support for applying unified diffs as\ngenerated by the tool.  Check the manual of your version control system\nfor more information. \n \n Bug in Request Locals \u00b6 \n Due to a bug in earlier implementations the request local proxies now\nraise a  RuntimeError  instead of an  AttributeError  when they\nare unbound.  If you caught these exceptions with  AttributeError \nbefore, you should catch them with  RuntimeError  now. \n Additionally the  send_file()  function is now issuing\ndeprecation warnings if you depend on functionality that will be removed\nin Flask 0.11.  Previously it was possible to use etags and mimetypes\nwhen file objects were passed.  This was unreliable and caused issues\nfor a few setups.  If you get a deprecation warning, make sure to\nupdate your application to work with either filenames there or disable\netag attaching and attach them yourself. \n Old code: \n return   send_file ( my_file_object ) \n return   send_file ( my_file_object ) \n \n \n New code: \n return   send_file ( my_file_object ,   add_etags = False ) \n \n \n \n \n Upgrading to new Teardown Handling \u00b6 \n We streamlined the behavior of the callbacks for request handling.  For\nthings that modify the response the  after_request() \ndecorators continue to work as expected, but for things that absolutely\nmust happen at the end of request we introduced the new\n teardown_request()  decorator.  Unfortunately that\nchange also made after-request work differently under error conditions.\nIt\u2019s not consistently skipped if exceptions happen whereas previously it\nmight have been called twice to ensure it is executed at the end of the\nrequest. \n If you have database connection code that looks like this: \n @app . after_request \n def   after_request ( response ): \n     g . db . close () \n     return   response \n \n \n You are now encouraged to use this instead: \n @app . teardown_request \n def   after_request ( exception ): \n     if   hasattr ( g ,   'db' ): \n         g . db . close () \n \n \n On the upside this change greatly improves the internal code flow and\nmakes it easier to customize the dispatching and error handling.  This\nmakes it now a lot easier to write unit tests as you can prevent closing\ndown of database connections for a while.  You can take advantage of the\nfact that the teardown callbacks are called when the response context is\nremoved from the stack so a test can query the database after request\nhandling: \n with   app . test_client ()   as   client : \n     resp   =   client . get ( '/' ) \n     # g.db is still bound if there is such a thing \n\n # and here it's gone \n \n \n \n \n Manual Error Handler Attaching \u00b6 \n While it is still possible to attach error handlers to\n Flask.error_handlers  it\u2019s discouraged to do so and in fact\ndeprecated.  In general we no longer recommend custom error handler\nattaching via assignments to the underlying dictionary due to the more\ncomplex internal handling to support arbitrary exception classes and\nblueprints.  See  Flask.errorhandler()  for more information. \n The proper upgrade is to change this: \n app . error_handlers [ 403 ]   =   handle_error \n \n \n Into this: \n app . register_error_handler ( 403 ,   handle_error ) \n \n \n Alternatively you should just attach the function with a decorator: \n @app . errorhandler ( 403 ) \n def   handle_error ( e ): \n     ... \n \n \n (Note that  register_error_handler()  is new in Flask 0.7) \n \n \n Blueprint Support \u00b6 \n Blueprints replace the previous concept of \u201cModules\u201d in Flask.  They\nprovide better semantics for various features and work better with large\napplications.  The update script provided should be able to upgrade your\napplications automatically, but there might be some cases where it fails\nto upgrade.  What changed? \n \n Blueprints need explicit names.  Modules had an automatic name\nguessing scheme where the shortname for the module was taken from the\nlast part of the import module.  The upgrade script tries to guess\nthat name but it might fail as this information could change at\nruntime. \n Blueprints have an inverse behavior for  url_for() .  Previously\n .foo  told  url_for()  that it should look for the endpoint\n foo  on the application.  Now it means \u201crelative to current module\u201d.\nThe script will inverse all calls to  url_for()  automatically for\nyou.  It will do this in a very eager way so you might end up with\nsome unnecessary leading dots in your code if you\u2019re not using\nmodules. \n Blueprints do not automatically provide static folders.  They will\nalso no longer automatically export templates from a folder called\n templates  next to their location however but it can be enabled from\nthe constructor.  Same with static files: if you want to continue\nserving static files you need to tell the constructor explicitly the\npath to the static folder (which can be relative to the blueprint\u2019s\nmodule path). \n Rendering templates was simplified.  Now the blueprints can provide\ntemplate folders which are added to a general template searchpath.\nThis means that you need to add another subfolder with the blueprint\u2019s\nname into that folder if you want  blueprintname/template.html  as\nthe template name. \n \n If you continue to use the  Module  object which is deprecated, Flask will\nrestore the previous behavior as good as possible.  However we strongly\nrecommend upgrading to the new blueprints as they provide a lot of useful\nimprovement such as the ability to attach a blueprint multiple times,\nblueprint specific error handlers and a lot more. \n \n \n \n Version 0.6 \u00b6 \n Flask 0.6 comes with a backwards incompatible change which affects the\norder of after-request handlers.  Previously they were called in the order\nof the registration, now they are called in reverse order.  This change\nwas made so that Flask behaves more like people expected it to work and\nhow other systems handle request pre- and post-processing.  If you\ndepend on the order of execution of post-request functions, be sure to\nchange the order. \n Another change that breaks backwards compatibility is that context\nprocessors will no longer override values passed directly to the template\nrendering function.  If for example  request  is as variable passed\ndirectly to the template, the default context processor will not override\nit with the current request object.  This makes it easier to extend\ncontext processors later to inject additional variables without breaking\nexisting template not expecting them. \n \n \n Version 0.5 \u00b6 \n Flask 0.5 is the first release that comes as a Python package instead of a\nsingle module.  There were a couple of internal refactoring so if you\ndepend on undocumented internal details you probably have to adapt the\nimports. \n The following changes may be relevant to your application: \n \n autoescaping no longer happens for all templates.  Instead it is\nconfigured to only happen on files ending with  .html ,  .htm ,\n .xml  and  .xhtml .  If you have templates with different\nextensions you should override the\n select_jinja_autoescape()  method. \n Flask no longer supports zipped applications in this release.  This\nfunctionality might come back in future releases if there is demand\nfor this feature.  Removing support for this makes the Flask internal\ncode easier to understand and fixes a couple of small issues that make\ndebugging harder than necessary. \n The  create_jinja_loader  function is gone.  If you want to customize\nthe Jinja loader now, use the\n create_jinja_environment()  method instead. \n \n \n \n Version 0.4 \u00b6 \n For application developers there are no changes that require changes in\nyour code.  In case you are developing on a Flask extension however, and\nthat extension has a unittest-mode you might want to link the activation\nof that mode to the new  TESTING  flag. \n \n \n Version 0.3 \u00b6 \n Flask 0.3 introduces configuration support and logging as well as\ncategories for flashing messages.  All these are features that are 100%\nbackwards compatible but you might want to take advantage of them. \n \n Configuration Support \u00b6 \n The configuration support makes it easier to write any kind of application\nthat requires some sort of configuration.  (Which most likely is the case\nfor any application out there). \n If you previously had code like this: \n app . debug   =   DEBUG \n app . secret_key   =   SECRET_KEY \n \n \n You no longer have to do that, instead you can just load a configuration\ninto the config object.  How this works is outlined in  Configuration Handling . \n \n \n Logging Integration \u00b6 \n Flask now configures a logger for you with some basic and useful defaults.\nIf you run your application in production and want to profit from\nautomatic error logging, you might be interested in attaching a proper log\nhandler.  Also you can start logging warnings and errors into the logger\nwhen appropriately.  For more information on that, read\n Application Errors . \n \n \n Categories for Flash Messages \u00b6 \n Flash messages can now have categories attached.  This makes it possible\nto render errors, warnings or regular messages differently for example.\nThis is an opt-in feature because it requires some rethinking in the code. \n Read all about that in the  Message Flashing  pattern. \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Upgrading to Newer Releases \n Version 0.12 \n Changes to send_file \n \n \n Version 0.11 \n Debugging \n Error handling \n Templating \n Extension imports \n \n \n Version 0.10 \n Version 0.9 \n Version 0.8 \n Version 0.7 \n Bug in Request Locals \n Upgrading to new Teardown Handling \n Manual Error Handler Attaching \n Blueprint Support \n \n \n Version 0.6 \n Version 0.5 \n Version 0.4 \n Version 0.3 \n Configuration Support \n Logging Integration \n Categories for Flash Messages \n \n \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Python 3 Support \n       Next:  Flask Changelog \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/python3/", "text": "\n   \n     \n     Python 3 Support \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Python 3 Support \u00b6 \n Flask, its dependencies, and most Flask extensions support Python 3.\nYou should start using Python 3 for your next project,\nbut there are a few things to be aware of. \n You need to use Python 3.3 or higher.  3.2 and older are  not  supported. \n You should use the latest versions of all Flask-related packages.\nFlask 0.10 and Werkzeug 0.9 were the first versions to introduce Python 3 support. \n Python 3 changed how unicode and bytes are handled, which complicates how low\nlevel code handles HTTP data.  This mainly affects WSGI middleware interacting\nwith the WSGI  environ  data.  Werkzeug wraps that information in high-level\nhelpers, so encoding issues should not affect you. \n The majority of the upgrade work is in the lower-level libraries like\nFlask and Werkzeug, not the high-level application code.\nFor example, all of the examples in the Flask repository work on both Python 2 and 3\nand did not require a single line of code changed. \n \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Pocoo Styleguide \n       Next:  Upgrading to Newer Releases \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/styleguide/", "text": "\n   \n     \n     Pocoo Styleguide \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Pocoo Styleguide \u00b6 \n The Pocoo styleguide is the styleguide for all Pocoo Projects, including\nFlask.  This styleguide is a requirement for Patches to Flask and a\nrecommendation for Flask extensions. \n In general the Pocoo Styleguide closely follows  PEP 8  with some small\ndifferences and extensions. \n \n General Layout \u00b6 \n \n Indentation: \n 4 real spaces.  No tabs, no exceptions. \n Maximum line length: \n 79 characters with a soft limit for 84 if absolutely necessary.  Try\nto avoid too nested code by cleverly placing  break ,  continue  and\n return  statements. \n Continuing long statements: \n To continue a statement you can use backslashes in which case you should\nalign the next line with the last dot or equal sign, or indent four\nspaces: \n this_is_a_very_long ( function_call ,   'with many parameters' )  \\\n     . that_returns_an_object_with_an_attribute \n\n MyModel . query . filter ( MyModel . scalar   >   120 )  \\\n              . order_by ( MyModel . name . desc ())  \\\n              . limit ( 10 ) \n \n \n If you break in a statement with parentheses or braces, align to the\nbraces: \n this_is_a_very_long ( function_call ,   'with many parameters' , \n                     23 ,   42 ,   'and even more' ) \n \n \n For lists or tuples with many items, break immediately after the\nopening brace: \n items   =   [ \n     'this is the first' ,   'set of items' ,   'with more items' , \n     'to come in this line' ,   'like this' \n ] \n \n \n \n Blank lines: \n Top level functions and classes are separated by two lines, everything\nelse by one.  Do not use too many blank lines to separate logical\nsegments in code.  Example: \n def   hello ( name ): \n     print   'Hello  %s !'   %   name \n\n\n def   goodbye ( name ): \n     print   'See you  %s .'   %   name \n\n\n class   MyClass ( object ): \n     \"\"\"This is a simple docstring\"\"\" \n\n     def   __init__ ( self ,   name ): \n         self . name   =   name \n\n     def   get_annoying_name ( self ): \n         return   self . name . upper ()   +   '!!!!111' \n \n \n \n \n \n \n Expressions and Statements \u00b6 \n \n General whitespace rules: \n \n No whitespace for unary operators that are not words\n(e.g.:  - ,  ~  etc.) as well on the inner side of parentheses. \n Whitespace is placed between binary operators. \n \n Good: \n exp   =   - 1.05 \n value   =   ( item_value   /   item_count )   *   offset   /   exp \n value   =   my_list [ index ] \n value   =   my_dict [ 'key' ] \n \n \n Bad: \n exp   =   -   1.05 \n value   =   (   item_value   /   item_count   )   *   offset   /   exp \n value   =   ( item_value / item_count ) * offset / exp \n value = (   item_value / item_count   )   *   offset / exp \n value   =   my_list [   index   ] \n value   =   my_dict   [ 'key' ] \n \n \n \n Yoda statements are a no-go: \n Never compare constant with variable, always variable with constant: \n Good: \n if   method   ==   'md5' : \n     pass \n \n \n Bad: \n if   'md5'   ==   method : \n     pass \n \n \n \n Comparisons: \n \n against arbitrary types:  ==  and  != \n against singletons with  is  and  is   not  (eg:  foo   is   not \n None ) \n never compare something with  True  or  False  (for example never\ndo  foo   ==   False , do  not   foo  instead) \n \n \n Negated containment checks: \n use  foo   not   in   bar  instead of  not   foo   in   bar \n Instance checks: \n isinstance(a,   C)  instead of  type(A)   is   C , but try to avoid\ninstance checks in general.  Check for features. \n \n \n \n Naming Conventions \u00b6 \n \n Class names:  CamelCase , with acronyms kept uppercase ( HTTPWriter \nand not  HttpWriter ) \n Variable names:  lowercase_with_underscores \n Method and function names:  lowercase_with_underscores \n Constants:  UPPERCASE_WITH_UNDERSCORES \n precompiled regular expressions:  name_re \n \n Protected members are prefixed with a single underscore.  Double\nunderscores are reserved for mixin classes. \n On classes with keywords, trailing underscores are appended.  Clashes with\nbuiltins are allowed and  must not  be resolved by appending an\nunderline to the variable name.  If the function needs to access a\nshadowed builtin, rebind the builtin to a different name instead. \n \n Function and method arguments: \n \n class methods:  cls  as first parameter \n instance methods:  self  as first parameter \n lambdas for properties might have the first parameter replaced\nwith  x  like in  display_name   =   property(lambda   x:   x.real_name \n or   x.username) \n \n \n \n \n \n Docstrings \u00b6 \n \n Docstring conventions: \n All docstrings are formatted with reStructuredText as understood by\nSphinx.  Depending on the number of lines in the docstring, they are\nlaid out differently.  If it\u2019s just one line, the closing triple\nquote is on the same line as the opening, otherwise the text is on\nthe same line as the opening quote and the triple quote that closes\nthe string on its own line: \n def   foo (): \n     \"\"\"This is a simple docstring\"\"\" \n\n\n def   bar (): \n     \"\"\"This is a longer docstring with so much information in there \n     that it spans three lines.  In this case the closing triple quote \n     is on its own line. \n     \"\"\" \n \n \n \n Module header: \n The module header consists of an utf-8 encoding declaration (if non\nASCII letters are used, but it is recommended all the time) and a\nstandard docstring: \n # -*- coding: utf-8 -*- \n \"\"\" \n     package.module \n     ~~~~~~~~~~~~~~ \n\n     A brief description goes here. \n\n     :copyright: (c) YEAR by AUTHOR. \n     :license: LICENSE_NAME, see LICENSE_FILE for more details. \n \"\"\" \n \n \n Please keep in mind that proper copyrights and license files are a\nrequirement for approved Flask extensions. \n \n \n \n \n Comments \u00b6 \n Rules for comments are similar to docstrings.  Both are formatted with\nreStructuredText.  If a comment is used to document an attribute, put a\ncolon after the opening pound sign ( # ): \n class   User ( object ): \n     #: the name of the user as unicode string \n     name   =   Column ( String ) \n     #: the sha1 hash of the password + inline salt \n     pw_hash   =   Column ( String ) \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Pocoo Styleguide \n General Layout \n Expressions and Statements \n Naming Conventions \n Docstrings \n Comments \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Flask Extension Development \n       Next:  Python 3 Support \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/extensiondev/", "text": "\n   \n     \n     Flask Extension Development \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Flask Extension Development \u00b6 \n Flask, being a microframework, often requires some repetitive steps to get\na third party library working.  Because very often these steps could be\nabstracted to support multiple projects the  Flask Extension Registry \nwas created. \n If you want to create your own Flask extension for something that does not\nexist yet, this guide to extension development will help you get your\nextension running in no time and to feel like users would expect your\nextension to behave. \n \n Anatomy of an Extension \u00b6 \n Extensions are all located in a package called  flask_something \nwhere \u201csomething\u201d is the name of the library you want to bridge.  So for\nexample if you plan to add support for a library named  simplexml  to\nFlask, you would name your extension\u2019s package  flask_simplexml . \n The name of the actual extension (the human readable name) however would\nbe something like \u201cFlask-SimpleXML\u201d.  Make sure to include the name\n\u201cFlask\u201d somewhere in that name and that you check the capitalization.\nThis is how users can then register dependencies to your extension in\ntheir  setup.py  files. \n Flask sets up a redirect package called  flask.ext  where users\nshould import the extensions from.  If you for instance have a package\ncalled  flask_something  users would import it as\n flask.ext.something .  This is done to transition from the old\nnamespace packages.  See  Extension Import Transition  for more details. \n But what do extensions look like themselves?  An extension has to ensure\nthat it works with multiple Flask application instances at once.  This is\na requirement because many people will use patterns like the\n Application Factories  pattern to create their application as needed to aid\nunittests and to support multiple configurations.  Because of that it is\ncrucial that your application supports that kind of behavior. \n Most importantly the extension must be shipped with a  setup.py  file and\nregistered on PyPI.  Also the development checkout link should work so\nthat people can easily install the development version into their\nvirtualenv without having to download the library by hand. \n Flask extensions must be licensed under a BSD, MIT or more liberal license\nto be able to be enlisted in the Flask Extension Registry.  Keep in mind\nthat the Flask Extension Registry is a moderated place and libraries will\nbe reviewed upfront if they behave as required. \n \n \n \u201cHello Flaskext!\u201d \u00b6 \n So let\u2019s get started with creating such a Flask extension.  The extension\nwe want to create here will provide very basic support for SQLite3. \n First we create the following folder structure: \n flask - sqlite3 / \n     flask_sqlite3 . py \n     LICENSE \n     README \n \n \n Here\u2019s the contents of the most important files: \n \n setup.py \u00b6 \n The next file that is absolutely required is the  setup.py  file which is\nused to install your Flask extension.  The following contents are\nsomething you can work with: \n \"\"\" \n Flask-SQLite3 \n ------------- \n\n This is the description for that library \n \"\"\" \n from   setuptools   import   setup \n\n\n setup ( \n     name = 'Flask-SQLite3' , \n     version = '1.0' , \n     url = 'http://example.com/flask-sqlite3/' , \n     license = 'BSD' , \n     author = 'Your Name' , \n     author_email = 'your-email@example.com' , \n     description = 'Very short description' , \n     long_description = __doc__ , \n     py_modules = [ 'flask_sqlite3' ], \n     # if you would be using a package instead use packages instead \n     # of py_modules: \n     # packages=['flask_sqlite3'], \n     zip_safe = False , \n     include_package_data = True , \n     platforms = 'any' , \n     install_requires = [ \n         'Flask' \n     ], \n     classifiers = [ \n         'Environment :: Web Environment' , \n         'Intended Audience :: Developers' , \n         'License :: OSI Approved :: BSD License' , \n         'Operating System :: OS Independent' , \n         'Programming Language :: Python' , \n         'Topic :: Internet :: WWW/HTTP :: Dynamic Content' , \n         'Topic :: Software Development :: Libraries :: Python Modules' \n     ] \n ) \n \n \n That\u2019s a lot of code but you can really just copy/paste that from existing\nextensions and adapt. \n \n \n flask_sqlite3.py \u00b6 \n Now this is where your extension code goes.  But how exactly should such\nan extension look like?  What are the best practices?  Continue reading\nfor some insight. \n \n \n \n Initializing Extensions \u00b6 \n Many extensions will need some kind of initialization step.  For example,\nconsider an application that\u2019s currently connecting to SQLite like the\ndocumentation suggests ( Using SQLite 3 with Flask ).  So how does the extension\nknow the name of the application object? \n Quite simple: you pass it to it. \n There are two recommended ways for an extension to initialize: \n initialization functions: \n \n If your extension is called  helloworld  you might have a function\ncalled  init_helloworld(app[,   extra_args])  that initializes the\nextension for that application.  It could attach before / after\nhandlers etc. \n classes: \n \n Classes work mostly like initialization functions but can later be\nused to further change the behavior.  For an example look at how the\n OAuth extension  works: there is an  OAuth  object that provides\nsome helper functions like  OAuth.remote_app  to create a reference to\na remote application that uses OAuth. \n What to use depends on what you have in mind.  For the SQLite 3 extension\nwe will use the class-based approach because it will provide users with an\nobject that handles opening and closing database connections. \n What\u2019s important about classes is that they encourage to be shared around\non module level.  In that case, the object itself must not under any\ncircumstances store any application specific state and must be shareable\nbetween different application. \n \n \n The Extension Code \u00b6 \n Here\u2019s the contents of the  flask_sqlite3.py  for copy/paste: \n import   sqlite3 \n from   flask   import   current_app \n\n # Find the stack on which we want to store the database connection. \n # Starting with Flask 0.9, the _app_ctx_stack is the correct one, \n # before that we need to use the _request_ctx_stack. \n try : \n     from   flask   import   _app_ctx_stack   as   stack \n except   ImportError : \n     from   flask   import   _request_ctx_stack   as   stack \n\n\n class   SQLite3 ( object ): \n\n     def   __init__ ( self ,   app = None ): \n         self . app   =   app \n         if   app   is   not   None : \n             self . init_app ( app ) \n\n     def   init_app ( self ,   app ): \n         app . config . setdefault ( 'SQLITE3_DATABASE' ,   ':memory:' ) \n         # Use the newstyle teardown_appcontext if it's available, \n         # otherwise fall back to the request context \n         if   hasattr ( app ,   'teardown_appcontext' ): \n             app . teardown_appcontext ( self . teardown ) \n         else : \n             app . teardown_request ( self . teardown ) \n\n     def   connect ( self ): \n         return   sqlite3 . connect ( current_app . config [ 'SQLITE3_DATABASE' ]) \n\n     def   teardown ( self ,   exception ): \n         ctx   =   stack . top \n         if   hasattr ( ctx ,   'sqlite3_db' ): \n             ctx . sqlite3_db . close () \n\n     @property \n     def   connection ( self ): \n         ctx   =   stack . top \n         if   ctx   is   not   None : \n             if   not   hasattr ( ctx ,   'sqlite3_db' ): \n                 ctx . sqlite3_db   =   self . connect () \n             return   ctx . sqlite3_db \n \n \n So here\u2019s what these lines of code do: \n \n The  __init__  method takes an optional app object and, if supplied, will\ncall  init_app . \n \n The  init_app  method exists so that the  SQLite3  object can be\ninstantiated without requiring an app object.  This method supports the\nfactory pattern for creating applications.  The  init_app  will set the\nconfiguration for the database, defaulting to an in memory database if\nno configuration is supplied.  In addition, the  init_app  method attaches\nthe  teardown  handler.  It will try to use the newstyle app context\nhandler and if it does not exist, falls back to the request context\none. \n \n Next, we define a  connect  method that opens a database connection. \n \n Finally, we add a  connection  property that on first access opens\nthe database connection and stores it on the context.  This is also\nthe recommended way to handling resources: fetch resources lazily the\nfirst time they are used. \n Note here that we\u2019re attaching our database connection to the top\napplication context via  _app_ctx_stack.top . Extensions should use\nthe top context for storing their own information with a sufficiently\ncomplex name.  Note that we\u2019re falling back to the\n _request_ctx_stack.top  if the application is using an older\nversion of Flask that does not support it. \n \n \n So why did we decide on a class-based approach here?  Because using our\nextension looks something like this: \n from   flask   import   Flask \n from   flask_sqlite3   import   SQLite3 \n\n app   =   Flask ( __name__ ) \n app . config . from_pyfile ( 'the-config.cfg' ) \n db   =   SQLite3 ( app ) \n \n \n You can then use the database from views like this: \n @app . route ( '/' ) \n def   show_all (): \n     cur   =   db . connection . cursor () \n     cur . execute ( ... ) \n \n \n Likewise if you are outside of a request but you are using Flask 0.9 or\nlater with the app context support, you can use the database in the same\nway: \n with   app . app_context (): \n     cur   =   db . connection . cursor () \n     cur . execute ( ... ) \n \n \n At the end of the  with  block the teardown handles will be executed\nautomatically. \n Additionally, the  init_app  method is used to support the factory pattern\nfor creating apps: \n db   =   Sqlite3 () \n # Then later on. \n app   =   create_app ( 'the-config.cfg' ) \n db . init_app ( app ) \n \n \n Keep in mind that supporting this factory pattern for creating apps is required\nfor approved flask extensions (described below). \n \n Note on  init_app \n As you noticed,  init_app  does not assign  app  to  self .  This\nis intentional!  Class based Flask extensions must only store the\napplication on the object when the application was passed to the\nconstructor.  This tells the extension: I am not interested in using\nmultiple applications. \n When the extension needs to find the current application and it does\nnot have a reference to it, it must either use the\n current_app  context local or change the API in a way\nthat you can pass the application explicitly. \n \n \n \n Using _app_ctx_stack \u00b6 \n In the example above, before every request, a  sqlite3_db  variable is\nassigned to  _app_ctx_stack.top .  In a view function, this variable is\naccessible using the  connection  property of  SQLite3 .  During the\nteardown of a request, the  sqlite3_db  connection is closed.  By using\nthis pattern, the  same  connection to the sqlite3 database is accessible\nto anything that needs it for the duration of the request. \n If the  _app_ctx_stack  does not exist because the user uses\nan old version of Flask, it is recommended to fall back to\n _request_ctx_stack  which is bound to a request. \n \n \n Teardown Behavior \u00b6 \n This is only relevant if you want to support Flask 0.6 and older \n Due to the change in Flask 0.7 regarding functions that are run at the end\nof the request your extension will have to be extra careful there if it\nwants to continue to support older versions of Flask.  The following\npattern is a good way to support both: \n def   close_connection ( response ): \n     ctx   =   _request_ctx_stack . top \n     ctx . sqlite3_db . close () \n     return   response \n\n if   hasattr ( app ,   'teardown_request' ): \n     app . teardown_request ( close_connection ) \n else : \n     app . after_request ( close_connection ) \n \n \n Strictly speaking the above code is wrong, because teardown functions are\npassed the exception and typically don\u2019t return anything.  However because\nthe return value is discarded this will just work assuming that the code\nin between does not touch the passed parameter. \n \n \n Learn from Others \u00b6 \n This documentation only touches the bare minimum for extension\ndevelopment.  If you want to learn more, it\u2019s a very good idea to check\nout existing extensions on the  Flask Extension Registry .  If you feel\nlost there is still the  mailinglist  and the  IRC channel  to get some\nideas for nice looking APIs.  Especially if you do something nobody before\nyou did, it might be a very good idea to get some more input.  This not\nonly to get an idea about what people might want to have from an\nextension, but also to avoid having multiple developers working on pretty\nmuch the same side by side. \n Remember: good API design is hard, so introduce your project on the\nmailinglist, and let other developers give you a helping hand with\ndesigning the API. \n The best Flask extensions are extensions that share common idioms for the\nAPI.  And this can only work if collaboration happens early. \n \n \n Approved Extensions \u00b6 \n Flask also has the concept of approved extensions.  Approved extensions\nare tested as part of Flask itself to ensure extensions do not break on\nnew releases.  These approved extensions are listed on the  Flask\nExtension Registry  and marked appropriately.  If you want your own\nextension to be approved you have to follow these guidelines: \n \n An approved Flask extension requires a maintainer. In the event an\nextension author would like to move beyond the project, the project should\nfind a new maintainer including full source hosting transition and PyPI\naccess.  If no maintainer is available, give access to the Flask core team. \n An approved Flask extension must provide exactly one package or module\nnamed  flask_extensionname . \n It must ship a testing suite that can either be invoked with  make   test \nor  python   setup.py   test .  For test suites invoked with  make \n test  the extension has to ensure that all dependencies for the test\nare installed automatically.  If tests are invoked with  python   setup.py \n test , test dependencies can be specified in the  setup.py  file.  The\ntest suite also has to be part of the distribution. \n APIs of approved extensions will be checked for the following\ncharacteristics: \n an approved extension has to support multiple applications\nrunning in the same Python process. \n it must be possible to use the factory pattern for creating\napplications. \n \n \n The license must be BSD/MIT/WTFPL licensed. \n The naming scheme for official extensions is  Flask-ExtensionName  or\n ExtensionName-Flask . \n Approved extensions must define all their dependencies in the\n setup.py  file unless a dependency cannot be met because it is not\navailable on PyPI. \n The extension must have documentation that uses one of the two Flask\nthemes for Sphinx documentation. \n The setup.py description (and thus the PyPI description) has to\nlink to the documentation, website (if there is one) and there\nmust be a link to automatically install the development version\n( PackageName==dev ). \n The  zip_safe  flag in the setup script must be set to  False ,\neven if the extension would be safe for zipping. \n An extension currently has to support Python 2.6 as well as\nPython 2.7 \n \n \n \n Extension Import Transition \u00b6 \n In early versions of Flask we recommended using namespace packages for Flask\nextensions, of the form  flaskext.foo . This turned out to be problematic in\npractice because it meant that multiple  flaskext  packages coexist.\nConsequently we have recommended to name extensions  flask_foo  over\n flaskext.foo  for a long time. \n Flask 0.8 introduced a redirect import system as a compatibility aid for app\ndevelopers: Importing  flask.ext.foo  would try  flask_foo  and\n flaskext.foo  in that order. \n As of Flask 0.11, most Flask extensions have transitioned to the new naming\nschema. The  flask.ext.foo  compatibility alias is still in Flask 0.11 but is\nnow deprecated \u2013 you should use  flask_foo . \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Flask Extension Development \n Anatomy of an Extension \n \u201cHello Flaskext!\u201d \n setup.py \n flask_sqlite3.py \n \n \n Initializing Extensions \n The Extension Code \n Using _app_ctx_stack \n Teardown Behavior \n Learn from Others \n Approved Extensions \n Extension Import Transition \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Unicode in Flask \n       Next:  Pocoo Styleguide \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/api/", "text": "\n   \n     \n     API \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n API \u00b6 \n This part of the documentation covers all the interfaces of Flask.  For\nparts where Flask depends on external libraries, we document the most\nimportant right here and provide links to the canonical documentation. \n \n Application Object \u00b6 \n \n \n class  flask. Flask ( import_name ,  static_path=None ,  static_url_path=None ,  static_folder='static' ,  template_folder='templates' ,  instance_path=None ,  instance_relative_config=False ,  root_path=None ) \u00b6 \n The flask object implements a WSGI application and acts as the central\nobject.  It is passed the name of the module or package of the\napplication.  Once it is created it will act as a central registry for\nthe view functions, the URL rules, template configuration and much more. \n The name of the package is used to resolve resources from inside the\npackage or the folder the module is contained in depending on if the\npackage parameter resolves to an actual python package (a folder with\nan  __init__.py  file inside) or a standard module (just a  .py  file). \n For more information about resource loading, see  open_resource() . \n Usually you create a  Flask  instance in your main module or\nin the  __init__.py  file of your package like this: \n from   flask   import   Flask \n app   =   Flask ( __name__ ) \n \n \n \n About the First Parameter \n The idea of the first parameter is to give Flask an idea of what\nbelongs to your application.  This name is used to find resources\non the filesystem, can be used by extensions to improve debugging\ninformation and a lot more. \n So it\u2019s important what you provide there.  If you are using a single\nmodule,  __name__  is always the correct value.  If you however are\nusing a package, it\u2019s usually recommended to hardcode the name of\nyour package there. \n For example if your application is defined in  yourapplication/app.py \nyou should create it with one of the two versions below: \n app   =   Flask ( 'yourapplication' ) \n app   =   Flask ( __name__ . split ( '.' )[ 0 ]) \n \n \n Why is that?  The application will work even with  __name__ , thanks\nto how resources are looked up.  However it will make debugging more\npainful.  Certain extensions can make assumptions based on the\nimport name of your application.  For example the Flask-SQLAlchemy\nextension will look for the code in your application that triggered\nan SQL query in debug mode.  If the import name is not properly set\nup, that debugging information is lost.  (For example it would only\npick up SQL queries in  yourapplication.app  and not\n yourapplication.views.frontend ) \n \n \n New in version 0.7:  The  static_url_path ,  static_folder , and  template_folder \nparameters were added. \n \n \n New in version 0.8:  The  instance_path  and  instance_relative_config  parameters were\nadded. \n \n \n New in version 0.11:  The  root_path  parameter was added. \n \n \n \n \n \n Parameters: \n import_name  \u2013 the name of the application package \n static_url_path  \u2013 can be used to specify a different path for the\nstatic files on the web.  Defaults to the name\nof the  static_folder  folder. \n static_folder  \u2013 the folder with static files that should be served\nat  static_url_path .  Defaults to the  'static' \nfolder in the root path of the application. \n template_folder  \u2013 the folder that contains the templates that should\nbe used by the application.  Defaults to\n 'templates'  folder in the root path of the\napplication. \n instance_path  \u2013 An alternative instance path for the application.\nBy default the folder  'instance'  next to the\npackage or module is assumed to be the instance\npath. \n instance_relative_config  \u2013 if set to  True  relative filenames\nfor loading the config are assumed to\nbe relative to the instance path instead\nof the application root. \n root_path  \u2013 Flask by default will automatically calculate the path\nto the root of the application.  In certain situations\nthis cannot be achieved (for instance if the package\nis a Python 3 namespace package) and needs to be\nmanually defined. \n \n \n \n \n \n \n \n add_template_filter ( f ,  name=None ) \u00b6 \n Register a custom template filter.  Works exactly like the\n template_filter()  decorator. \n \n \n \n \n Parameters: name  \u2013 the optional name of the filter, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n add_template_global ( f ,  name=None ) \u00b6 \n Register a custom template global function. Works exactly like the\n template_global()  decorator. \n \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the global function, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n add_template_test ( f ,  name=None ) \u00b6 \n Register a custom template test.  Works exactly like the\n template_test()  decorator. \n \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the test, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n add_url_rule ( rule ,  endpoint=None ,  view_func=None ,  **options ) \u00b6 \n Connects a URL rule.  Works exactly like the  route() \ndecorator.  If a view_func is provided it will be registered with the\nendpoint. \n Basically this example: \n @app . route ( '/' ) \n def   index (): \n     pass \n \n \n Is equivalent to the following: \n def   index (): \n     pass \n app . add_url_rule ( '/' ,   'index' ,   index ) \n \n \n If the view_func is not provided you will need to connect the endpoint\nto a view function like so: \n app . view_functions [ 'index' ]   =   index \n \n \n Internally  route()  invokes  add_url_rule()  so if you want\nto customize the behavior via subclassing you only need to change\nthis method. \n For more information refer to  URL Route Registrations . \n \n Changed in version 0.2:  view_func  parameter added. \n \n \n Changed in version 0.6:  OPTIONS  is added automatically as method. \n \n \n \n \n \n Parameters: \n rule  \u2013 the URL rule as string \n endpoint  \u2013 the endpoint for the registered URL rule.  Flask\nitself assumes the name of the view function as\nendpoint \n view_func  \u2013 the function to call when serving a request to the\nprovided endpoint \n options  \u2013 the options to be forwarded to the underlying\n Rule  object.  A change\nto Werkzeug is handling of method options.  methods\nis a list of methods this rule should be limited\nto ( GET ,  POST  etc.).  By default a rule\njust listens for  GET  (and implicitly  HEAD ).\nStarting with Flask 0.6,  OPTIONS  is implicitly\nadded and handled by the standard request handling. \n \n \n \n \n \n \n\n \n \n after_request ( f ) \u00b6 \n Register a function to be run after each request. \n Your function must take one parameter, an instance of\n response_class  and return a new response object or the\nsame (see  process_response() ). \n As of Flask 0.7 this function might not be executed at the end of the\nrequest in case an unhandled exception occurred. \n \n\n \n \n after_request_funcs  = None \u00b6 \n A dictionary with lists of functions that should be called after\neach request.  The key of the dictionary is the name of the blueprint\nthis function is active for,  None  for all requests.  This can for\nexample be used to close database connections. To register a function\nhere, use the  after_request()  decorator. \n \n\n \n \n app_context ( ) \u00b6 \n Binds the application only.  For as long as the application is bound\nto the current context the  flask.current_app  points to that\napplication.  An application context is automatically created when a\nrequest context is pushed if necessary. \n Example usage: \n with   app . app_context (): \n     ... \n \n \n \n New in version 0.9. \n \n \n\n \n \n app_ctx_globals_class \u00b6 \n The class that is used for the  g  instance. \n Example use cases for a custom class: \n \n Store arbitrary attributes on flask.g. \n Add a property for lazy per-request database connectors. \n Return None instead of AttributeError on unexpected attributes. \n Raise exception if an unexpected attr is set, a \u201ccontrolled\u201d flask.g. \n \n In Flask 0.9 this property was called  request_globals_class  but it\nwas changed in 0.10 to  app_ctx_globals_class  because the\nflask.g object is now application context scoped. \n \n New in version 0.10. \n \n alias of  _AppCtxGlobals \n \n\n \n \n auto_find_instance_path ( ) \u00b6 \n Tries to locate the instance path if it was not provided to the\nconstructor of the application class.  It will basically calculate\nthe path to a folder named  instance  next to your main file or\nthe package. \n \n New in version 0.8. \n \n \n\n \n \n before_first_request ( f ) \u00b6 \n Registers a function to be run before the first request to this\ninstance of the application. \n The function will be called without any arguments and its return\nvalue is ignored. \n \n New in version 0.8. \n \n \n\n \n \n before_first_request_funcs  = None \u00b6 \n A lists of functions that should be called at the beginning of the\nfirst request to this instance.  To register a function here, use\nthe  before_first_request()  decorator. \n \n New in version 0.8. \n \n \n\n \n \n before_request ( f ) \u00b6 \n Registers a function to run before each request. \n The function will be called without any arguments.\nIf the function returns a non-None value, it\u2019s handled as\nif it was the return value from the view and further\nrequest handling is stopped. \n \n\n \n \n before_request_funcs  = None \u00b6 \n A dictionary with lists of functions that should be called at the\nbeginning of the request.  The key of the dictionary is the name of\nthe blueprint this function is active for,  None  for all requests.\nThis can for example be used to open database connections or\ngetting hold of the currently logged in user.  To register a\nfunction here, use the  before_request()  decorator. \n \n\n \n \n blueprints  = None \u00b6 \n all the attached blueprints in a dictionary by name.  Blueprints\ncan be attached multiple times so this dictionary does not tell\nyou how often they got attached. \n \n New in version 0.7. \n \n \n\n \n \n cli  = None \u00b6 \n The click command line context for this application.  Commands\nregistered here show up in the  flask  command once the\napplication has been discovered.  The default commands are\nprovided by Flask itself and can be overridden. \n This is an instance of a  click.Group  object. \n \n\n \n \n config  = None \u00b6 \n The configuration dictionary as  Config .  This behaves\nexactly like a regular dictionary but supports additional methods\nto load a config from files. \n \n\n \n \n config_class \u00b6 \n The class that is used for the  config  attribute of this app.\nDefaults to  Config . \n Example use cases for a custom class: \n \n Default values for certain config options. \n Access to config values through attributes in addition to keys. \n \n \n New in version 0.11. \n \n alias of  Config \n \n\n \n \n context_processor ( f ) \u00b6 \n Registers a template context processor function. \n \n\n \n \n create_global_jinja_loader ( ) \u00b6 \n Creates the loader for the Jinja2 environment.  Can be used to\noverride just the loader and keeping the rest unchanged.  It\u2019s\ndiscouraged to override this function.  Instead one should override\nthe  jinja_loader()  function instead. \n The global loader dispatches between the loaders of the application\nand the individual blueprints. \n \n New in version 0.7. \n \n \n\n \n \n create_jinja_environment ( ) \u00b6 \n Creates the Jinja2 environment based on  jinja_options \nand  select_jinja_autoescape() .  Since 0.7 this also adds\nthe Jinja2 globals and filters after initialization.  Override\nthis function to customize the behavior. \n \n New in version 0.5. \n \n \n Changed in version 0.11:  Environment.auto_reload  set in accordance with\n TEMPLATES_AUTO_RELOAD  configuration option. \n \n \n\n \n \n create_url_adapter ( request ) \u00b6 \n Creates a URL adapter for the given request.  The URL adapter\nis created at a point where the request context is not yet set up\nso the request is passed explicitly. \n \n New in version 0.6. \n \n \n Changed in version 0.9:  This can now also be called without a request object when the\nURL adapter is created for the application context. \n \n \n\n \n \n debug \u00b6 \n The debug flag.  Set this to  True  to enable debugging of the\napplication.  In debug mode the debugger will kick in when an unhandled\nexception occurs and the integrated server will automatically reload\nthe application if changes in the code are detected. \n This attribute can also be configured from the config with the  DEBUG \nconfiguration key.  Defaults to  False . \n \n\n \n \n default_config  = ImmutableDict({'JSON_AS_ASCII': True, 'USE_X_SENDFILE': False, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_NAME': 'session', 'DEBUG': False, 'LOGGER_HANDLER_POLICY': 'always', 'LOGGER_NAME': None, 'SESSION_COOKIE_SECURE': False, 'SECRET_KEY': None, 'EXPLAIN_TEMPLATE_LOADING': False, 'MAX_CONTENT_LENGTH': None, 'PROPAGATE_EXCEPTIONS': None, 'APPLICATION_ROOT': None, 'SERVER_NAME': None, 'PREFERRED_URL_SCHEME': 'http', 'JSONIFY_PRETTYPRINT_REGULAR': True, 'TESTING': False, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'TEMPLATES_AUTO_RELOAD': None, 'TRAP_BAD_REQUEST_ERRORS': False, 'JSON_SORT_KEYS': True, 'JSONIFY_MIMETYPE': 'application/json', 'SESSION_COOKIE_HTTPONLY': True, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SESSION_REFRESH_EACH_REQUEST': True, 'TRAP_HTTP_EXCEPTIONS': False}) \u00b6 \n Default configuration parameters. \n \n\n \n \n dispatch_request ( ) \u00b6 \n Does the request dispatching.  Matches the URL and returns the\nreturn value of the view or error handler.  This does not have to\nbe a response object.  In order to convert the return value to a\nproper response object, call  make_response() . \n \n Changed in version 0.7:  This no longer does the exception handling, this code was\nmoved to the new  full_dispatch_request() . \n \n \n\n \n \n do_teardown_appcontext ( exc=<object object> ) \u00b6 \n Called when an application context is popped.  This works pretty\nmuch the same as  do_teardown_request()  but for the application\ncontext. \n \n New in version 0.9. \n \n \n\n \n \n do_teardown_request ( exc=<object object> ) \u00b6 \n Called after the actual request dispatching and will\ncall every as  teardown_request()  decorated function.  This is\nnot actually called by the  Flask  object itself but is always\ntriggered when the request context is popped.  That way we have a\ntighter control over certain resources under testing environments. \n \n Changed in version 0.9:  Added the  exc  argument.  Previously this was always using the\ncurrent exception information. \n \n \n\n \n \n endpoint ( endpoint ) \u00b6 \n A decorator to register a function as an endpoint.\nExample: \n @app . endpoint ( 'example.endpoint' ) \n def   example (): \n     return   \"example\" \n \n \n \n \n \n \n Parameters: endpoint  \u2013 the name of the endpoint \n \n \n \n \n\n \n \n error_handler_spec  = None \u00b6 \n A dictionary of all registered error handlers.  The key is  None \nfor error handlers active on the application, otherwise the key is\nthe name of the blueprint.  Each key points to another dictionary\nwhere the key is the status code of the http exception.  The\nspecial key  None  points to a list of tuples where the first item\nis the class for the instance check and the second the error handler\nfunction. \n To register a error handler, use the  errorhandler() \ndecorator. \n \n\n \n \n errorhandler ( code_or_exception ) \u00b6 \n A decorator that is used to register a function given an\nerror code.  Example: \n @app . errorhandler ( 404 ) \n def   page_not_found ( error ): \n     return   'This page does not exist' ,   404 \n \n \n You can also register handlers for arbitrary exceptions: \n @app . errorhandler ( DatabaseError ) \n def   special_exception_handler ( error ): \n     return   'Database connection failed' ,   500 \n \n \n You can also register a function as error handler without using\nthe  errorhandler()  decorator.  The following example is\nequivalent to the one above: \n def   page_not_found ( error ): \n     return   'This page does not exist' ,   404 \n app . error_handler_spec [ None ][ 404 ]   =   page_not_found \n \n \n Setting error handlers via assignments to  error_handler_spec \nhowever is discouraged as it requires fiddling with nested dictionaries\nand the special case for arbitrary exception types. \n The first  None  refers to the active blueprint.  If the error\nhandler should be application wide  None  shall be used. \n \n New in version 0.7:  Use  register_error_handler()  instead of modifying\n error_handler_spec  directly, for application wide error\nhandlers. \n \n \n New in version 0.7:  One can now additionally also register custom exception types\nthat do not necessarily have to be a subclass of the\n HTTPException  class. \n \n \n \n \n \n Parameters: code_or_exception  \u2013 the code as integer for the handler, or\nan arbitrary exception \n \n \n \n \n\n \n \n extensions  = None \u00b6 \n a place where extensions can store application specific state.  For\nexample this is where an extension could store database engines and\nsimilar things.  For backwards compatibility extensions should register\nthemselves like this: \n if   not   hasattr ( app ,   'extensions' ): \n     app . extensions   =   {} \n app . extensions [ 'extensionname' ]   =   SomeObject () \n \n \n The key must match the name of the extension module. For example in\ncase of a \u201cFlask-Foo\u201d extension in  flask_foo , the key would be\n 'foo' . \n \n New in version 0.7. \n \n \n\n \n \n full_dispatch_request ( ) \u00b6 \n Dispatches the request and on top of that performs request\npre and postprocessing as well as HTTP exception catching and\nerror handling. \n \n New in version 0.7. \n \n \n\n \n \n get_send_file_max_age ( filename ) \u00b6 \n Provides default cache_timeout for the  send_file()  functions. \n By default, this function returns  SEND_FILE_MAX_AGE_DEFAULT  from\nthe configuration of  current_app . \n Static file functions such as  send_from_directory()  use this\nfunction, and  send_file()  calls this function on\n current_app  when the given cache_timeout is  None . If a\ncache_timeout is given in  send_file() , that timeout is used;\notherwise, this method is called. \n This allows subclasses to change the behavior when sending files based\non the filename.  For example, to set the cache timeout for .js files\nto 60 seconds: \n class   MyFlask ( flask . Flask ): \n     def   get_send_file_max_age ( self ,   name ): \n         if   name . lower () . endswith ( '.js' ): \n             return   60 \n         return   flask . Flask . get_send_file_max_age ( self ,   name ) \n \n \n \n New in version 0.9. \n \n \n\n \n \n got_first_request \u00b6 \n This attribute is set to  True  if the application started\nhandling the first request. \n \n New in version 0.8. \n \n \n\n \n \n handle_exception ( e ) \u00b6 \n Default exception handling that kicks in when an exception\noccurs that is not caught.  In debug mode the exception will\nbe re-raised immediately, otherwise it is logged and the handler\nfor a 500 internal server error is used.  If no such handler\nexists, a default 500 internal server error message is displayed. \n \n New in version 0.3. \n \n \n\n \n \n handle_http_exception ( e ) \u00b6 \n Handles an HTTP exception.  By default this will invoke the\nregistered error handlers and fall back to returning the\nexception as response. \n \n New in version 0.3. \n \n \n\n \n \n handle_url_build_error ( error ,  endpoint ,  values ) \u00b6 \n Handle  BuildError  on  url_for() . \n \n\n \n \n handle_user_exception ( e ) \u00b6 \n This method is called whenever an exception occurs that should be\nhandled.  A special case are\n HTTPException s which are forwarded by\nthis function to the  handle_http_exception()  method.  This\nfunction will either return a response value or reraise the\nexception with the same traceback. \n \n New in version 0.7. \n \n \n\n \n \n has_static_folder \u00b6 \n This is  True  if the package bound object\u2019s container has a\nfolder for static files. \n \n New in version 0.5. \n \n \n\n \n \n init_jinja_globals ( ) \u00b6 \n Deprecated.  Used to initialize the Jinja2 globals. \n \n New in version 0.5. \n \n \n Changed in version 0.7:  This method is deprecated with 0.7.  Override\n create_jinja_environment()  instead. \n \n \n\n \n \n inject_url_defaults ( endpoint ,  values ) \u00b6 \n Injects the URL defaults for the given endpoint directly into\nthe values dictionary passed.  This is used internally and\nautomatically called on URL building. \n \n New in version 0.7. \n \n \n\n \n \n instance_path  = None \u00b6 \n Holds the path to the instance folder. \n \n New in version 0.8. \n \n \n\n \n \n iter_blueprints ( ) \u00b6 \n Iterates over all blueprints by the order they were registered. \n \n New in version 0.11. \n \n \n\n \n \n jinja_env \u00b6 \n The Jinja2 environment used to load templates. \n \n\n \n \n jinja_environment \u00b6 \n The class that is used for the Jinja environment. \n \n New in version 0.11. \n \n alias of  Environment \n \n\n \n \n jinja_loader \u00b6 \n The Jinja loader for this package bound object. \n \n New in version 0.5. \n \n \n\n \n \n jinja_options  = ImmutableDict({'extensions': ['jinja2.ext.autoescape', 'jinja2.ext.with_']}) \u00b6 \n Options that are passed directly to the Jinja2 environment. \n \n\n \n \n json_decoder \u00b6 \n The JSON decoder class to use.  Defaults to  JSONDecoder . \n \n New in version 0.10. \n \n alias of  JSONDecoder \n \n\n \n \n json_encoder \u00b6 \n The JSON encoder class to use.  Defaults to  JSONEncoder . \n \n New in version 0.10. \n \n alias of  JSONEncoder \n \n\n \n \n log_exception ( exc_info ) \u00b6 \n Logs an exception.  This is called by  handle_exception() \nif debugging is disabled and right before the handler is called.\nThe default implementation logs the exception as error on the\n logger . \n \n New in version 0.8. \n \n \n\n \n \n logger \u00b6 \n A  logging.Logger  object for this application.  The\ndefault configuration is to log to stderr if the application is\nin debug mode.  This logger can be used to (surprise) log messages.\nHere some examples: \n app . logger . debug ( 'A value for debugging' ) \n app . logger . warning ( 'A warning occurred ( %d  apples)' ,   42 ) \n app . logger . error ( 'An error occurred' ) \n \n \n \n New in version 0.3. \n \n \n\n \n \n logger_name \u00b6 \n The name of the logger to use.  By default the logger name is the\npackage name passed to the constructor. \n \n New in version 0.4. \n \n \n\n \n \n make_config ( instance_relative=False ) \u00b6 \n Used to create the config attribute by the Flask constructor.\nThe  instance_relative  parameter is passed in from the constructor\nof Flask (there named  instance_relative_config ) and indicates if\nthe config should be relative to the instance path or the root path\nof the application. \n \n New in version 0.8. \n \n \n\n \n \n make_default_options_response ( ) \u00b6 \n This method is called to create the default  OPTIONS  response.\nThis can be changed through subclassing to change the default\nbehavior of  OPTIONS  responses. \n \n New in version 0.7. \n \n \n\n \n \n make_null_session ( ) \u00b6 \n Creates a new instance of a missing session.  Instead of overriding\nthis method we recommend replacing the  session_interface . \n \n New in version 0.7. \n \n \n\n \n \n make_response ( rv ) \u00b6 \n Converts the return value from a view function to a real\nresponse object that is an instance of  response_class . \n The following types are allowed for  rv : \n \n \n \n \n \n \n response_class \n the object is returned unchanged \n \n str \n a response object is created with the\nstring as body \n \n unicode \n a response object is created with the\nstring encoded to utf-8 as body \n \n a WSGI function \n the function is called as WSGI application\nand buffered as response object \n \n tuple \n A tuple in the form  (response,   status, \n headers)  or  (response,   headers) \nwhere  response  is any of the\ntypes defined here,  status  is a string\nor an integer and  headers  is a list or\na dictionary with header values. \n \n \n \n \n \n \n \n Parameters: rv  \u2013 the return value from the view function \n \n \n \n \n Changed in version 0.9:  Previously a tuple was interpreted as the arguments for the\nresponse object. \n \n \n\n \n \n make_shell_context ( ) \u00b6 \n Returns the shell context for an interactive shell for this\napplication.  This runs all the registered shell context\nprocessors. \n \n New in version 0.11. \n \n \n\n \n \n name \u00b6 \n The name of the application.  This is usually the import name\nwith the difference that it\u2019s guessed from the run file if the\nimport name is main.  This name is used as a display name when\nFlask needs the name of the application.  It can be set and overridden\nto change the value. \n \n New in version 0.8. \n \n \n\n \n \n open_instance_resource ( resource ,  mode='rb' ) \u00b6 \n Opens a resource from the application\u2019s instance folder\n( instance_path ).  Otherwise works like\n open_resource() .  Instance resources can also be opened for\nwriting. \n \n \n \n \n Parameters: \n resource  \u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator. \n mode  \u2013 resource file opening mode, default is \u2018rb\u2019. \n \n \n \n \n \n \n\n \n \n open_resource ( resource ,  mode='rb' ) \u00b6 \n Opens a resource from the application\u2019s resource folder.  To see\nhow this works, consider the following folder structure: \n / myapplication . py \n / schema . sql \n / static \n     / style . css \n / templates \n     / layout . html \n     / index . html \n \n \n If you want to open the  schema.sql  file you would do the\nfollowing: \n with   app . open_resource ( 'schema.sql' )   as   f : \n     contents   =   f . read () \n     do_something_with ( contents ) \n \n \n \n \n \n \n Parameters: \n resource  \u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator. \n mode  \u2013 resource file opening mode, default is \u2018rb\u2019. \n \n \n \n \n \n \n\n \n \n open_session ( request ) \u00b6 \n Creates or opens a new session.  Default implementation stores all\nsession data in a signed cookie.  This requires that the\n secret_key  is set.  Instead of overriding this method\nwe recommend replacing the  session_interface . \n \n \n \n \n Parameters: request  \u2013 an instance of  request_class . \n \n \n \n \n\n \n \n permanent_session_lifetime \u00b6 \n A  timedelta  which is used to set the expiration\ndate of a permanent session.  The default is 31 days which makes a\npermanent session survive for roughly one month. \n This attribute can also be configured from the config with the\n PERMANENT_SESSION_LIFETIME  configuration key.  Defaults to\n timedelta(days=31) \n \n\n \n \n preprocess_request ( ) \u00b6 \n Called before the actual request dispatching and will\ncall each  before_request()  decorated function, passing no\narguments.\nIf any of these functions returns a value, it\u2019s handled as\nif it was the return value from the view and further\nrequest handling is stopped. \n This also triggers the  url_value_preprocessor()  functions before\nthe actual  before_request()  functions are called. \n \n\n \n \n preserve_context_on_exception \u00b6 \n Returns the value of the  PRESERVE_CONTEXT_ON_EXCEPTION \nconfiguration value in case it\u2019s set, otherwise a sensible default\nis returned. \n \n New in version 0.7. \n \n \n\n \n \n process_response ( response ) \u00b6 \n Can be overridden in order to modify the response object\nbefore it\u2019s sent to the WSGI server.  By default this will\ncall all the  after_request()  decorated functions. \n \n Changed in version 0.5:  As of Flask 0.5 the functions registered for after request\nexecution are called in reverse order of registration. \n \n \n \n \n \n Parameters: response  \u2013 a  response_class  object. \n \n Returns: a new response object or the same, has to be an\ninstance of  response_class . \n \n \n \n \n\n \n \n propagate_exceptions \u00b6 \n Returns the value of the  PROPAGATE_EXCEPTIONS  configuration\nvalue in case it\u2019s set, otherwise a sensible default is returned. \n \n New in version 0.7. \n \n \n\n \n \n register_blueprint ( blueprint ,  **options ) \u00b6 \n Registers a blueprint on the application. \n \n New in version 0.7. \n \n \n\n \n \n register_error_handler ( code_or_exception ,  f ) \u00b6 \n Alternative error attach function to the  errorhandler() \ndecorator that is more straightforward to use for non decorator\nusage. \n \n New in version 0.7. \n \n \n\n \n \n request_class \u00b6 \n The class that is used for request objects.  See  Request \nfor more information. \n alias of  Request \n \n\n \n \n request_context ( environ ) \u00b6 \n Creates a  RequestContext  from the given\nenvironment and binds it to the current context.  This must be used in\ncombination with the  with  statement because the request is only bound\nto the current context for the duration of the  with  block. \n Example usage: \n with   app . request_context ( environ ): \n     do_something_with ( request ) \n \n \n The object returned can also be used without the  with  statement\nwhich is useful for working in the shell.  The example above is\ndoing exactly the same as this code: \n ctx   =   app . request_context ( environ ) \n ctx . push () \n try : \n     do_something_with ( request ) \n finally : \n     ctx . pop () \n \n \n \n Changed in version 0.3:  Added support for non-with statement usage and  with  statement\nis now passed the ctx object. \n \n \n \n \n \n Parameters: environ  \u2013 a WSGI environment \n \n \n \n \n\n \n \n response_class \u00b6 \n The class that is used for response objects.  See\n Response  for more information. \n alias of  Response \n \n\n \n \n route ( rule ,  **options ) \u00b6 \n A decorator that is used to register a view function for a\ngiven URL rule.  This does the same thing as  add_url_rule() \nbut is intended for decorator usage: \n @app . route ( '/' ) \n def   index (): \n     return   'Hello World' \n \n \n For more information refer to  URL Route Registrations . \n \n \n \n \n Parameters: \n rule  \u2013 the URL rule as string \n endpoint  \u2013 the endpoint for the registered URL rule.  Flask\nitself assumes the name of the view function as\nendpoint \n options  \u2013 the options to be forwarded to the underlying\n Rule  object.  A change\nto Werkzeug is handling of method options.  methods\nis a list of methods this rule should be limited\nto ( GET ,  POST  etc.).  By default a rule\njust listens for  GET  (and implicitly  HEAD ).\nStarting with Flask 0.6,  OPTIONS  is implicitly\nadded and handled by the standard request handling. \n \n \n \n \n \n \n\n \n \n run ( host=None ,  port=None ,  debug=None ,  **options ) \u00b6 \n Runs the application on a local development server. \n Do not use  run()  in a production setting. It is not intended to\nmeet security and performance requirements for a production server.\nInstead, see  Deployment Options  for WSGI server recommendations. \n If the  debug  flag is set the server will automatically reload\nfor code changes and show a debugger in case an exception happened. \n If you want to run the application in debug mode, but disable the\ncode execution on the interactive debugger, you can pass\n use_evalex=False  as parameter.  This will keep the debugger\u2019s\ntraceback screen active, but disable code execution. \n It is not recommended to use this function for development with\nautomatic reloading as this is badly supported.  Instead you should\nbe using the  flask  command line script\u2019s  run  support. \n \n Keep in Mind \n Flask will suppress any server error with a generic error page\nunless it is in debug mode.  As such to enable just the\ninteractive debugger without the code reloading, you have to\ninvoke  run()  with  debug=True  and  use_reloader=False .\nSetting  use_debugger  to  True  without being in debug mode\nwon\u2019t catch any exceptions because there won\u2019t be any to\ncatch. \n \n \n Changed in version 0.10:  The default port is now picked from the  SERVER_NAME  variable. \n \n \n \n \n \n Parameters: \n host  \u2013 the hostname to listen on. Set this to  '0.0.0.0'  to\nhave the server available externally as well. Defaults to\n '127.0.0.1' . \n port  \u2013 the port of the webserver. Defaults to  5000  or the\nport defined in the  SERVER_NAME  config variable if\npresent. \n debug  \u2013 if given, enable or disable debug mode.\nSee  debug . \n options  \u2013 the options to be forwarded to the underlying\nWerkzeug server.  See\n werkzeug.serving.run_simple()  for more\ninformation. \n \n \n \n \n \n \n\n \n \n save_session ( session ,  response ) \u00b6 \n Saves the session if it needs updates.  For the default\nimplementation, check  open_session() .  Instead of overriding this\nmethod we recommend replacing the  session_interface . \n \n \n \n \n Parameters: \n session  \u2013 the session to be saved (a\n SecureCookie \nobject) \n response  \u2013 an instance of  response_class \n \n \n \n \n \n \n\n \n \n secret_key \u00b6 \n If a secret key is set, cryptographic components can use this to\nsign cookies and other things.  Set this to a complex random value\nwhen you want to use the secure cookie for instance. \n This attribute can also be configured from the config with the\n SECRET_KEY  configuration key.  Defaults to  None . \n \n\n \n \n select_jinja_autoescape ( filename ) \u00b6 \n Returns  True  if autoescaping should be active for the given\ntemplate name. If no template name is given, returns  True . \n \n New in version 0.5. \n \n \n\n \n \n send_file_max_age_default \u00b6 \n A  timedelta  which is used as default cache_timeout\nfor the  send_file()  functions. The default is 12 hours. \n This attribute can also be configured from the config with the\n SEND_FILE_MAX_AGE_DEFAULT  configuration key. This configuration\nvariable can also be set with an integer value used as seconds.\nDefaults to  timedelta(hours=12) \n \n\n \n \n send_static_file ( filename ) \u00b6 \n Function used internally to send static files from the static\nfolder to the browser. \n \n New in version 0.5. \n \n \n\n \n \n session_cookie_name \u00b6 \n The secure cookie uses this for the name of the session cookie. \n This attribute can also be configured from the config with the\n SESSION_COOKIE_NAME  configuration key.  Defaults to  'session' \n \n\n \n \n session_interface  = <flask.sessions.SecureCookieSessionInterface object> \u00b6 \n the session interface to use.  By default an instance of\n SecureCookieSessionInterface  is used here. \n \n New in version 0.8. \n \n \n\n \n \n shell_context_processor ( f ) \u00b6 \n Registers a shell context processor function. \n \n New in version 0.11. \n \n \n\n \n \n shell_context_processors  = None \u00b6 \n A list of shell context processor functions that should be run\nwhen a shell context is created. \n \n New in version 0.11. \n \n \n\n \n \n should_ignore_error ( error ) \u00b6 \n This is called to figure out if an error should be ignored\nor not as far as the teardown system is concerned.  If this\nfunction returns  True  then the teardown handlers will not be\npassed the error. \n \n New in version 0.10. \n \n \n\n \n \n static_folder \u00b6 \n The absolute path to the configured static folder. \n \n\n \n \n teardown_appcontext ( f ) \u00b6 \n Registers a function to be called when the application context\nends.  These functions are typically also called when the request\ncontext is popped. \n Example: \n ctx   =   app . app_context () \n ctx . push () \n ... \n ctx . pop () \n \n \n When  ctx.pop()  is executed in the above example, the teardown\nfunctions are called just before the app context moves from the\nstack of active contexts.  This becomes relevant if you are using\nsuch constructs in tests. \n Since a request context typically also manages an application\ncontext it would also be called when you pop a request context. \n When a teardown function was called because of an exception it will\nbe passed an error object. \n The return values of teardown functions are ignored. \n \n New in version 0.9. \n \n \n\n \n \n teardown_appcontext_funcs  = None \u00b6 \n A list of functions that are called when the application context\nis destroyed.  Since the application context is also torn down\nif the request ends this is the place to store code that disconnects\nfrom databases. \n \n New in version 0.9. \n \n \n\n \n \n teardown_request ( f ) \u00b6 \n Register a function to be run at the end of each request,\nregardless of whether there was an exception or not.  These functions\nare executed when the request context is popped, even if not an\nactual request was performed. \n Example: \n ctx   =   app . test_request_context () \n ctx . push () \n ... \n ctx . pop () \n \n \n When  ctx.pop()  is executed in the above example, the teardown\nfunctions are called just before the request context moves from the\nstack of active contexts.  This becomes relevant if you are using\nsuch constructs in tests. \n Generally teardown functions must take every necessary step to avoid\nthat they will fail.  If they do execute code that might fail they\nwill have to surround the execution of these code by try/except\nstatements and log occurring errors. \n When a teardown function was called because of a exception it will\nbe passed an error object. \n The return values of teardown functions are ignored. \n \n Debug Note \n In debug mode Flask will not tear down a request on an exception\nimmediately.  Instead it will keep it alive so that the interactive\ndebugger can still access it.  This behavior can be controlled\nby the  PRESERVE_CONTEXT_ON_EXCEPTION  configuration variable. \n \n \n\n \n \n teardown_request_funcs  = None \u00b6 \n A dictionary with lists of functions that are called after\neach request, even if an exception has occurred. The key of the\ndictionary is the name of the blueprint this function is active for,\n None  for all requests. These functions are not allowed to modify\nthe request, and their return values are ignored. If an exception\noccurred while processing the request, it gets passed to each\nteardown_request function. To register a function here, use the\n teardown_request()  decorator. \n \n New in version 0.7. \n \n \n\n \n \n template_context_processors  = None \u00b6 \n A dictionary with list of functions that are called without argument\nto populate the template context.  The key of the dictionary is the\nname of the blueprint this function is active for,  None  for all\nrequests.  Each returns a dictionary that the template context is\nupdated with.  To register a function here, use the\n context_processor()  decorator. \n \n\n \n \n template_filter ( name=None ) \u00b6 \n A decorator that is used to register custom template filter.\nYou can specify a name for the filter, otherwise the function\nname will be used. Example: \n @app . template_filter () \n def   reverse ( s ): \n     return   s [:: - 1 ] \n \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the filter, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n template_global ( name=None ) \u00b6 \n A decorator that is used to register a custom template global function.\nYou can specify a name for the global function, otherwise the function\nname will be used. Example: \n @app . template_global () \n def   double ( n ): \n     return   2   *   n \n \n \n \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the global function, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n template_test ( name=None ) \u00b6 \n A decorator that is used to register custom template test.\nYou can specify a name for the test, otherwise the function\nname will be used. Example: \n @app . template_test () \n def   is_prime ( n ): \n     if   n   ==   2 : \n         return   True \n     for   i   in   range ( 2 ,   int ( math . ceil ( math . sqrt ( n )))   +   1 ): \n         if   n   %   i   ==   0 : \n             return   False \n     return   True \n \n \n \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the test, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n test_client ( use_cookies=True ,  **kwargs ) \u00b6 \n Creates a test client for this application.  For information\nabout unit testing head over to  Testing Flask Applications . \n Note that if you are testing for assertions or exceptions in your\napplication code, you must set  app.testing   =   True  in order for the\nexceptions to propagate to the test client.  Otherwise, the exception\nwill be handled by the application (not visible to the test client) and\nthe only indication of an AssertionError or other exception will be a\n500 status code response to the test client.  See the  testing \nattribute.  For example: \n app . testing   =   True \n client   =   app . test_client () \n \n \n The test client can be used in a  with  block to defer the closing down\nof the context until the end of the  with  block.  This is useful if\nyou want to access the context locals for testing: \n with   app . test_client ()   as   c : \n     rv   =   c . get ( '/?vodka=42' ) \n     assert   request . args [ 'vodka' ]   ==   '42' \n \n \n Additionally, you may pass optional keyword arguments that will then\nbe passed to the application\u2019s  test_client_class  constructor.\nFor example: \n from   flask.testing   import   FlaskClient \n\n class   CustomClient ( FlaskClient ): \n     def   __init__ ( self ,   * args ,   ** kwargs ): \n         self . _authentication   =   kwargs . pop ( \"authentication\" ) \n         super ( CustomClient , self ) . __init__ (   * args ,   ** kwargs ) \n\n app . test_client_class   =   CustomClient \n client   =   app . test_client ( authentication = 'Basic ....' ) \n \n \n See  FlaskClient  for more information. \n \n Changed in version 0.4:  added support for  with  block usage for the client. \n \n \n New in version 0.7:  The  use_cookies  parameter was added as well as the ability\nto override the client to be used by setting the\n test_client_class  attribute. \n \n \n Changed in version 0.11:  Added  **kwargs  to support passing additional keyword arguments to\nthe constructor of  test_client_class . \n \n \n\n \n \n test_client_class  = None \u00b6 \n the test client that is used with when  test_client  is used. \n \n New in version 0.7. \n \n \n\n \n \n test_request_context ( *args ,  **kwargs ) \u00b6 \n Creates a WSGI environment from the given values (see\n werkzeug.test.EnvironBuilder  for more information, this\nfunction accepts the same arguments). \n \n\n \n \n testing \u00b6 \n The testing flag.  Set this to  True  to enable the test mode of\nFlask extensions (and in the future probably also Flask itself).\nFor example this might activate unittest helpers that have an\nadditional runtime cost which should not be enabled by default. \n If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the\ndefault it\u2019s implicitly enabled. \n This attribute can also be configured from the config with the\n TESTING  configuration key.  Defaults to  False . \n \n\n \n \n trap_http_exception ( e ) \u00b6 \n Checks if an HTTP exception should be trapped or not.  By default\nthis will return  False  for all exceptions except for a bad request\nkey error if  TRAP_BAD_REQUEST_ERRORS  is set to  True .  It\nalso returns  True  if  TRAP_HTTP_EXCEPTIONS  is set to  True . \n This is called for all HTTP exceptions raised by a view function.\nIf it returns  True  for any exception the error handler for this\nexception is not called and it shows up as regular exception in the\ntraceback.  This is helpful for debugging implicitly raised HTTP\nexceptions. \n \n New in version 0.8. \n \n \n\n \n \n update_template_context ( context ) \u00b6 \n Update the template context with some commonly used variables.\nThis injects request, session, config and g into the template\ncontext as well as everything template context processors want\nto inject.  Note that the as of Flask 0.6, the original values\nin the context will not be overridden if a context processor\ndecides to return a value with the same key. \n \n \n \n \n Parameters: context  \u2013 the context as a dictionary that is updated in place\nto add extra variables. \n \n \n \n \n\n \n \n url_build_error_handlers  = None \u00b6 \n A list of functions that are called when  url_for()  raises a\n BuildError .  Each function registered here\nis called with  error ,  endpoint  and  values .  If a function\nreturns  None  or raises a  BuildError  the next function is\ntried. \n \n New in version 0.9. \n \n \n\n \n \n url_default_functions  = None \u00b6 \n A dictionary with lists of functions that can be used as URL value\npreprocessors.  The key  None  here is used for application wide\ncallbacks, otherwise the key is the name of the blueprint.\nEach of these functions has the chance to modify the dictionary\nof URL values before they are used as the keyword arguments of the\nview function.  For each function registered this one should also\nprovide a  url_defaults()  function that adds the parameters\nautomatically again that were removed that way. \n \n New in version 0.7. \n \n \n\n \n \n url_defaults ( f ) \u00b6 \n Callback function for URL defaults for all view functions of the\napplication.  It\u2019s called with the endpoint and values and should\nupdate the values passed in place. \n \n\n \n \n url_map  = None \u00b6 \n The  Map  for this instance.  You can use\nthis to change the routing converters after the class was created\nbut before any routes are connected.  Example: \n from   werkzeug.routing   import   BaseConverter \n\n class   ListConverter ( BaseConverter ): \n     def   to_python ( self ,   value ): \n         return   value . split ( ',' ) \n     def   to_url ( self ,   values ): \n         return   ',' . join ( super ( ListConverter ,   self ) . to_url ( value ) \n                         for   value   in   values ) \n\n app   =   Flask ( __name__ ) \n app . url_map . converters [ 'list' ]   =   ListConverter \n \n \n \n\n \n \n url_rule_class \u00b6 \n The rule object to use for URL rules created.  This is used by\n add_url_rule() .  Defaults to  werkzeug.routing.Rule . \n \n New in version 0.7. \n \n alias of  Rule \n \n\n \n \n url_value_preprocessor ( f ) \u00b6 \n Registers a function as URL value preprocessor for all view\nfunctions of the application.  It\u2019s called before the view functions\nare called and can modify the url values provided. \n \n\n \n \n url_value_preprocessors  = None \u00b6 \n A dictionary with lists of functions that can be used as URL\nvalue processor functions.  Whenever a URL is built these functions\nare called to modify the dictionary of values in place.  The key\n None  here is used for application wide\ncallbacks, otherwise the key is the name of the blueprint.\nEach of these functions has the chance to modify the dictionary \n \n New in version 0.7. \n \n \n\n \n \n use_x_sendfile \u00b6 \n Enable this if you want to use the X-Sendfile feature.  Keep in\nmind that the server has to support this.  This only affects files\nsent with the  send_file()  method. \n \n New in version 0.2. \n \n This attribute can also be configured from the config with the\n USE_X_SENDFILE  configuration key.  Defaults to  False . \n \n\n \n \n view_functions  = None \u00b6 \n A dictionary of all view functions registered.  The keys will\nbe function names which are also used to generate URLs and\nthe values are the function objects themselves.\nTo register a view function, use the  route()  decorator. \n \n\n \n \n wsgi_app ( environ ,  start_response ) \u00b6 \n The actual WSGI application.  This is not implemented in\n __call__  so that middlewares can be applied without losing a\nreference to the class.  So instead of doing this: \n app   =   MyMiddleware ( app ) \n \n \n It\u2019s a better idea to do this instead: \n app . wsgi_app   =   MyMiddleware ( app . wsgi_app ) \n \n \n Then you still have the original application object around and\ncan continue to call methods on it. \n \n Changed in version 0.7:  The behavior of the before and after request callbacks was changed\nunder error conditions and a new callback was added that will\nalways execute at the end of the request, independent on if an\nerror occurred or not.  See  Callbacks and Errors . \n \n \n \n \n \n Parameters: \n environ  \u2013 a WSGI environment \n start_response  \u2013 a callable accepting a status code,\na list of headers and an optional\nexception context to start the response \n \n \n \n \n \n \n\n \n\n \n \n Blueprint Objects \u00b6 \n \n \n class  flask. Blueprint ( name ,  import_name ,  static_folder=None ,  static_url_path=None ,  template_folder=None ,  url_prefix=None ,  subdomain=None ,  url_defaults=None ,  root_path=None ) \u00b6 \n Represents a blueprint.  A blueprint is an object that records\nfunctions that will be called with the\n BlueprintSetupState  later to register functions\nor other things on the main application.  See  Modular Applications with Blueprints  for more\ninformation. \n \n New in version 0.7. \n \n \n \n add_app_template_filter ( f ,  name=None ) \u00b6 \n Register a custom template filter, available application wide.  Like\n Flask.add_template_filter()  but for a blueprint.  Works exactly\nlike the  app_template_filter()  decorator. \n \n \n \n \n Parameters: name  \u2013 the optional name of the filter, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n add_app_template_global ( f ,  name=None ) \u00b6 \n Register a custom template global, available application wide.  Like\n Flask.add_template_global()  but for a blueprint.  Works exactly\nlike the  app_template_global()  decorator. \n \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the global, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n add_app_template_test ( f ,  name=None ) \u00b6 \n Register a custom template test, available application wide.  Like\n Flask.add_template_test()  but for a blueprint.  Works exactly\nlike the  app_template_test()  decorator. \n \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the test, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n add_url_rule ( rule ,  endpoint=None ,  view_func=None ,  **options ) \u00b6 \n Like  Flask.add_url_rule()  but for a blueprint.  The endpoint for\nthe  url_for()  function is prefixed with the name of the blueprint. \n \n\n \n \n after_app_request ( f ) \u00b6 \n Like  Flask.after_request()  but for a blueprint.  Such a function\nis executed after each request, even if outside of the blueprint. \n \n\n \n \n after_request ( f ) \u00b6 \n Like  Flask.after_request()  but for a blueprint.  This function\nis only executed after each request that is handled by a function of\nthat blueprint. \n \n\n \n \n app_context_processor ( f ) \u00b6 \n Like  Flask.context_processor()  but for a blueprint.  Such a\nfunction is executed each request, even if outside of the blueprint. \n \n\n \n \n app_errorhandler ( code ) \u00b6 \n Like  Flask.errorhandler()  but for a blueprint.  This\nhandler is used for all requests, even if outside of the blueprint. \n \n\n \n \n app_template_filter ( name=None ) \u00b6 \n Register a custom template filter, available application wide.  Like\n Flask.template_filter()  but for a blueprint. \n \n \n \n \n Parameters: name  \u2013 the optional name of the filter, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n app_template_global ( name=None ) \u00b6 \n Register a custom template global, available application wide.  Like\n Flask.template_global()  but for a blueprint. \n \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the global, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n app_template_test ( name=None ) \u00b6 \n Register a custom template test, available application wide.  Like\n Flask.template_test()  but for a blueprint. \n \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the test, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n app_url_defaults ( f ) \u00b6 \n Same as  url_defaults()  but application wide. \n \n\n \n \n app_url_value_preprocessor ( f ) \u00b6 \n Same as  url_value_preprocessor()  but application wide. \n \n\n \n \n before_app_first_request ( f ) \u00b6 \n Like  Flask.before_first_request() .  Such a function is\nexecuted before the first request to the application. \n \n\n \n \n before_app_request ( f ) \u00b6 \n Like  Flask.before_request() .  Such a function is executed\nbefore each request, even if outside of a blueprint. \n \n\n \n \n before_request ( f ) \u00b6 \n Like  Flask.before_request()  but for a blueprint.  This function\nis only executed before each request that is handled by a function of\nthat blueprint. \n \n\n \n \n context_processor ( f ) \u00b6 \n Like  Flask.context_processor()  but for a blueprint.  This\nfunction is only executed for requests handled by a blueprint. \n \n\n \n \n endpoint ( endpoint ) \u00b6 \n Like  Flask.endpoint()  but for a blueprint.  This does not\nprefix the endpoint with the blueprint name, this has to be done\nexplicitly by the user of this method.  If the endpoint is prefixed\nwith a  .  it will be registered to the current blueprint, otherwise\nit\u2019s an application independent endpoint. \n \n\n \n \n errorhandler ( code_or_exception ) \u00b6 \n Registers an error handler that becomes active for this blueprint\nonly.  Please be aware that routing does not happen local to a\nblueprint so an error handler for 404 usually is not handled by\na blueprint unless it is caused inside a view function.  Another\nspecial case is the 500 internal server error which is always looked\nup from the application. \n Otherwise works as the  errorhandler()  decorator\nof the  Flask  object. \n \n\n \n \n get_send_file_max_age ( filename ) \u00b6 \n Provides default cache_timeout for the  send_file()  functions. \n By default, this function returns  SEND_FILE_MAX_AGE_DEFAULT  from\nthe configuration of  current_app . \n Static file functions such as  send_from_directory()  use this\nfunction, and  send_file()  calls this function on\n current_app  when the given cache_timeout is  None . If a\ncache_timeout is given in  send_file() , that timeout is used;\notherwise, this method is called. \n This allows subclasses to change the behavior when sending files based\non the filename.  For example, to set the cache timeout for .js files\nto 60 seconds: \n class   MyFlask ( flask . Flask ): \n     def   get_send_file_max_age ( self ,   name ): \n         if   name . lower () . endswith ( '.js' ): \n             return   60 \n         return   flask . Flask . get_send_file_max_age ( self ,   name ) \n \n \n \n New in version 0.9. \n \n \n\n \n \n has_static_folder \u00b6 \n This is  True  if the package bound object\u2019s container has a\nfolder for static files. \n \n New in version 0.5. \n \n \n\n \n \n jinja_loader \u00b6 \n The Jinja loader for this package bound object. \n \n New in version 0.5. \n \n \n\n \n \n make_setup_state ( app ,  options ,  first_registration=False ) \u00b6 \n Creates an instance of  BlueprintSetupState() \nobject that is later passed to the register callback functions.\nSubclasses can override this to return a subclass of the setup state. \n \n\n \n \n open_resource ( resource ,  mode='rb' ) \u00b6 \n Opens a resource from the application\u2019s resource folder.  To see\nhow this works, consider the following folder structure: \n / myapplication . py \n / schema . sql \n / static \n     / style . css \n / templates \n     / layout . html \n     / index . html \n \n \n If you want to open the  schema.sql  file you would do the\nfollowing: \n with   app . open_resource ( 'schema.sql' )   as   f : \n     contents   =   f . read () \n     do_something_with ( contents ) \n \n \n \n \n \n \n Parameters: \n resource  \u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator. \n mode  \u2013 resource file opening mode, default is \u2018rb\u2019. \n \n \n \n \n \n \n\n \n \n record ( func ) \u00b6 \n Registers a function that is called when the blueprint is\nregistered on the application.  This function is called with the\nstate as argument as returned by the  make_setup_state() \nmethod. \n \n\n \n \n record_once ( func ) \u00b6 \n Works like  record()  but wraps the function in another\nfunction that will ensure the function is only called once.  If the\nblueprint is registered a second time on the application, the\nfunction passed is not called. \n \n\n \n \n register ( app ,  options ,  first_registration=False ) \u00b6 \n Called by  Flask.register_blueprint()  to register a blueprint\non the application.  This can be overridden to customize the register\nbehavior.  Keyword arguments from\n register_blueprint()  are directly forwarded to this\nmethod in the  options  dictionary. \n \n\n \n \n register_error_handler ( code_or_exception ,  f ) \u00b6 \n Non-decorator version of the  errorhandler()  error attach\nfunction, akin to the  register_error_handler() \napplication-wide function of the  Flask  object but\nfor error handlers limited to this blueprint. \n \n New in version 0.11. \n \n \n\n \n \n route ( rule ,  **options ) \u00b6 \n Like  Flask.route()  but for a blueprint.  The endpoint for the\n url_for()  function is prefixed with the name of the blueprint. \n \n\n \n \n send_static_file ( filename ) \u00b6 \n Function used internally to send static files from the static\nfolder to the browser. \n \n New in version 0.5. \n \n \n\n \n \n static_folder \u00b6 \n The absolute path to the configured static folder. \n \n\n \n \n teardown_app_request ( f ) \u00b6 \n Like  Flask.teardown_request()  but for a blueprint.  Such a\nfunction is executed when tearing down each request, even if outside of\nthe blueprint. \n \n\n \n \n teardown_request ( f ) \u00b6 \n Like  Flask.teardown_request()  but for a blueprint.  This\nfunction is only executed when tearing down requests handled by a\nfunction of that blueprint.  Teardown request functions are executed\nwhen the request context is popped, even when no actual request was\nperformed. \n \n\n \n \n url_defaults ( f ) \u00b6 \n Callback function for URL defaults for this blueprint.  It\u2019s called\nwith the endpoint and values and should update the values passed\nin place. \n \n\n \n \n url_value_preprocessor ( f ) \u00b6 \n Registers a function as URL value preprocessor for this\nblueprint.  It\u2019s called before the view functions are called and\ncan modify the url values provided. \n \n\n \n\n \n \n Incoming Request Data \u00b6 \n \n \n class  flask. Request ( environ ,  populate_request=True ,  shallow=False ) \u00b6 \n The request object used by default in Flask.  Remembers the\nmatched endpoint and view arguments. \n It is what ends up as  request .  If you want to replace\nthe request object used you can subclass this and set\n request_class  to your subclass. \n The request object is a  Request  subclass and\nprovides all of the attributes Werkzeug defines plus a few Flask\nspecific ones. \n \n \n form \u00b6 \n A  MultiDict  with the parsed form data from  POST \nor  PUT  requests.  Please keep in mind that file uploads will not\nend up here,  but instead in the  files  attribute. \n \n\n \n \n args \u00b6 \n A  MultiDict  with the parsed contents of the query\nstring.  (The part in the URL after the question mark). \n \n\n \n \n values \u00b6 \n A  CombinedMultiDict  with the contents of both\n form  and  args . \n \n\n \n \n cookies \u00b6 \n A  dict  with the contents of all cookies transmitted with\nthe request. \n \n\n \n \n stream \u00b6 \n If the incoming form data was not encoded with a known mimetype\nthe data is stored unmodified in this stream for consumption.  Most\nof the time it is a better idea to use  data  which will give\nyou that data as a string.  The stream only returns the data once. \n \n\n \n \n headers \u00b6 \n The incoming request headers as a dictionary like object. \n \n\n \n \n data \u00b6 \n Contains the incoming request data as string in case it came with\na mimetype Flask does not handle. \n \n\n \n \n files \u00b6 \n A  MultiDict  with files uploaded as part of a\n POST  or  PUT  request.  Each file is stored as\n FileStorage  object.  It basically behaves like a\nstandard file object you know from Python, with the difference that\nit also has a  save()  function that can\nstore the file on the filesystem. \n \n\n \n \n environ \u00b6 \n The underlying WSGI environment. \n \n\n \n \n method \u00b6 \n The current request method ( POST ,  GET  etc.) \n \n\n \n \n path \u00b6 \n \n\n \n \n full_path \u00b6 \n \n\n \n \n script_root \u00b6 \n \n\n \n \n url \u00b6 \n \n\n \n \n base_url \u00b6 \n \n\n \n \n url_root \u00b6 \n Provides different ways to look at the current  IRI .  Imagine your application is\nlistening on the following application root: \n http : // www . example . com / myapplication \n \n \n And a user requests the following URI: \n http://www.example.com/myapplication/%CF%80/page.html?x=y\n \n \n In this case the values of the above mentioned attributes would be\nthe following: \n \n \n \n \n \n \n path \n u'/\u03c0/page.html' \n \n full_path \n u'/\u03c0/page.html?x=y' \n \n script_root \n u'/myapplication' \n \n base_url \n u'http://www.example.com/myapplication/\u03c0/page.html' \n \n url \n u'http://www.example.com/myapplication/\u03c0/page.html?x=y' \n \n url_root \n u'http://www.example.com/myapplication/' \n \n \n \n \n\n \n \n is_xhr \u00b6 \n True  if the request was triggered via a JavaScript\n XMLHttpRequest . This only works with libraries that support the\n X-Requested-With  header and set it to  XMLHttpRequest .\nLibraries that do that are prototype, jQuery and Mochikit and\nprobably some more. \n \n\n \n \n blueprint \u00b6 \n The name of the current blueprint \n \n\n \n \n endpoint \u00b6 \n The endpoint that matched the request.  This in combination with\n view_args  can be used to reconstruct the same or a\nmodified URL.  If an exception happened when matching, this will\nbe  None . \n \n\n \n \n get_json ( force=False ,  silent=False ,  cache=True ) \u00b6 \n Parses the incoming JSON request data and returns it.  By default\nthis function will return  None  if the mimetype is not\n application/json  but this can be overridden by the\n force  parameter. If parsing fails the\n on_json_loading_failed()  method on the request object will be\ninvoked. \n \n \n \n \n Parameters: \n force  \u2013 if set to  True  the mimetype is ignored. \n silent  \u2013 if set to  True  this method will fail silently\nand return  None . \n cache  \u2013 if set to  True  the parsed JSON data is remembered\non the request. \n \n \n \n \n \n \n\n \n \n is_json \u00b6 \n Indicates if this request is JSON or not.  By default a request\nis considered to include JSON data if the mimetype is\n application/json  or  application/*+json . \n \n New in version 0.11. \n \n \n\n \n \n json \u00b6 \n If the mimetype is  application/json  this will contain the\nparsed JSON data.  Otherwise this will be  None . \n The  get_json()  method should be used instead. \n \n\n \n \n max_content_length \u00b6 \n Read-only view of the  MAX_CONTENT_LENGTH  config key. \n \n\n \n \n module \u00b6 \n The name of the current module if the request was dispatched\nto an actual module.  This is deprecated functionality, use blueprints\ninstead. \n \n\n \n \n on_json_loading_failed ( e ) \u00b6 \n Called if decoding of the JSON data failed.  The return value of\nthis method is used by  get_json()  when an error occurred.  The\ndefault implementation just raises a  BadRequest  exception. \n \n Changed in version 0.10:  Removed buggy previous behavior of generating a random JSON\nresponse.  If you want that behavior back you can trivially\nadd it by subclassing. \n \n \n New in version 0.8. \n \n \n\n \n \n routing_exception  = None \u00b6 \n If matching the URL failed, this is the exception that will be\nraised / was raised as part of the request handling.  This is\nusually a  NotFound  exception or\nsomething similar. \n \n\n \n \n url_rule  = None \u00b6 \n The internal URL rule that matched the request.  This can be\nuseful to inspect which methods are allowed for the URL from\na before/after handler ( request.url_rule.methods ) etc. \n \n New in version 0.6. \n \n \n\n \n \n view_args  = None \u00b6 \n A dict of view arguments that matched the request.  If an exception\nhappened when matching, this will be  None . \n \n\n \n\n \n \n class  flask. request \u00b6 \n To access incoming request data, you can use the global  request \nobject.  Flask parses incoming request data for you and gives you\naccess to it through that global object.  Internally Flask makes\nsure that you always get the correct data for the active thread if you\nare in a multithreaded environment. \n This is a proxy.  See  Notes On Proxies  for more information. \n The request object is an instance of a  Request \nsubclass and provides all of the attributes Werkzeug defines.  This\njust shows a quick overview of the most important ones. \n \n\n \n \n Response Objects \u00b6 \n \n \n class  flask. Response ( response=None ,  status=None ,  headers=None ,  mimetype=None ,  content_type=None ,  direct_passthrough=False ) \u00b6 \n The response object that is used by default in Flask.  Works like the\nresponse object from Werkzeug but is set to have an HTML mimetype by\ndefault.  Quite often you don\u2019t have to create this object yourself because\n make_response()  will take care of that for you. \n If you want to replace the response object used you can subclass this and\nset  response_class  to your subclass. \n \n \n headers \u00b6 \n A  Headers  object representing the response headers. \n \n\n \n \n status \u00b6 \n A string with a response status. \n \n\n \n \n status_code \u00b6 \n The response status as integer. \n \n\n \n \n data \u00b6 \n A descriptor that calls  get_data()  and  set_data() .  This\nshould not be used and will eventually get deprecated. \n \n\n \n \n mimetype \u00b6 \n The mimetype (content type without charset etc.) \n \n\n \n \n set_cookie ( key ,  value='' ,  max_age=None ,  expires=None ,  path='/' ,  domain=None ,  secure=False ,  httponly=False ,  samesite=None ) \u00b6 \n Sets a cookie. The parameters are the same as in the cookie  Morsel \nobject in the Python standard library but it accepts unicode data, too. \n A warning is raised if the size of the cookie header exceeds\n max_cookie_size , but the header will still be set. \n \n \n \n \n Parameters: \n key  \u2013 the key (name) of the cookie to be set. \n value  \u2013 the value of the cookie. \n max_age  \u2013 should be a number of seconds, or  None  (default) if\nthe cookie should last only as long as the client\u2019s\nbrowser session. \n expires  \u2013 should be a  datetime  object or UNIX timestamp. \n path  \u2013 limits the cookie to a given path, per default it will\nspan the whole domain. \n domain  \u2013 if you want to set a cross-domain cookie.  For example,\n domain=\".example.com\"  will set a cookie that is\nreadable by the domain  www.example.com ,\n foo.example.com  etc.  Otherwise, a cookie will only\nbe readable by the domain that set it. \n secure  \u2013 If  True , the cookie will only be available via HTTPS \n httponly  \u2013 disallow JavaScript to access the cookie.  This is an\nextension to the cookie standard and probably not\nsupported by all browsers. \n samesite  \u2013 Limits the scope of the cookie such that it will only\nbe attached to requests if those requests are\n\u201csame-site\u201d. \n \n \n \n \n \n \n\n \n\n \n \n Sessions \u00b6 \n If you have the  Flask.secret_key  set you can use sessions in Flask\napplications.  A session basically makes it possible to remember\ninformation from one request to another.  The way Flask does this is by\nusing a signed cookie.  So the user can look at the session contents, but\nnot modify it unless they know the secret key, so make sure to set that\nto something complex and unguessable. \n To access the current session you can use the  session  object: \n \n \n class  flask. session \u00b6 \n The session object works pretty much like an ordinary dict, with the\ndifference that it keeps track on modifications. \n This is a proxy.  See  Notes On Proxies  for more information. \n The following attributes are interesting: \n \n \n new \u00b6 \n True  if the session is new,  False  otherwise. \n \n\n \n \n modified \u00b6 \n True  if the session object detected a modification.  Be advised\nthat modifications on mutable structures are not picked up\nautomatically, in that situation you have to explicitly set the\nattribute to  True  yourself.  Here an example: \n # this change is not picked up because a mutable object (here \n # a list) is changed. \n session [ 'objects' ] . append ( 42 ) \n # so mark it as modified yourself \n session . modified   =   True \n \n \n \n\n \n \n permanent \u00b6 \n If set to  True  the session lives for\n permanent_session_lifetime  seconds.  The\ndefault is 31 days.  If set to  False  (which is the default) the\nsession will be deleted when the user closes the browser. \n \n\n \n\n \n \n Session Interface \u00b6 \n \n New in version 0.8. \n \n The session interface provides a simple way to replace the session\nimplementation that Flask is using. \n \n \n class  flask.sessions. SessionInterface \u00b6 \n The basic interface you have to implement in order to replace the\ndefault session interface which uses werkzeug\u2019s securecookie\nimplementation.  The only methods you have to implement are\n open_session()  and  save_session() , the others have\nuseful defaults which you don\u2019t need to change. \n The session object returned by the  open_session()  method has to\nprovide a dictionary like interface plus the properties and methods\nfrom the  SessionMixin .  We recommend just subclassing a dict\nand adding that mixin: \n class   Session ( dict ,   SessionMixin ): \n     pass \n \n \n If  open_session()  returns  None  Flask will call into\n make_null_session()  to create a session that acts as replacement\nif the session support cannot work because some requirement is not\nfulfilled.  The default  NullSession  class that is created\nwill complain that the secret key was not set. \n To replace the session interface on an application all you have to do\nis to assign  flask.Flask.session_interface : \n app   =   Flask ( __name__ ) \n app . session_interface   =   MySessionInterface () \n \n \n \n New in version 0.8. \n \n \n \n get_cookie_domain ( app ) \u00b6 \n Helpful helper method that returns the cookie domain that should\nbe used for the session cookie if session cookies are used. \n \n\n \n \n get_cookie_httponly ( app ) \u00b6 \n Returns True if the session cookie should be httponly.  This\ncurrently just returns the value of the  SESSION_COOKIE_HTTPONLY \nconfig var. \n \n\n \n \n get_cookie_path ( app ) \u00b6 \n Returns the path for which the cookie should be valid.  The\ndefault implementation uses the value from the  SESSION_COOKIE_PATH \nconfig var if it\u2019s set, and falls back to  APPLICATION_ROOT  or\nuses  /  if it\u2019s  None . \n \n\n \n \n get_cookie_secure ( app ) \u00b6 \n Returns True if the cookie should be secure.  This currently\njust returns the value of the  SESSION_COOKIE_SECURE  setting. \n \n\n \n \n get_expiration_time ( app ,  session ) \u00b6 \n A helper method that returns an expiration date for the session\nor  None  if the session is linked to the browser session.  The\ndefault implementation returns now + the permanent session\nlifetime configured on the application. \n \n\n \n \n is_null_session ( obj ) \u00b6 \n Checks if a given object is a null session.  Null sessions are\nnot asked to be saved. \n This checks if the object is an instance of  null_session_class \nby default. \n \n\n \n \n make_null_session ( app ) \u00b6 \n Creates a null session which acts as a replacement object if the\nreal session support could not be loaded due to a configuration\nerror.  This mainly aids the user experience because the job of the\nnull session is to still support lookup without complaining but\nmodifications are answered with a helpful error message of what\nfailed. \n This creates an instance of  null_session_class  by default. \n \n\n \n \n null_session_class \u00b6 \n make_null_session()  will look here for the class that should\nbe created when a null session is requested.  Likewise the\n is_null_session()  method will perform a typecheck against\nthis type. \n alias of  NullSession \n \n\n \n \n open_session ( app ,  request ) \u00b6 \n This method has to be implemented and must either return  None \nin case the loading failed because of a configuration error or an\ninstance of a session object which implements a dictionary like\ninterface + the methods and attributes on  SessionMixin . \n \n\n \n \n pickle_based  = False \u00b6 \n A flag that indicates if the session interface is pickle based.\nThis can be used by Flask extensions to make a decision in regards\nto how to deal with the session object. \n \n New in version 0.10. \n \n \n\n \n \n save_session ( app ,  session ,  response ) \u00b6 \n This is called for actual sessions returned by  open_session() \nat the end of the request.  This is still called during a request\ncontext so if you absolutely need access to the request you can do\nthat. \n \n\n \n \n should_set_cookie ( app ,  session ) \u00b6 \n Indicates whether a cookie should be set now or not.  This is\nused by session backends to figure out if they should emit a\nset-cookie header or not.  The default behavior is controlled by\nthe  SESSION_REFRESH_EACH_REQUEST  config variable.  If\nit\u2019s set to  False  then a cookie is only set if the session is\nmodified, if set to  True  it\u2019s always set if the session is\npermanent. \n This check is usually skipped if sessions get deleted. \n \n New in version 0.11. \n \n \n\n \n\n \n \n class  flask.sessions. SecureCookieSessionInterface \u00b6 \n The default session interface that stores sessions in signed cookies\nthrough the  itsdangerous  module. \n \n \n static  digest_method ( ) \u00b6 \n the hash function to use for the signature.  The default is sha1 \n \n\n \n \n key_derivation  = 'hmac' \u00b6 \n the name of the itsdangerous supported key derivation.  The default\nis hmac. \n \n\n \n \n salt  = 'cookie-session' \u00b6 \n the salt that should be applied on top of the secret key for the\nsigning of cookie based sessions. \n \n\n \n \n serializer  = <flask.sessions.TaggedJSONSerializer object> \u00b6 \n A python serializer for the payload.  The default is a compact\nJSON derived serializer with support for some extra Python types\nsuch as datetime objects or tuples. \n \n\n \n \n session_class \u00b6 \n alias of  SecureCookieSession \n \n\n \n\n \n \n class  flask.sessions. SecureCookieSession ( initial=None ) \u00b6 \n Base class for sessions based on signed cookies. \n \n\n \n \n class  flask.sessions. NullSession ( initial=None ) \u00b6 \n Class used to generate nicer error messages if sessions are not\navailable.  Will still allow read-only access to the empty session\nbut fail on setting. \n \n\n \n \n class  flask.sessions. SessionMixin \u00b6 \n Expands a basic dictionary with an accessors that are expected\nby Flask extensions and users for the session. \n \n \n modified  = True \u00b6 \n for some backends this will always be  True , but some backends will\ndefault this to false and detect changes in the dictionary for as\nlong as changes do not happen on mutable structures in the session.\nThe default mixin implementation just hardcodes  True  in. \n \n\n \n \n new  = False \u00b6 \n some session backends can tell you if a session is new, but that is\nnot necessarily guaranteed.  Use with caution.  The default mixin\nimplementation just hardcodes  False  in. \n \n\n \n \n permanent \u00b6 \n this reflects the  '_permanent'  key in the dict. \n \n\n \n\n \n \n flask.sessions. session_json_serializer  = <flask.sessions.TaggedJSONSerializer object> \u00b6 \n A customized JSON serializer that supports a few extra types that\nwe take for granted when serializing (tuples, markup objects, datetime). \n This object provides dumping and loading methods similar to simplejson\nbut it also tags certain builtin Python objects that commonly appear in\nsessions.  Currently the following extended values are supported in\nthe JSON it dumps: \n \n Markup  objects \n UUID  objects \n datetime  objects \n tuple s \n \n \n\n \n Notice \n The  PERMANENT_SESSION_LIFETIME  config key can also be an integer\nstarting with Flask 0.8.  Either catch this down yourself or use\nthe  permanent_session_lifetime  attribute on the\napp which converts the result to an integer automatically. \n \n \n \n Test Client \u00b6 \n \n \n class  flask.testing. FlaskClient ( *args ,  **kwargs ) \u00b6 \n Works like a regular Werkzeug test client but has some knowledge about\nhow Flask works to defer the cleanup of the request context stack to the\nend of a  with  body when used in a  with  statement.  For general\ninformation about how to use this class refer to\n werkzeug.test.Client . \n \n Changed in version 0.12:  app.test_client()  includes preset default environment, which can be\nset after instantiation of the  app.test_client()  object in\n client.environ_base . \n \n Basic usage is outlined in the  Testing Flask Applications  chapter. \n \n \n session_transaction ( *args ,  **kwargs ) \u00b6 \n When used in combination with a  with  statement this opens a\nsession transaction.  This can be used to modify the session that\nthe test client uses.  Once the  with  block is left the session is\nstored back. \n with   client . session_transaction ()   as   session : \n     session [ 'value' ]   =   42 \n \n \n Internally this is implemented by going through a temporary test\nrequest context and since session handling could depend on\nrequest variables this function accepts the same arguments as\n test_request_context()  which are directly\npassed through. \n \n\n \n\n \n \n Application Globals \u00b6 \n To share data that is valid for one request only from one function to\nanother, a global variable is not good enough because it would break in\nthreaded environments.  Flask provides you with a special object that\nensures it is only valid for the active request and that will return\ndifferent values for each request.  In a nutshell: it does the right\nthing, like it does for  request  and  session . \n \n \n flask. g \u00b6 \n Just store on this whatever you want.  For example a database\nconnection or the user that is currently logged in. \n Starting with Flask 0.10 this is stored on the application context and\nno longer on the request context which means it becomes available if\nonly the application context is bound and not yet a request.  This\nis especially useful when combined with the  Faking Resources and Context \npattern for testing. \n Additionally as of 0.10 you can use the  get()  method to\nget an attribute or  None  (or the second argument) if it\u2019s not set.\nThese two usages are now equivalent: \n user   =   getattr ( flask . g ,   'user' ,   None ) \n user   =   flask . g . get ( 'user' ,   None ) \n \n \n It\u2019s now also possible to use the  in  operator on it to see if an\nattribute is defined and it yields all keys on iteration. \n As of 0.11 you can use  pop()  and  setdefault()  in the same\nway you would use them on a dictionary. \n This is a proxy.  See  Notes On Proxies  for more information. \n \n\n \n \n Useful Functions and Classes \u00b6 \n \n \n flask. current_app \u00b6 \n Points to the application handling the request.  This is useful for\nextensions that want to support multiple applications running side\nby side.  This is powered by the application context and not by the\nrequest context, so you can change the value of this proxy by\nusing the  app_context()  method. \n This is a proxy.  See  Notes On Proxies  for more information. \n \n\n \n \n flask. has_request_context ( ) \u00b6 \n If you have code that wants to test if a request context is there or\nnot this function can be used.  For instance, you may want to take advantage\nof request information if the request object is available, but fail\nsilently if it is unavailable. \n class   User ( db . Model ): \n\n     def   __init__ ( self ,   username ,   remote_addr = None ): \n         self . username   =   username \n         if   remote_addr   is   None   and   has_request_context (): \n             remote_addr   =   request . remote_addr \n         self . remote_addr   =   remote_addr \n \n \n Alternatively you can also just test any of the context bound objects\n(such as  request  or  g  for truthness): \n class   User ( db . Model ): \n\n     def   __init__ ( self ,   username ,   remote_addr = None ): \n         self . username   =   username \n         if   remote_addr   is   None   and   request : \n             remote_addr   =   request . remote_addr \n         self . remote_addr   =   remote_addr \n \n \n \n New in version 0.7. \n \n \n\n \n \n flask. copy_current_request_context ( f ) \u00b6 \n A helper function that decorates a function to retain the current\nrequest context.  This is useful when working with greenlets.  The moment\nthe function is decorated a copy of the request context is created and\nthen pushed when the function is called. \n Example: \n import   gevent \n from   flask   import   copy_current_request_context \n\n @app . route ( '/' ) \n def   index (): \n     @copy_current_request_context \n     def   do_some_work (): \n         # do some work here, it can access flask.request like you \n         # would otherwise in the view function. \n         ... \n     gevent . spawn ( do_some_work ) \n     return   'Regular response' \n \n \n \n New in version 0.10. \n \n \n\n \n \n flask. has_app_context ( ) \u00b6 \n Works like  has_request_context()  but for the application\ncontext.  You can also just do a boolean check on the\n current_app  object instead. \n \n New in version 0.9. \n \n \n\n \n \n flask. url_for ( endpoint ,  **values ) \u00b6 \n Generates a URL to the given endpoint with the method provided. \n Variable arguments that are unknown to the target endpoint are appended\nto the generated URL as query arguments.  If the value of a query argument\nis  None , the whole pair is skipped.  In case blueprints are active\nyou can shortcut references to the same blueprint by prefixing the\nlocal endpoint with a dot ( . ). \n This will reference the index function local to the current blueprint: \n url_for ( '.index' ) \n \n \n For more information, head over to the  Quickstart . \n To integrate applications,  Flask  has a hook to intercept URL build\nerrors through  Flask.url_build_error_handlers .  The  url_for \nfunction results in a  BuildError  when the current\napp does not have a URL for the given endpoint and values.  When it does, the\n current_app  calls its  url_build_error_handlers  if\nit is not  None , which can return a string to use as the result of\n url_for  (instead of  url_for \u2019s default to raise the\n BuildError  exception) or re-raise the exception.\nAn example: \n def   external_url_handler ( error ,   endpoint ,   values ): \n     \"Looks up an external URL when `url_for` cannot build a URL.\" \n     # This is an example of hooking the build_error_handler. \n     # Here, lookup_url is some utility function you've built \n     # which looks up the endpoint in some external URL registry. \n     url   =   lookup_url ( endpoint ,   ** values ) \n     if   url   is   None : \n         # External lookup did not have a URL. \n         # Re-raise the BuildError, in context of original traceback. \n         exc_type ,   exc_value ,   tb   =   sys . exc_info () \n         if   exc_value   is   error : \n             raise   exc_type ,   exc_value ,   tb \n         else : \n             raise   error \n     # url_for will use this result, instead of raising BuildError. \n     return   url \n\n app . url_build_error_handlers . append ( external_url_handler ) \n \n \n Here,  error  is the instance of  BuildError , and\n endpoint  and  values  are the arguments passed into  url_for .  Note\nthat this is for building URLs outside the current application, and not for\nhandling 404 NotFound errors. \n \n New in version 0.10:  The  _scheme  parameter was added. \n \n \n New in version 0.9:  The  _anchor  and  _method  parameters were added. \n \n \n New in version 0.9:  Calls  Flask.handle_build_error()  on\n BuildError . \n \n \n \n \n \n Parameters: \n endpoint  \u2013 the endpoint of the URL (name of the function) \n values  \u2013 the variable arguments of the URL rule \n _external  \u2013 if set to  True , an absolute URL is generated. Server\naddress can be changed via  SERVER_NAME  configuration variable which\ndefaults to  localhost . \n _scheme  \u2013 a string specifying the desired URL scheme. The  _external \nparameter must be set to  True  or a  ValueError  is raised. The default\nbehavior uses the same scheme as the current request, or\n PREFERRED_URL_SCHEME  from the  app configuration  if no\nrequest context is available. As of Werkzeug 0.10, this also can be set\nto an empty string to build protocol-relative URLs. \n _anchor  \u2013 if provided this is added as anchor to the URL. \n _method  \u2013 if provided this explicitly specifies an HTTP method. \n \n \n \n \n \n \n\n \n \n flask. abort ( status ,  *args ,  **kwargs ) \u00b6 \n Raises an  HTTPException  for the given status code or WSGI\napplication: \n abort ( 404 )    # 404 Not Found \n abort ( Response ( 'Hello World' )) \n \n \n Can be passed a WSGI application or a status code.  If a status code is\ngiven it\u2019s looked up in the list of exceptions and will raise that\nexception, if passed a WSGI application it will wrap it in a proxy WSGI\nexception and raise that: \n abort ( 404 ) \n abort ( Response ( 'Hello World' )) \n \n \n \n\n \n \n flask. redirect ( location ,  code=302 ,  Response=None ) \u00b6 \n Returns a response object (a WSGI application) that, if called,\nredirects the client to the target location.  Supported codes are 301,\n302, 303, 305, and 307.  300 is not supported because it\u2019s not a real\nredirect and 304 because it\u2019s the answer for a request with a request\nwith defined If-Modified-Since headers. \n \n New in version 0.6:  The location can now be a unicode string that is encoded using\nthe  iri_to_uri()  function. \n \n \n New in version 0.10:  The class used for the Response object can now be passed in. \n \n \n \n \n \n Parameters: \n location  \u2013 the location the response should redirect to. \n code  \u2013 the redirect status code. defaults to 302. \n Response  ( class ) \u2013 a Response class to use when instantiating a\nresponse. The default is  werkzeug.wrappers.Response  if\nunspecified. \n \n \n \n \n \n \n\n \n \n flask. make_response ( *args ) \u00b6 \n Sometimes it is necessary to set additional headers in a view.  Because\nviews do not have to return response objects but can return a value that\nis converted into a response object by Flask itself, it becomes tricky to\nadd headers to it.  This function can be called instead of using a return\nand you will get a response object which you can use to attach headers. \n If view looked like this and you want to add a new header: \n def   index (): \n     return   render_template ( 'index.html' ,   foo = 42 ) \n \n \n You can now do something like this: \n def   index (): \n     response   =   make_response ( render_template ( 'index.html' ,   foo = 42 )) \n     response . headers [ 'X-Parachutes' ]   =   'parachutes are cool' \n     return   response \n \n \n This function accepts the very same arguments you can return from a\nview function.  This for example creates a response with a 404 error\ncode: \n response   =   make_response ( render_template ( 'not_found.html' ),   404 ) \n \n \n The other use case of this function is to force the return value of a\nview function into a response which is helpful with view\ndecorators: \n response   =   make_response ( view_function ()) \n response . headers [ 'X-Parachutes' ]   =   'parachutes are cool' \n \n \n Internally this function does the following things: \n \n if no arguments are passed, it creates a new response argument \n if one argument is passed,  flask.Flask.make_response() \nis invoked with it. \n if more than one argument is passed, the arguments are passed\nto the  flask.Flask.make_response()  function as tuple. \n \n \n New in version 0.6. \n \n \n\n \n \n flask. after_this_request ( f ) \u00b6 \n Executes a function after this request.  This is useful to modify\nresponse objects.  The function is passed the response object and has\nto return the same or a new one. \n Example: \n @app . route ( '/' ) \n def   index (): \n     @after_this_request \n     def   add_header ( response ): \n         response . headers [ 'X-Foo' ]   =   'Parachute' \n         return   response \n     return   'Hello World!' \n \n \n This is more useful if a function other than the view function wants to\nmodify a response.  For instance think of a decorator that wants to add\nsome headers without converting the return value into a response object. \n \n New in version 0.9. \n \n \n\n \n \n flask. send_file ( filename_or_fp ,  mimetype=None ,  as_attachment=False ,  attachment_filename=None ,  add_etags=True ,  cache_timeout=None ,  conditional=False ,  last_modified=None ) \u00b6 \n Sends the contents of a file to the client.  This will use the\nmost efficient method available and configured.  By default it will\ntry to use the WSGI server\u2019s file_wrapper support.  Alternatively\nyou can set the application\u2019s  use_x_sendfile  attribute\nto  True  to directly emit an  X-Sendfile  header.  This however\nrequires support of the underlying webserver for  X-Sendfile . \n By default it will try to guess the mimetype for you, but you can\nalso explicitly provide one.  For extra security you probably want\nto send certain files as attachment (HTML for instance).  The mimetype\nguessing requires a  filename  or an  attachment_filename  to be\nprovided. \n ETags will also be attached automatically if a  filename  is provided. You\ncan turn this off by setting  add_etags=False . \n If  conditional=True  and  filename  is provided, this method will try to\nupgrade the response stream to support range requests.  This will allow\nthe request to be answered with partial content response. \n Please never pass filenames to this function from user sources;\nyou should use  send_from_directory()  instead. \n \n New in version 0.2. \n \n \n New in version 0.5:  The  add_etags ,  cache_timeout  and  conditional  parameters were\nadded.  The default behavior is now to attach etags. \n \n \n Changed in version 0.7:  mimetype guessing and etag support for file objects was\ndeprecated because it was unreliable.  Pass a filename if you are\nable to, otherwise attach an etag yourself.  This functionality\nwill be removed in Flask 1.0 \n \n \n Changed in version 0.9:  cache_timeout pulls its default from application config, when None. \n \n \n Changed in version 0.12:  The filename is no longer automatically inferred from file objects. If\nyou want to use automatic mimetype and etag support, pass a filepath via\n filename_or_fp  or  attachment_filename . \n \n \n Changed in version 0.12:  The  attachment_filename  is preferred over  filename  for MIME-type\ndetection. \n \n \n \n \n \n Parameters: \n filename_or_fp  \u2013 the filename of the file to send in  latin-1 .\nThis is relative to the  root_path \nif a relative path is specified.\nAlternatively a file object might be provided in\nwhich case  X-Sendfile  might not work and fall\nback to the traditional method.  Make sure that the\nfile pointer is positioned at the start of data to\nsend before calling  send_file() . \n mimetype  \u2013 the mimetype of the file if provided. If a file path is\ngiven, auto detection happens as fallback, otherwise an\nerror will be raised. \n as_attachment  \u2013 set to  True  if you want to send this file with\na  Content-Disposition:   attachment  header. \n attachment_filename  \u2013 the filename for the attachment if it\ndiffers from the file\u2019s filename. \n add_etags  \u2013 set to  False  to disable attaching of etags. \n conditional  \u2013 set to  True  to enable conditional responses. \n cache_timeout  \u2013 the timeout in seconds for the headers. When  None \n(default), this value is set by\n get_send_file_max_age()  of\n current_app . \n last_modified  \u2013 set the  Last-Modified  header to this value,\na  datetime  or timestamp.\nIf a file was passed, this overrides its mtime. \n \n \n \n \n \n \n\n \n \n flask. send_from_directory ( directory ,  filename ,  **options ) \u00b6 \n Send a file from a given directory with  send_file() .  This\nis a secure way to quickly expose static files from an upload folder\nor something similar. \n Example usage: \n @app . route ( '/uploads/<path:filename>' ) \n def   download_file ( filename ): \n     return   send_from_directory ( app . config [ 'UPLOAD_FOLDER' ], \n                                filename ,   as_attachment = True ) \n \n \n \n Sending files and Performance \n It is strongly recommended to activate either  X-Sendfile  support in\nyour webserver or (if no authentication happens) to tell the webserver\nto serve files for the given path on its own without calling into the\nweb application for improved performance. \n \n \n New in version 0.5. \n \n \n \n \n \n Parameters: \n directory  \u2013 the directory where all the files are stored. \n filename  \u2013 the filename relative to that directory to\ndownload. \n options  \u2013 optional keyword arguments that are directly\nforwarded to  send_file() . \n \n \n \n \n \n \n\n \n \n flask. safe_join ( directory ,  *pathnames ) \u00b6 \n Safely join  directory  and zero or more untrusted  pathnames \ncomponents. \n Example usage: \n @app . route ( '/wiki/<path:filename>' ) \n def   wiki_page ( filename ): \n     filename   =   safe_join ( app . config [ 'WIKI_FOLDER' ],   filename ) \n     with   open ( filename ,   'rb' )   as   fd : \n         content   =   fd . read ()    # Read and process the file content... \n \n \n \n \n \n \n Parameters: \n directory  \u2013 the trusted base directory. \n pathnames  \u2013 the untrusted pathnames relative to that directory. \n \n \n \n Raises: NotFound  if one or more passed\npaths fall out of its boundaries. \n \n \n \n \n \n\n \n \n flask. escape ( s )  \u2192 markup \u00b6 \n Convert the characters &, <, >, \u2018, and \u201d in string s to HTML-safe\nsequences.  Use this if you need to display text that might contain\nsuch characters in HTML.  Marks return value as markup string. \n \n\n \n \n class  flask. Markup \u00b6 \n Marks a string as being safe for inclusion in HTML/XML output without\nneeding to be escaped.  This implements the  __html__  interface a couple\nof frameworks and web applications use.   Markup  is a direct\nsubclass of  unicode  and provides all the methods of  unicode  just that\nit escapes arguments passed and always returns  Markup . \n The  escape  function returns markup objects so that double escaping can\u2019t\nhappen. \n The constructor of the  Markup  class can be used for three\ndifferent things:  When passed an unicode object it\u2019s assumed to be safe,\nwhen passed an object with an HTML representation (has an  __html__ \nmethod) that representation is used, otherwise the object passed is\nconverted into a unicode string and then assumed to be safe: \n >>>  Markup ( \"Hello <em>World</em>!\" ) \n Markup(u'Hello <em>World</em>!') \n >>>  class   Foo ( object ): \n ...    def   __html__ ( self ): \n ...     return   '<a href=\"#\">foo</a>' \n ... \n >>>  Markup ( Foo ()) \n Markup(u'<a href=\"#\">foo</a>') \n \n \n If you want object passed being always treated as unsafe you can use the\n escape()  classmethod to create a  Markup  object: \n >>>  Markup . escape ( \"Hello <em>World</em>!\" ) \n Markup(u'Hello &lt;em&gt;World&lt;/em&gt;!') \n \n \n Operations on a markup string are markup aware which means that all\narguments are passed through the  escape()  function: \n >>>  em   =   Markup ( \"<em> %s </em>\" ) \n >>>  em   %   \"foo & bar\" \n Markup(u'<em>foo &amp; bar</em>') \n >>>  strong   =   Markup ( \"<strong> %(text)s </strong>\" ) \n >>>  strong   %   { 'text' :   '<blink>hacker here</blink>' } \n Markup(u'<strong>&lt;blink&gt;hacker here&lt;/blink&gt;</strong>') \n >>>  Markup ( \"<em>Hello</em> \" )   +   \"<foo>\" \n Markup(u'<em>Hello</em> &lt;foo&gt;') \n \n \n \n \n classmethod  escape ( s ) \u00b6 \n Escape the string.  Works like  escape()  with the difference\nthat for subclasses of  Markup  this function would return the\ncorrect subclass. \n \n\n \n \n striptags ( ) \u00b6 \n Unescape markup into an text_type string and strip all tags.  This\nalso resolves known HTML4 and XHTML entities.  Whitespace is\nnormalized to one: \n >>>  Markup ( \"Main &raquo;  <em>About</em>\" ) . striptags () \n u'Main \\xbb About' \n \n \n \n\n \n \n unescape ( ) \u00b6 \n Unescape markup again into an text_type string.  This also resolves\nknown HTML4 and XHTML entities: \n >>>  Markup ( \"Main &raquo; <em>About</em>\" ) . unescape () \n u'Main \\xbb <em>About</em>' \n \n \n \n\n \n\n \n \n Message Flashing \u00b6 \n \n \n flask. flash ( message ,  category='message' ) \u00b6 \n Flashes a message to the next request.  In order to remove the\nflashed message from the session and to display it to the user,\nthe template has to call  get_flashed_messages() . \n \n Changed in version 0.3:  category  parameter added. \n \n \n \n \n \n Parameters: \n message  \u2013 the message to be flashed. \n category  \u2013 the category for the message.  The following values\nare recommended:  'message'  for any kind of message,\n 'error'  for errors,  'info'  for information\nmessages and  'warning'  for warnings.  However any\nkind of string can be used as category. \n \n \n \n \n \n \n\n \n \n flask. get_flashed_messages ( with_categories=False ,  category_filter=[] ) \u00b6 \n Pulls all flashed messages from the session and returns them.\nFurther calls in the same request to the function will return\nthe same messages.  By default just the messages are returned,\nbut when  with_categories  is set to  True , the return value will\nbe a list of tuples in the form  (category,   message)  instead. \n Filter the flashed messages to one or more categories by providing those\ncategories in  category_filter .  This allows rendering categories in\nseparate html blocks.  The  with_categories  and  category_filter \narguments are distinct: \n \n with_categories  controls whether categories are returned with message\ntext ( True  gives a tuple, where  False  gives just the message text). \n category_filter  filters the messages down to only those matching the\nprovided categories. \n \n See  Message Flashing  for examples. \n \n Changed in version 0.3:  with_categories  parameter added. \n \n \n Changed in version 0.9:  category_filter  parameter added. \n \n \n \n \n \n Parameters: \n with_categories  \u2013 set to  True  to also receive categories. \n category_filter  \u2013 whitelist of categories to limit return values \n \n \n \n \n \n \n\n \n \n JSON Support \u00b6 \n Flask uses  simplejson  for the JSON implementation.  Since simplejson\nis provided by both the standard library as well as extension, Flask will\ntry simplejson first and then fall back to the stdlib json module.  On top\nof that it will delegate access to the current application\u2019s JSON encoders\nand decoders for easier customization. \n So for starters instead of doing: \n try : \n     import   simplejson   as   json \n except   ImportError : \n     import   json \n \n \n You can instead just do this: \n from   flask   import   json \n \n \n For usage examples, read the  json  documentation in the standard\nlibrary.  The following extensions are by default applied to the stdlib\u2019s\nJSON module: \n \n datetime  objects are serialized as  RFC 822  strings. \n Any object with an  __html__  method (like  Markup )\nwill have that method called and then the return value is serialized\nas string. \n \n The  htmlsafe_dumps()  function of this json module is also available\nas filter called  |tojson  in Jinja2.  Note that inside  script \ntags no escaping must take place, so make sure to disable escaping\nwith  |safe  if you intend to use it inside  script  tags unless\nyou are using Flask 0.10 which implies that: \n < script   type = text/javascript > \n     doSomethingWith ( {{   user.username | tojson | safe   }} ); \n </ script > \n \n \n \n Auto-Sort JSON Keys \n The configuration variable  JSON_SORT_KEYS  ( Configuration Handling ) can be\nset to false to stop Flask from auto-sorting keys.  By default sorting\nis enabled and outside of the app context sorting is turned on. \n Notice that disabling key sorting can cause issues when using content\nbased HTTP caches and Python\u2019s hash randomization feature. \n \n \n \n flask.json. jsonify ( *args ,  **kwargs ) \u00b6 \n This function wraps  dumps()  to add a few enhancements that make\nlife easier.  It turns the JSON output into a  Response \nobject with the  application/json  mimetype.  For convenience, it\nalso converts multiple arguments into an array or multiple keyword arguments\ninto a dict.  This means that both  jsonify(1,2,3)  and\n jsonify([1,2,3])  serialize to  [1,2,3] . \n For clarity, the JSON serialization behavior has the following differences\nfrom  dumps() : \n \n Single argument: Passed straight through to  dumps() . \n Multiple arguments: Converted to an array before being passed to\n dumps() . \n Multiple keyword arguments: Converted to a dict before being passed to\n dumps() . \n Both args and kwargs: Behavior undefined and will throw an exception. \n \n Example usage: \n from   flask   import   jsonify \n\n @app . route ( '/_get_current_user' ) \n def   get_current_user (): \n     return   jsonify ( username = g . user . username , \n                    email = g . user . email , \n                    id = g . user . id ) \n \n \n This will send a JSON response like this to the browser: \n { \n     \"username\" :   \"admin\" , \n     \"email\" :   \"admin@localhost\" , \n     \"id\" :   42 \n } \n \n \n \n Changed in version 0.11:  Added support for serializing top-level arrays. This introduces a\nsecurity risk in ancient browsers. See  JSON Security  for details. \n \n This function\u2019s response will be pretty printed if it was not requested\nwith  X-Requested-With:   XMLHttpRequest  to simplify debugging unless\nthe  JSONIFY_PRETTYPRINT_REGULAR  config parameter is set to false.\nCompressed (not pretty) formatting currently means no indents and no\nspaces after separators. \n \n New in version 0.2. \n \n \n\n \n \n flask.json. dumps ( obj ,  **kwargs ) \u00b6 \n Serialize  obj  to a JSON formatted  str  by using the application\u2019s\nconfigured encoder ( json_encoder ) if there is an\napplication on the stack. \n This function can return  unicode  strings or ascii-only bytestrings by\ndefault which coerce into unicode strings automatically.  That behavior by\ndefault is controlled by the  JSON_AS_ASCII  configuration variable\nand can be overridden by the simplejson  ensure_ascii  parameter. \n \n\n \n \n flask.json. dump ( obj ,  fp ,  **kwargs ) \u00b6 \n Like  dumps()  but writes into a file object. \n \n\n \n \n flask.json. loads ( s ,  **kwargs ) \u00b6 \n Unserialize a JSON object from a string  s  by using the application\u2019s\nconfigured decoder ( json_decoder ) if there is an\napplication on the stack. \n \n\n \n \n flask.json. load ( fp ,  **kwargs ) \u00b6 \n Like  loads()  but reads from a file object. \n \n\n \n \n class  flask.json. JSONEncoder ( skipkeys=False ,  ensure_ascii=True ,  check_circular=True ,  allow_nan=True ,  sort_keys=False ,  indent=None ,  separators=None ,  encoding='utf-8' ,  default=None ) \u00b6 \n The default Flask JSON encoder.  This one extends the default simplejson\nencoder by also supporting  datetime  objects,  UUID  as well as\n Markup  objects which are serialized as RFC 822 datetime strings (same\nas the HTTP date format).  In order to support more data types override the\n default()  method. \n \n \n default ( o ) \u00b6 \n Implement this method in a subclass such that it returns a\nserializable object for  o , or calls the base implementation (to\nraise a  TypeError ). \n For example, to support arbitrary iterators, you could implement\ndefault like this: \n def   default ( self ,   o ): \n     try : \n         iterable   =   iter ( o ) \n     except   TypeError : \n         pass \n     else : \n         return   list ( iterable ) \n     return   JSONEncoder . default ( self ,   o ) \n \n \n \n\n \n\n \n \n class  flask.json. JSONDecoder ( encoding=None ,  object_hook=None ,  parse_float=None ,  parse_int=None ,  parse_constant=None ,  strict=True ,  object_pairs_hook=None ) \u00b6 \n The default JSON decoder.  This one does not change the behavior from\nthe default simplejson decoder.  Consult the  json  documentation\nfor more information.  This decoder is not only used for the load\nfunctions of this module but also  Request . \n \n\n \n \n Template Rendering \u00b6 \n \n \n flask. render_template ( template_name_or_list ,  **context ) \u00b6 \n Renders a template from the template folder with the given\ncontext. \n \n \n \n \n Parameters: \n template_name_or_list  \u2013 the name of the template to be\nrendered, or an iterable with template names\nthe first one existing will be rendered \n context  \u2013 the variables that should be available in the\ncontext of the template. \n \n \n \n \n \n \n\n \n \n flask. render_template_string ( source ,  **context ) \u00b6 \n Renders a template from the given template source string\nwith the given context. Template variables will be autoescaped. \n \n \n \n \n Parameters: \n source  \u2013 the source code of the template to be\nrendered \n context  \u2013 the variables that should be available in the\ncontext of the template. \n \n \n \n \n \n \n\n \n \n flask. get_template_attribute ( template_name ,  attribute ) \u00b6 \n Loads a macro (or variable) a template exports.  This can be used to\ninvoke a macro from within Python code.  If you for example have a\ntemplate named  _cider.html  with the following contents: \n {%   macro   hello ( name )   %} Hello  {{   name   }} ! {%   endmacro   %} \n \n \n You can access this from Python code like this: \n hello   =   get_template_attribute ( '_cider.html' ,   'hello' ) \n return   hello ( 'World' ) \n \n \n \n New in version 0.2. \n \n \n \n \n \n Parameters: \n template_name  \u2013 the name of the template \n attribute  \u2013 the name of the variable of macro to access \n \n \n \n \n \n \n\n \n \n Configuration \u00b6 \n \n \n class  flask. Config ( root_path ,  defaults=None ) \u00b6 \n Works exactly like a dict but provides ways to fill it from files\nor special dictionaries.  There are two common patterns to populate the\nconfig. \n Either you can fill the config from a config file: \n app . config . from_pyfile ( 'yourconfig.cfg' ) \n \n \n Or alternatively you can define the configuration options in the\nmodule that calls  from_object()  or provide an import path to\na module that should be loaded.  It is also possible to tell it to\nuse the same module and with that provide the configuration values\njust before the call: \n DEBUG   =   True \n SECRET_KEY   =   'development key' \n app . config . from_object ( __name__ ) \n \n \n In both cases (loading from any Python file or loading from modules),\nonly uppercase keys are added to the config.  This makes it possible to use\nlowercase values in the config file for temporary values that are not added\nto the config or to define the config keys in the same file that implements\nthe application. \n Probably the most interesting way to load configurations is from an\nenvironment variable pointing to a file: \n app . config . from_envvar ( 'YOURAPPLICATION_SETTINGS' ) \n \n \n In this case before launching the application you have to set this\nenvironment variable to the file you want to use.  On Linux and OS X\nuse the export statement: \n export   YOURAPPLICATION_SETTINGS = '/path/to/config/file' \n \n \n On windows use  set  instead. \n \n \n \n \n Parameters: \n root_path  \u2013 path to which files are read relative from.  When the\nconfig object is created by the application, this is\nthe application\u2019s  root_path . \n defaults  \u2013 an optional dictionary of default values \n \n \n \n \n \n \n \n from_envvar ( variable_name ,  silent=False ) \u00b6 \n Loads a configuration from an environment variable pointing to\na configuration file.  This is basically just a shortcut with nicer\nerror messages for this line of code: \n app . config . from_pyfile ( os . environ [ 'YOURAPPLICATION_SETTINGS' ]) \n \n \n \n \n \n \n Parameters: \n variable_name  \u2013 name of the environment variable \n silent  \u2013 set to  True  if you want silent failure for missing\nfiles. \n \n \n \n Returns: bool.  True  if able to load config,  False  otherwise. \n \n \n \n \n \n\n \n \n from_json ( filename ,  silent=False ) \u00b6 \n Updates the values in the config from a JSON file. This function\nbehaves as if the JSON object was a dictionary and passed to the\n from_mapping()  function. \n \n \n \n \n Parameters: \n filename  \u2013 the filename of the JSON file.  This can either be an\nabsolute filename or a filename relative to the\nroot path. \n silent  \u2013 set to  True  if you want silent failure for missing\nfiles. \n \n \n \n \n \n \n New in version 0.11. \n \n \n\n \n \n from_mapping ( *mapping ,  **kwargs ) \u00b6 \n Updates the config like  update()  ignoring items with non-upper\nkeys. \n \n New in version 0.11. \n \n \n\n \n \n from_object ( obj ) \u00b6 \n Updates the values from the given object.  An object can be of one\nof the following two types: \n \n a string: in this case the object with that name will be imported \n an actual object reference: that object is used directly \n \n Objects are usually either modules or classes.  from_object() \nloads only the uppercase attributes of the module/class. A  dict \nobject will not work with  from_object()  because the keys of a\n dict  are not attributes of the  dict  class. \n Example of module-based configuration: \n app . config . from_object ( 'yourapplication.default_config' ) \n from   yourapplication   import   default_config \n app . config . from_object ( default_config ) \n \n \n You should not use this function to load the actual configuration but\nrather configuration defaults.  The actual config should be loaded\nwith  from_pyfile()  and ideally from a location not within the\npackage because the package might be installed system wide. \n See  Development / Production  for an example of class-based configuration\nusing  from_object() . \n \n \n \n \n Parameters: obj  \u2013 an import name or object \n \n \n \n \n\n \n \n from_pyfile ( filename ,  silent=False ) \u00b6 \n Updates the values in the config from a Python file.  This function\nbehaves as if the file was imported as module with the\n from_object()  function. \n \n \n \n \n Parameters: \n filename  \u2013 the filename of the config.  This can either be an\nabsolute filename or a filename relative to the\nroot path. \n silent  \u2013 set to  True  if you want silent failure for missing\nfiles. \n \n \n \n \n \n \n New in version 0.7:  silent  parameter. \n \n \n\n \n \n get_namespace ( namespace ,  lowercase=True ,  trim_namespace=True ) \u00b6 \n Returns a dictionary containing a subset of configuration options\nthat match the specified namespace/prefix. Example usage: \n app . config [ 'IMAGE_STORE_TYPE' ]   =   'fs' \n app . config [ 'IMAGE_STORE_PATH' ]   =   '/var/app/images' \n app . config [ 'IMAGE_STORE_BASE_URL' ]   =   'http://img.website.com' \n image_store_config   =   app . config . get_namespace ( 'IMAGE_STORE_' ) \n \n \n The resulting dictionary  image_store_config  would look like: \n { \n     'type' :   'fs' , \n     'path' :   '/var/app/images' , \n     'base_url' :   'http://img.website.com' \n } \n \n \n This is often useful when configuration options map directly to\nkeyword arguments in functions or class constructors. \n \n \n \n \n Parameters: \n namespace  \u2013 a configuration namespace \n lowercase  \u2013 a flag indicating if the keys of the resulting\ndictionary should be lowercase \n trim_namespace  \u2013 a flag indicating if the keys of the resulting\ndictionary should not include the namespace \n \n \n \n \n \n \n New in version 0.11. \n \n \n\n \n\n \n \n Extensions \u00b6 \n \n \n flask. ext \u00b6 \n This module acts as redirect import module to Flask extensions.  It was\nadded in 0.8 as the canonical way to import Flask extensions and makes\nit possible for us to have more flexibility in how we distribute\nextensions. \n If you want to use an extension named \u201cFlask-Foo\u201d you would import it\nfrom  ext  as follows: \n from   flask.ext   import   foo \n \n \n \n New in version 0.8. \n \n \n\n \n \n Stream Helpers \u00b6 \n \n \n flask. stream_with_context ( generator_or_function ) \u00b6 \n Request contexts disappear when the response is started on the server.\nThis is done for efficiency reasons and to make it less likely to encounter\nmemory leaks with badly written WSGI middlewares.  The downside is that if\nyou are using streamed responses, the generator cannot access request bound\ninformation any more. \n This function however can help you keep the context around for longer: \n from   flask   import   stream_with_context ,   request ,   Response \n\n @app . route ( '/stream' ) \n def   streamed_response (): \n     @stream_with_context \n     def   generate (): \n         yield   'Hello ' \n         yield   request . args [ 'name' ] \n         yield   '!' \n     return   Response ( generate ()) \n \n \n Alternatively it can also be used around a specific generator: \n from   flask   import   stream_with_context ,   request ,   Response \n\n @app . route ( '/stream' ) \n def   streamed_response (): \n     def   generate (): \n         yield   'Hello ' \n         yield   request . args [ 'name' ] \n         yield   '!' \n     return   Response ( stream_with_context ( generate ())) \n \n \n \n New in version 0.9. \n \n \n\n \n \n Useful Internals \u00b6 \n \n \n class  flask.ctx. RequestContext ( app ,  environ ,  request=None ) \u00b6 \n The request context contains all request relevant information.  It is\ncreated at the beginning of the request and pushed to the\n _request_ctx_stack  and removed at the end of it.  It will create the\nURL adapter and request object for the WSGI environment provided. \n Do not attempt to use this class directly, instead use\n test_request_context()  and\n request_context()  to create this object. \n When the request context is popped, it will evaluate all the\nfunctions registered on the application for teardown execution\n( teardown_request() ). \n The request context is automatically popped at the end of the request\nfor you.  In debug mode the request context is kept around if\nexceptions happen so that interactive debuggers have a chance to\nintrospect the data.  With 0.4 this can also be forced for requests\nthat did not fail and outside of  DEBUG  mode.  By setting\n 'flask._preserve_context'  to  True  on the WSGI environment the\ncontext will not pop itself at the end of the request.  This is used by\nthe  test_client()  for example to implement the\ndeferred cleanup functionality. \n You might find this helpful for unittests where you need the\ninformation from the context local around for a little longer.  Make\nsure to properly  pop()  the stack yourself in\nthat situation, otherwise your unittests will leak memory. \n \n \n copy ( ) \u00b6 \n Creates a copy of this request context with the same request object.\nThis can be used to move a request context to a different greenlet.\nBecause the actual request object is the same this cannot be used to\nmove a request context to a different thread unless access to the\nrequest object is locked. \n \n New in version 0.10. \n \n \n\n \n \n match_request ( ) \u00b6 \n Can be overridden by a subclass to hook into the matching\nof the request. \n \n\n \n \n pop ( exc=<object object> ) \u00b6 \n Pops the request context and unbinds it by doing that.  This will\nalso trigger the execution of functions registered by the\n teardown_request()  decorator. \n \n Changed in version 0.9:  Added the  exc  argument. \n \n \n\n \n \n push ( ) \u00b6 \n Binds the request context to the current context. \n \n\n \n\n \n \n flask. _request_ctx_stack \u00b6 \n The internal  LocalStack  that is used to implement\nall the context local objects used in Flask.  This is a documented\ninstance and can be used by extensions and application code but the\nuse is discouraged in general. \n The following attributes are always present on each layer of the\nstack: \n \n app \n the active Flask application. \n url_adapter \n the URL adapter that was used to match the request. \n request \n the current request object. \n session \n the active session object. \n g \n an object with all the attributes of the  flask.g  object. \n flashes \n an internal cache for the flashed messages. \n \n Example usage: \n from   flask   import   _request_ctx_stack \n\n def   get_session (): \n     ctx   =   _request_ctx_stack . top \n     if   ctx   is   not   None : \n         return   ctx . session \n \n \n \n\n \n \n class  flask.ctx. AppContext ( app ) \u00b6 \n The application context binds an application object implicitly\nto the current thread or greenlet, similar to how the\n RequestContext  binds request information.  The application\ncontext is also implicitly created if a request context is created\nbut the application is not on top of the individual application\ncontext. \n \n \n pop ( exc=<object object> ) \u00b6 \n Pops the app context. \n \n\n \n \n push ( ) \u00b6 \n Binds the app context to the current context. \n \n\n \n\n \n \n flask. _app_ctx_stack \u00b6 \n Works similar to the request context but only binds the application.\nThis is mainly there for extensions to store data. \n \n New in version 0.9. \n \n \n\n \n \n class  flask.blueprints. BlueprintSetupState ( blueprint ,  app ,  options ,  first_registration ) \u00b6 \n Temporary holder object for registering a blueprint with the\napplication.  An instance of this class is created by the\n make_setup_state()  method and later passed\nto all register callback functions. \n \n \n add_url_rule ( rule ,  endpoint=None ,  view_func=None ,  **options ) \u00b6 \n A helper method to register a rule (and optionally a view function)\nto the application.  The endpoint is automatically prefixed with the\nblueprint\u2019s name. \n \n\n \n \n app  = None \u00b6 \n a reference to the current application \n \n\n \n \n blueprint  = None \u00b6 \n a reference to the blueprint that created this setup state. \n \n\n \n \n first_registration  = None \u00b6 \n as blueprints can be registered multiple times with the\napplication and not everything wants to be registered\nmultiple times on it, this attribute can be used to figure\nout if the blueprint was registered in the past already. \n \n\n \n \n options  = None \u00b6 \n a dictionary with all options that were passed to the\n register_blueprint()  method. \n \n\n \n \n subdomain  = None \u00b6 \n The subdomain that the blueprint should be active for,  None \notherwise. \n \n\n \n \n url_defaults  = None \u00b6 \n A dictionary with URL defaults that is added to each and every\nURL that was defined with the blueprint. \n \n\n \n \n url_prefix  = None \u00b6 \n The prefix that should be used for all URLs defined on the\nblueprint. \n \n\n \n\n \n \n Signals \u00b6 \n \n New in version 0.6. \n \n \n \n signals. signals_available \u00b6 \n True  if the signaling system is available.  This is the case\nwhen  blinker  is installed. \n \n\n The following signals exist in Flask: \n \n \n flask. template_rendered \u00b6 \n This signal is sent when a template was successfully rendered.  The\nsignal is invoked with the instance of the template as  template \nand the context as dictionary (named  context ). \n Example subscriber: \n def   log_template_renders ( sender ,   template ,   context ,   ** extra ): \n     sender . logger . debug ( 'Rendering template \" %s \" with context  %s ' , \n                         template . name   or   'string template' , \n                         context ) \n\n from   flask   import   template_rendered \n template_rendered . connect ( log_template_renders ,   app ) \n \n \n \n\n \n \n flask. before_render_template \n This signal is sent before template rendering process. The\nsignal is invoked with the instance of the template as  template \nand the context as dictionary (named  context ). \n Example subscriber: \n def   log_template_renders ( sender ,   template ,   context ,   ** extra ): \n     sender . logger . debug ( 'Rendering template \" %s \" with context  %s ' , \n                         template . name   or   'string template' , \n                         context ) \n\n from   flask   import   before_render_template \n before_render_template . connect ( log_template_renders ,   app ) \n \n \n \n\n \n \n flask. request_started \u00b6 \n This signal is sent when the request context is set up, before\nany request processing happens.  Because the request context is already\nbound, the subscriber can access the request with the standard global\nproxies such as  request . \n Example subscriber: \n def   log_request ( sender ,   ** extra ): \n     sender . logger . debug ( 'Request context is set up' ) \n\n from   flask   import   request_started \n request_started . connect ( log_request ,   app ) \n \n \n \n\n \n \n flask. request_finished \u00b6 \n This signal is sent right before the response is sent to the client.\nIt is passed the response to be sent named  response . \n Example subscriber: \n def   log_response ( sender ,   response ,   ** extra ): \n     sender . logger . debug ( 'Request context is about to close down.  ' \n                         'Response:  %s ' ,   response ) \n\n from   flask   import   request_finished \n request_finished . connect ( log_response ,   app ) \n \n \n \n\n \n \n flask. got_request_exception \u00b6 \n This signal is sent when an exception happens during request processing.\nIt is sent  before  the standard exception handling kicks in and even\nin debug mode, where no exception handling happens.  The exception\nitself is passed to the subscriber as  exception . \n Example subscriber: \n def   log_exception ( sender ,   exception ,   ** extra ): \n     sender . logger . debug ( 'Got exception during processing:  %s ' ,   exception ) \n\n from   flask   import   got_request_exception \n got_request_exception . connect ( log_exception ,   app ) \n \n \n \n\n \n \n flask. request_tearing_down \u00b6 \n This signal is sent when the request is tearing down.  This is always\ncalled, even if an exception is caused.  Currently functions listening\nto this signal are called after the regular teardown handlers, but this\nis not something you can rely on. \n Example subscriber: \n def   close_db_connection ( sender ,   ** extra ): \n     session . close () \n\n from   flask   import   request_tearing_down \n request_tearing_down . connect ( close_db_connection ,   app ) \n \n \n As of Flask 0.9, this will also be passed an  exc  keyword argument\nthat has a reference to the exception that caused the teardown if\nthere was one. \n \n\n \n \n flask. appcontext_tearing_down \u00b6 \n This signal is sent when the app context is tearing down.  This is always\ncalled, even if an exception is caused.  Currently functions listening\nto this signal are called after the regular teardown handlers, but this\nis not something you can rely on. \n Example subscriber: \n def   close_db_connection ( sender ,   ** extra ): \n     session . close () \n\n from   flask   import   appcontext_tearing_down \n appcontext_tearing_down . connect ( close_db_connection ,   app ) \n \n \n This will also be passed an  exc  keyword argument that has a reference\nto the exception that caused the teardown if there was one. \n \n\n \n \n flask. appcontext_pushed \u00b6 \n This signal is sent when an application context is pushed.  The sender\nis the application.  This is usually useful for unittests in order to\ntemporarily hook in information.  For instance it can be used to\nset a resource early onto the  g  object. \n Example usage: \n from   contextlib   import   contextmanager \n from   flask   import   appcontext_pushed \n\n @contextmanager \n def   user_set ( app ,   user ): \n     def   handler ( sender ,   ** kwargs ): \n         g . user   =   user \n     with   appcontext_pushed . connected_to ( handler ,   app ): \n         yield \n \n \n And in the testcode: \n def   test_user_me ( self ): \n     with   user_set ( app ,   'john' ): \n         c   =   app . test_client () \n         resp   =   c . get ( '/users/me' ) \n         assert   resp . data   ==   'username=john' \n \n \n \n New in version 0.10. \n \n \n\n \n \n flask. appcontext_popped \u00b6 \n This signal is sent when an application context is popped.  The sender\nis the application.  This usually falls in line with the\n appcontext_tearing_down  signal. \n \n New in version 0.10. \n \n \n\n \n \n flask. message_flashed \u00b6 \n This signal is sent when the application is flashing a message.  The\nmessages is sent as  message  keyword argument and the category as\n category . \n Example subscriber: \n recorded   =   [] \n def   record ( sender ,   message ,   category ,   ** extra ): \n     recorded . append (( message ,   category )) \n\n from   flask   import   message_flashed \n message_flashed . connect ( record ,   app ) \n \n \n \n New in version 0.10. \n \n \n\n \n \n class  signals. Namespace \u00b6 \n An alias for  blinker.base.Namespace  if blinker is available,\notherwise a dummy class that creates fake signals.  This class is\navailable for Flask extensions that want to provide the same fallback\nsystem as Flask itself. \n \n \n signal ( name ,  doc=None ) \u00b6 \n Creates a new signal for this namespace if blinker is available,\notherwise returns a fake signal that has a send method that will\ndo nothing but will fail with a  RuntimeError  for all other\noperations, including connecting. \n \n\n \n\n \n \n Class-Based Views \u00b6 \n \n New in version 0.7. \n \n \n \n class  flask.views. View \u00b6 \n Alternative way to use view functions.  A subclass has to implement\n dispatch_request()  which is called with the view arguments from\nthe URL routing system.  If  methods  is provided the methods\ndo not have to be passed to the  add_url_rule() \nmethod explicitly: \n class   MyView ( View ): \n     methods   =   [ 'GET' ] \n\n     def   dispatch_request ( self ,   name ): \n         return   'Hello  %s !'   %   name \n\n app . add_url_rule ( '/hello/<name>' ,   view_func = MyView . as_view ( 'myview' )) \n \n \n When you want to decorate a pluggable view you will have to either do that\nwhen the view function is created (by wrapping the return value of\n as_view() ) or you can use the  decorators  attribute: \n class   SecretView ( View ): \n     methods   =   [ 'GET' ] \n     decorators   =   [ superuser_required ] \n\n     def   dispatch_request ( self ): \n         ... \n \n \n The decorators stored in the decorators list are applied one after another\nwhen the view function is created.  Note that you can  not  use the class\nbased decorators since those would decorate the view class and not the\ngenerated view function! \n \n \n classmethod  as_view ( name ,  *class_args ,  **class_kwargs ) \u00b6 \n Converts the class into an actual view function that can be used\nwith the routing system.  Internally this generates a function on the\nfly which will instantiate the  View  on each request and call\nthe  dispatch_request()  method on it. \n The arguments passed to  as_view()  are forwarded to the\nconstructor of the class. \n \n\n \n \n decorators  = () \u00b6 \n The canonical way to decorate class-based views is to decorate the\nreturn value of as_view().  However since this moves parts of the\nlogic from the class declaration to the place where it\u2019s hooked\ninto the routing system. \n You can place one or more decorators in this list and whenever the\nview function is created the result is automatically decorated. \n \n New in version 0.8. \n \n \n\n \n \n dispatch_request ( ) \u00b6 \n Subclasses have to override this method to implement the\nactual view function code.  This method is called with all\nthe arguments from the URL rule. \n \n\n \n \n methods  = None \u00b6 \n A list of methods this view can handle. \n \n\n \n\n \n \n class  flask.views. MethodView \u00b6 \n Like a regular class-based view but that dispatches requests to\nparticular methods.  For instance if you implement a method called\n get()  it means it will respond to  'GET'  requests and\nthe  dispatch_request()  implementation will automatically\nforward your request to that.  Also  options  is set for you\nautomatically: \n class   CounterAPI ( MethodView ): \n\n     def   get ( self ): \n         return   session . get ( 'counter' ,   0 ) \n\n     def   post ( self ): \n         session [ 'counter' ]   =   session . get ( 'counter' ,   0 )   +   1 \n         return   'OK' \n\n app . add_url_rule ( '/counter' ,   view_func = CounterAPI . as_view ( 'counter' )) \n \n \n \n\n \n \n URL Route Registrations \u00b6 \n Generally there are three ways to define rules for the routing system: \n \n You can use the  flask.Flask.route()  decorator. \n You can use the  flask.Flask.add_url_rule()  function. \n You can directly access the underlying Werkzeug routing system\nwhich is exposed as  flask.Flask.url_map . \n \n Variable parts in the route can be specified with angular brackets\n( /user/<username> ).  By default a variable part in the URL accepts any\nstring without a slash however a different converter can be specified as\nwell by using  <converter:name> . \n Variable parts are passed to the view function as keyword arguments. \n The following converters are available: \n \n \n \n \n \n \n string \n accepts any text without a slash (the default) \n \n int \n accepts integers \n \n float \n like  int  but for floating point values \n \n path \n like the default but also accepts slashes \n \n any \n matches one of the items provided \n \n uuid \n accepts UUID strings \n \n \n \n Custom converters can be defined using  flask.Flask.url_map . \n Here are some examples: \n @app . route ( '/' ) \n def   index (): \n     pass \n\n @app . route ( '/<username>' ) \n def   show_user ( username ): \n     pass \n\n @app . route ( '/post/<int:post_id>' ) \n def   show_post ( post_id ): \n     pass \n \n \n An important detail to keep in mind is how Flask deals with trailing\nslashes.  The idea is to keep each URL unique so the following rules\napply: \n \n If a rule ends with a slash and is requested without a slash by the\nuser, the user is automatically redirected to the same page with a\ntrailing slash attached. \n If a rule does not end with a trailing slash and the user requests the\npage with a trailing slash, a 404 not found is raised. \n \n This is consistent with how web servers deal with static files.  This\nalso makes it possible to use relative link targets safely. \n You can also define multiple rules for the same function.  They have to be\nunique however.  Defaults can also be specified.  Here for example is a\ndefinition for a URL that accepts an optional page: \n @app . route ( '/users/' ,   defaults = { 'page' :   1 }) \n @app . route ( '/users/page/<int:page>' ) \n def   show_users ( page ): \n     pass \n \n \n This specifies that  /users/  will be the URL for page one and\n /users/page/N  will be the URL for page  N . \n Here are the parameters that  route()  and\n add_url_rule()  accept.  The only difference is that\nwith the route parameter the view function is defined with the decorator\ninstead of the  view_func  parameter. \n \n \n \n \n \n \n rule \n the URL rule as string \n \n endpoint \n the endpoint for the registered URL rule.  Flask itself\nassumes that the name of the view function is the name\nof the endpoint if not explicitly stated. \n \n view_func \n the function to call when serving a request to the\nprovided endpoint.  If this is not provided one can\nspecify the function later by storing it in the\n view_functions  dictionary with the\nendpoint as key. \n \n defaults \n A dictionary with defaults for this rule.  See the\nexample above for how defaults work. \n \n subdomain \n specifies the rule for the subdomain in case subdomain\nmatching is in use.  If not specified the default\nsubdomain is assumed. \n \n **options \n the options to be forwarded to the underlying\n Rule  object.  A change to\nWerkzeug is handling of method options.  methods is a list\nof methods this rule should be limited to ( GET ,  POST \netc.).  By default a rule just listens for  GET  (and\nimplicitly  HEAD ).  Starting with Flask 0.6,  OPTIONS  is\nimplicitly added and handled by the standard request\nhandling.  They have to be specified as keyword arguments. \n \n \n \n \n \n View Function Options \u00b6 \n For internal usage the view functions can have some attributes attached to\ncustomize behavior the view function would normally not have control over.\nThe following attributes can be provided optionally to either override\nsome defaults to  add_url_rule()  or general behavior: \n \n __name__ : The name of a function is by default used as endpoint.  If\nendpoint is provided explicitly this value is used.  Additionally this\nwill be prefixed with the name of the blueprint by default which\ncannot be customized from the function itself. \n methods : If methods are not provided when the URL rule is added,\nFlask will look on the view function object itself if a  methods \nattribute exists.  If it does, it will pull the information for the\nmethods from there. \n provide_automatic_options : if this attribute is set Flask will\neither force enable or disable the automatic implementation of the\nHTTP  OPTIONS  response.  This can be useful when working with\ndecorators that want to customize the  OPTIONS  response on a per-view\nbasis. \n required_methods : if this attribute is set, Flask will always add\nthese methods when registering a URL rule even if the methods were\nexplicitly overridden in the  route()  call. \n \n Full example: \n def   index (): \n     if   request . method   ==   'OPTIONS' : \n         # custom options handling here \n         ... \n     return   'Hello World!' \n index . provide_automatic_options   =   False \n index . methods   =   [ 'GET' ,   'OPTIONS' ] \n\n app . add_url_rule ( '/' ,   index ) \n \n \n \n New in version 0.8:  The  provide_automatic_options  functionality was added. \n \n \n \n Command Line Interface \u00b6 \n \n \n class  flask.cli. FlaskGroup ( add_default_commands=True ,  create_app=None ,  add_version_option=True ,  **extra ) \u00b6 \n Special subclass of the  AppGroup  group that supports\nloading more commands from the configured Flask app.  Normally a\ndeveloper does not have to interface with this class but there are\nsome very advanced use cases for which it makes sense to create an\ninstance of this. \n For information as of why this is useful see  Custom Scripts . \n \n \n \n \n Parameters: \n add_default_commands  \u2013 if this is True then the default run and\nshell commands wil be added. \n add_version_option  \u2013 adds the  --version  option. \n create_app  \u2013 an optional callback that is passed the script info\nand returns the loaded app. \n \n \n \n \n \n \n\n \n \n class  flask.cli. AppGroup ( name=None ,  commands=None ,  **attrs ) \u00b6 \n This works similar to a regular click  Group  but it\nchanges the behavior of the  command()  decorator so that it\nautomatically wraps the functions in  with_appcontext() . \n Not to be confused with  FlaskGroup . \n \n \n command ( *args ,  **kwargs ) \u00b6 \n This works exactly like the method of the same name on a regular\n click.Group  but it wraps callbacks in  with_appcontext() \nunless it\u2019s disabled by passing  with_appcontext=False . \n \n\n \n \n group ( *args ,  **kwargs ) \u00b6 \n This works exactly like the method of the same name on a regular\n click.Group  but it defaults the group class to\n AppGroup . \n \n\n \n\n \n \n class  flask.cli. ScriptInfo ( app_import_path=None ,  create_app=None ) \u00b6 \n Help object to deal with Flask applications.  This is usually not\nnecessary to interface with as it\u2019s used internally in the dispatching\nto click.  In future versions of Flask this object will most likely play\na bigger role.  Typically it\u2019s created automatically by the\n FlaskGroup  but you can also manually create it and pass it\nonwards as click object. \n \n \n app_import_path  = None \u00b6 \n Optionally the import path for the Flask application. \n \n\n \n \n create_app  = None \u00b6 \n Optionally a function that is passed the script info to create\nthe instance of the application. \n \n\n \n \n data  = None \u00b6 \n A dictionary with arbitrary data that can be associated with\nthis script info. \n \n\n \n \n load_app ( ) \u00b6 \n Loads the Flask app (if not yet loaded) and returns it.  Calling\nthis multiple times will just result in the already loaded app to\nbe returned. \n \n\n \n\n \n \n flask.cli. with_appcontext ( f ) \u00b6 \n Wraps a callback so that it\u2019s guaranteed to be executed with the\nscript\u2019s application context.  If callbacks are registered directly\nto the  app.cli  object then they are wrapped with this function\nby default unless it\u2019s disabled. \n \n\n \n \n flask.cli. pass_script_info ( f ) \u00b6 \n Marks a function so that an instance of  ScriptInfo  is passed\nas first argument to the click callback. \n \n\n \n \n flask.cli. run_command  = <click.core.Command object> \u00b6 \n Runs a local development server for the Flask application. \n This local server is recommended for development purposes only but it\ncan also be used for simple intranet deployments.  By default it will\nnot support any sort of concurrency at all to simplify debugging.  This\ncan be changed with the \u2013with-threads option which will enable basic\nmultithreading. \n The reloader and debugger are by default enabled if the debug flag of\nFlask is enabled and disabled otherwise. \n \n\n \n \n flask.cli. shell_command  = <click.core.Command object> \u00b6 \n Runs an interactive Python shell in the context of a given\nFlask application.  The application will populate the default\nnamespace of this shell according to it\u2019s configuration. \n This is useful for executing small snippets of management code\nwithout having to manually configuring the application. \n \n\n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n API \n Application Object \n Blueprint Objects \n Incoming Request Data \n Response Objects \n Sessions \n Session Interface \n Test Client \n Application Globals \n Useful Functions and Classes \n Message Flashing \n JSON Support \n Template Rendering \n Configuration \n Extensions \n Stream Helpers \n Useful Internals \n Signals \n Class-Based Views \n URL Route Registrations \n View Function Options \n Command Line Interface \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Becoming Big \n       Next:  Design Decisions in Flask \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/changelog/", "text": "\n   \n     \n     Flask Changelog \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Flask Changelog \u00b6 \n Here you can see the full list of changes between each Flask release. \n \n Version 0.13 \u00b6 \n Major release, unreleased \n \n Make  app.run()  into a noop if a Flask application is run from the\ndevelopment server on the command line.  This avoids some behavior that\nwas confusing to debug for newcomers. \n Change default configuration  JSONIFY_PRETTYPRINT_REGULAR=False . jsonify()\nmethod returns compressed response by default, and pretty response in\ndebug mode. \n \n \n \n Version 0.12.2 \u00b6 \n Released on May 16 2017 \n \n Fix a bug in  safe_join  on Windows. \n \n \n \n Version 0.12.1 \u00b6 \n Bugfix release, released on March 31st 2017 \n \n Prevent  flask run  from showing a NoAppException when an ImportError occurs\nwithin the imported application module. \n Fix encoding behavior of  app.config.from_pyfile  for Python 3. Fix\n #2118 . \n Call  ctx.auto_pop  with the exception object instead of  None , in the\nevent that a  BaseException  such as  KeyboardInterrupt  is raised in a\nrequest handler. \n \n \n \n Version 0.12 \u00b6 \n Released on December 21st 2016, codename Punsch. \n \n the cli command now responds to  \u2013version . \n Mimetype guessing and ETag generation for file-like objects in  send_file \nhas been removed, as per issue  #104 .  See pull request  #1849 . \n Mimetype guessing in  send_file  now fails loudly and doesn\u2019t fall back to\n application/octet-stream . See pull request  #1988 . \n Make  flask.safe_join  able to join multiple paths like  os.path.join \n(pull request  #1730 ). \n Revert a behavior change that made the dev server crash instead of returning\na Internal Server Error (pull request  #2006 ). \n Correctly invoke response handlers for both regular request dispatching as\nwell as error handlers. \n Disable logger propagation by default for the app logger. \n Add support for range requests in  send_file . \n app.test_client  includes preset default environment, which can now be\ndirectly set, instead of per  client.get . \n \n \n \n Version 0.11.2 \u00b6 \n Bugfix release, unreleased \n \n Fix crash when running under PyPy3, see pull request  #1814 . \n \n \n \n Version 0.11.1 \u00b6 \n Bugfix release, released on June 7th 2016. \n \n Fixed a bug that prevented  FLASK_APP=foobar/__init__.py  from working. See\npull request  #1872 . \n \n \n \n Version 0.11 \u00b6 \n Released on May 29th 2016, codename Absinthe. \n \n Added support to serializing top-level arrays to  flask.jsonify() . This\nintroduces a security risk in ancient browsers. See\n JSON Security  for details. \n Added before_render_template signal. \n Added  **kwargs  to  flask.Test.test_client()  to support passing\nadditional keyword arguments to the constructor of\n flask.Flask.test_client_class . \n Added  SESSION_REFRESH_EACH_REQUEST  config key that controls the\nset-cookie behavior.  If set to  True  a permanent session will be\nrefreshed each request and get their lifetime extended, if set to\n False  it will only be modified if the session actually modifies.\nNon permanent sessions are not affected by this and will always\nexpire if the browser window closes. \n Made Flask support custom JSON mimetypes for incoming data. \n Added support for returning tuples in the form  (response,   headers) \nfrom a view function. \n Added  flask.Config.from_json() . \n Added  flask.Flask.config_class . \n Added  flask.Config.get_namespace() . \n Templates are no longer automatically reloaded outside of debug mode. This\ncan be configured with the new  TEMPLATES_AUTO_RELOAD  config key. \n Added a workaround for a limitation in Python 3.3\u2019s namespace loader. \n Added support for explicit root paths when using Python 3.3\u2019s namespace\npackages. \n Added  flask  and the  flask.cli  module to start the local\ndebug server through the click CLI system.  This is recommended over the old\n flask.run()  method as it works faster and more reliable due to a\ndifferent design and also replaces  Flask-Script . \n Error handlers that match specific classes are now checked first,\nthereby allowing catching exceptions that are subclasses of HTTP\nexceptions (in  werkzeug.exceptions ).  This makes it possible\nfor an extension author to create exceptions that will by default\nresult in the HTTP error of their choosing, but may be caught with\na custom error handler if desired. \n Added  flask.Config.from_mapping() . \n Flask will now log by default even if debug is disabled.  The log format is\nnow hardcoded but the default log handling can be disabled through the\n LOGGER_HANDLER_POLICY  configuration key. \n Removed deprecated module functionality. \n Added the  EXPLAIN_TEMPLATE_LOADING  config flag which when enabled will\ninstruct Flask to explain how it locates templates.  This should help\nusers debug when the wrong templates are loaded. \n Enforce blueprint handling in the order they were registered for template\nloading. \n Ported test suite to py.test. \n Deprecated  request.json  in favour of  request.get_json() . \n Add \u201cpretty\u201d and \u201ccompressed\u201d separators definitions in jsonify() method.\nReduces JSON response size when JSONIFY_PRETTYPRINT_REGULAR=False by removing\nunnecessary white space included by default after separators. \n JSON responses are now terminated with a newline character, because it is a\nconvention that UNIX text files end with a newline and some clients don\u2019t\ndeal well when this newline is missing. See\n https://github.com/pallets/flask/pull/1262  \u2013 this came up originally as a\npart of  https://github.com/kennethreitz/httpbin/issues/168 \n The automatically provided  OPTIONS  method is now correctly disabled if\nthe user registered an overriding rule with the lowercase-version\n options  (issue  #1288 ). \n flask.json.jsonify  now supports the  datetime.date  type (pull request\n #1326 ). \n Don\u2019t leak exception info of already catched exceptions to context teardown\nhandlers (pull request  #1393 ). \n Allow custom Jinja environment subclasses (pull request  #1422 ). \n flask.g  now has  pop()  and  setdefault  methods. \n Turn on autoescape for  flask.templating.render_template_string  by default\n(pull request  #1515 ). \n flask.ext  is now deprecated (pull request  #1484 ). \n send_from_directory  now raises BadRequest if the filename is invalid on\nthe server OS (pull request  #1763 ). \n Added the  JSONIFY_MIMETYPE  configuration variable (pull request  #1728 ). \n Exceptions during teardown handling will no longer leave bad application\ncontexts lingering around. \n \n \n \n Version 0.10.2 \u00b6 \n (bugfix release, release date to be announced) \n \n Fixed broken  test_appcontext_signals()  test case. \n Raise an  AttributeError  in  flask.helpers.find_package()  with a\nuseful message explaining why it is raised when a PEP 302 import hook is used\nwithout an  is_package()  method. \n Fixed an issue causing exceptions raised before entering a request or app\ncontext to be passed to teardown handlers. \n Fixed an issue with query parameters getting removed from requests in\nthe test client when absolute URLs were requested. \n Made  @before_first_request  into a decorator as intended. \n Fixed an etags bug when sending a file streams with a name. \n Fixed  send_from_directory  not expanding to the application root path\ncorrectly. \n Changed logic of before first request handlers to flip the flag after\ninvoking.  This will allow some uses that are potentially dangerous but\nshould probably be permitted. \n Fixed Python 3 bug when a handler from  app.url_build_error_handlers \nreraises the  BuildError . \n \n \n \n Version 0.10.1 \u00b6 \n (bugfix release, released on June 14th 2013) \n \n Fixed an issue where  |tojson  was not quoting single quotes which\nmade the filter not work properly in HTML attributes.  Now it\u2019s\npossible to use that filter in single quoted attributes.  This should\nmake using that filter with angular.js easier. \n Added support for byte strings back to the session system.  This broke\ncompatibility with the common case of people putting binary data for\ntoken verification into the session. \n Fixed an issue where registering the same method twice for the same endpoint\nwould trigger an exception incorrectly. \n \n \n \n Version 0.10 \u00b6 \n Released on June 13th 2013, codename Limoncello. \n \n Changed default cookie serialization format from pickle to JSON to\nlimit the impact an attacker can do if the secret key leaks.  See\n Version 0.10  for more information. \n Added  template_test  methods in addition to the already existing\n template_filter  method family. \n Added  template_global  methods in addition to the already existing\n template_filter  method family. \n Set the content-length header for x-sendfile. \n tojson  filter now does not escape script blocks in HTML5 parsers. \n tojson  used in templates is now safe by default due.  This was\nallowed due to the different escaping behavior. \n Flask will now raise an error if you attempt to register a new function\non an already used endpoint. \n Added wrapper module around simplejson and added default serialization\nof datetime objects.  This allows much easier customization of how\nJSON is handled by Flask or any Flask extension. \n Removed deprecated internal  flask.session  module alias.  Use\n flask.sessions  instead to get the session module.  This is not to\nbe confused with  flask.session  the session proxy. \n Templates can now be rendered without request context.  The behavior is\nslightly different as the  request ,  session  and  g  objects\nwill not be available and blueprint\u2019s context processors are not\ncalled. \n The config object is now available to the template as a real global and\nnot through a context processor which makes it available even in imported\ntemplates by default. \n Added an option to generate non-ascii encoded JSON which should result\nin less bytes being transmitted over the network.  It\u2019s disabled by\ndefault to not cause confusion with existing libraries that might expect\n flask.json.dumps  to return bytestrings by default. \n flask.g  is now stored on the app context instead of the request\ncontext. \n flask.g  now gained a  get()  method for not erroring out on non\nexisting items. \n flask.g  now can be used with the  in  operator to see what\u2019s defined\nand it now is iterable and will yield all attributes stored. \n flask.Flask.request_globals_class  got renamed to\n flask.Flask.app_ctx_globals_class  which is a better name to what it\ndoes since 0.10. \n request ,  session  and  g  are now also added as proxies to the template\ncontext which makes them available in imported templates.  One has to be\nvery careful with those though because usage outside of macros might\ncause caching. \n Flask will no longer invoke the wrong error handlers if a proxy\nexception is passed through. \n Added a workaround for chrome\u2019s cookies in localhost not working\nas intended with domain names. \n Changed logic for picking defaults for cookie values from sessions\nto work better with Google Chrome. \n Added  message_flashed  signal that simplifies flashing testing. \n Added support for copying of request contexts for better working with\ngreenlets. \n Removed custom JSON HTTP exception subclasses.  If you were relying on them\nyou can reintroduce them again yourself trivially.  Using them however is\nstrongly discouraged as the interface was flawed. \n Python requirements changed: requiring Python 2.6 or 2.7 now to prepare\nfor Python 3.3 port. \n Changed how the teardown system is informed about exceptions.  This is now\nmore reliable in case something handles an exception halfway through\nthe error handling process. \n Request context preservation in debug mode now keeps the exception\ninformation around which means that teardown handlers are able to\ndistinguish error from success cases. \n Added the  JSONIFY_PRETTYPRINT_REGULAR  configuration variable. \n Flask now orders JSON keys by default to not trash HTTP caches due to\ndifferent hash seeds between different workers. \n Added  appcontext_pushed  and  appcontext_popped  signals. \n The builtin run method now takes the  SERVER_NAME  into account when\npicking the default port to run on. \n Added  flask.request.get_json()  as a replacement for the old\n flask.request.json  property. \n \n \n \n Version 0.9 \u00b6 \n Released on July 1st 2012, codename Campari. \n \n The  flask.Request.on_json_loading_failed()  now returns a JSON formatted\nresponse by default. \n The  flask.url_for()  function now can generate anchors to the\ngenerated links. \n The  flask.url_for()  function now can also explicitly generate\nURL rules specific to a given HTTP method. \n Logger now only returns the debug log setting if it was not set\nexplicitly. \n Unregister a circular dependency between the WSGI environment and\nthe request object when shutting down the request.  This means that\nenviron  werkzeug.request  will be  None  after the response was\nreturned to the WSGI server but has the advantage that the garbage\ncollector is not needed on CPython to tear down the request unless\nthe user created circular dependencies themselves. \n Session is now stored after callbacks so that if the session payload\nis stored in the session you can still modify it in an after\nrequest callback. \n The  flask.Flask  class will avoid importing the provided import name\nif it can (the required first parameter), to benefit tools which build Flask\ninstances programmatically.  The Flask class will fall back to using import\non systems with custom module hooks, e.g. Google App Engine, or when the\nimport name is inside a zip archive (usually a .egg) prior to Python 2.7. \n Blueprints now have a decorator to add custom template filters application\nwide,  flask.Blueprint.app_template_filter() . \n The Flask and Blueprint classes now have a non-decorator method for adding\ncustom template filters application wide,\n flask.Flask.add_template_filter()  and\n flask.Blueprint.add_app_template_filter() . \n The  flask.get_flashed_messages()  function now allows rendering flashed\nmessage categories in separate blocks, through a  category_filter \nargument. \n The  flask.Flask.run()  method now accepts  None  for  host  and  port \narguments, using default values when  None .  This allows for calling run\nusing configuration values, e.g.  app.run(app.config.get('MYHOST'), \n app.config.get('MYPORT')) , with proper behavior whether or not a config\nfile is provided. \n The  flask.render_template()  method now accepts a either an iterable of\ntemplate names or a single template name.  Previously, it only accepted a\nsingle template name.  On an iterable, the first template found is rendered. \n Added  flask.Flask.app_context()  which works very similar to the\nrequest context but only provides access to the current application.  This\nalso adds support for URL generation without an active request context. \n View functions can now return a tuple with the first instance being an\ninstance of  flask.Response .  This allows for returning\n jsonify(error=\"error   msg\"),   400  from a view function. \n Flask  and  Blueprint  now provide a\n get_send_file_max_age()  hook for subclasses to override\nbehavior of serving static files from Flask when using\n flask.Flask.send_static_file()  (used for the default static file\nhandler) and  send_file() .  This hook is provided a\nfilename, which for example allows changing cache controls by file extension.\nThe default max-age for  send_file  and static files can be configured\nthrough a new  SEND_FILE_MAX_AGE_DEFAULT  configuration variable, which is\nused in the default  get_send_file_max_age  implementation. \n Fixed an assumption in sessions implementation which could break message\nflashing on sessions implementations which use external storage. \n Changed the behavior of tuple return values from functions.  They are no\nlonger arguments to the response object, they now have a defined meaning. \n Added  flask.Flask.request_globals_class  to allow a specific class to\nbe used on creation of the  g  instance of each request. \n Added  required_methods  attribute to view functions to force-add methods\non registration. \n Added  flask.after_this_request() . \n Added  flask.stream_with_context()  and the ability to push contexts\nmultiple times without producing unexpected behavior. \n \n \n \n Version 0.8.1 \u00b6 \n Bugfix release, released on July 1st 2012 \n \n Fixed an issue with the undocumented  flask.session  module to not\nwork properly on Python 2.5.  It should not be used but did cause\nsome problems for package managers. \n \n \n \n Version 0.8 \u00b6 \n Released on September 29th 2011, codename Rakija \n \n Refactored session support into a session interface so that\nthe implementation of the sessions can be changed without\nhaving to override the Flask class. \n Empty session cookies are now deleted properly automatically. \n View functions can now opt out of getting the automatic\nOPTIONS implementation. \n HTTP exceptions and Bad Request errors can now be trapped so that they\nshow up normally in the traceback. \n Flask in debug mode is now detecting some common problems and tries to\nwarn you about them. \n Flask in debug mode will now complain with an assertion error if a view\nwas attached after the first request was handled.  This gives earlier\nfeedback when users forget to import view code ahead of time. \n Added the ability to register callbacks that are only triggered once at\nthe beginning of the first request. ( Flask.before_first_request() ) \n Malformed JSON data will now trigger a bad request HTTP exception instead\nof a value error which usually would result in a 500 internal server\nerror if not handled.  This is a backwards incompatible change. \n Applications now not only have a root path where the resources and modules\nare located but also an instance path which is the designated place to\ndrop files that are modified at runtime (uploads etc.).  Also this is\nconceptually only instance depending and outside version control so it\u2019s\nthe perfect place to put configuration files etc.  For more information\nsee  Instance Folders . \n Added the  APPLICATION_ROOT  configuration variable. \n Implemented  session_transaction()  to\neasily modify sessions from the test environment. \n Refactored test client internally.  The  APPLICATION_ROOT  configuration\nvariable as well as  SERVER_NAME  are now properly used by the test client\nas defaults. \n Added  flask.views.View.decorators  to support simpler decorating of\npluggable (class-based) views. \n Fixed an issue where the test client if used with the \u201cwith\u201d statement did not\ntrigger the execution of the teardown handlers. \n Added finer control over the session cookie parameters. \n HEAD requests to a method view now automatically dispatch to the  get \nmethod if no handler was implemented. \n Implemented the virtual  flask.ext  package to import extensions from. \n The context preservation on exceptions is now an integral component of\nFlask itself and no longer of the test client.  This cleaned up some\ninternal logic and lowers the odds of runaway request contexts in unittests. \n \n \n \n Version 0.7.3 \u00b6 \n Bugfix release, release date to be decided \n \n Fixed the Jinja2 environment\u2019s list_templates method not returning the\ncorrect names when blueprints or modules were involved. \n \n \n \n Version 0.7.2 \u00b6 \n Bugfix release, released on July 6th 2011 \n \n Fixed an issue with URL processors not properly working on\nblueprints. \n \n \n \n Version 0.7.1 \u00b6 \n Bugfix release, released on June 29th 2011 \n \n Added missing future import that broke 2.5 compatibility. \n Fixed an infinite redirect issue with blueprints. \n \n \n \n Version 0.7 \u00b6 \n Released on June 28th 2011, codename Grappa \n \n Added  make_default_options_response() \nwhich can be used by subclasses to alter the default\nbehavior for  OPTIONS  responses. \n Unbound locals now raise a proper  RuntimeError  instead\nof an  AttributeError . \n Mimetype guessing and etag support based on file objects is now\ndeprecated for  flask.send_file()  because it was unreliable.\nPass filenames instead or attach your own etags and provide a\nproper mimetype by hand. \n Static file handling for modules now requires the name of the\nstatic folder to be supplied explicitly.  The previous autodetection\nwas not reliable and caused issues on Google\u2019s App Engine.  Until\n1.0 the old behavior will continue to work but issue dependency\nwarnings. \n fixed a problem for Flask to run on jython. \n added a  PROPAGATE_EXCEPTIONS  configuration variable that can be\nused to flip the setting of exception propagation which previously\nwas linked to  DEBUG  alone and is now linked to either  DEBUG  or\n TESTING . \n Flask no longer internally depends on rules being added through the\n add_url_rule  function and can now also accept regular werkzeug\nrules added to the url map. \n Added an  endpoint  method to the flask application object which\nallows one to register a callback to an arbitrary endpoint with\na decorator. \n Use Last-Modified for static file sending instead of Date which\nwas incorrectly introduced in 0.6. \n Added  create_jinja_loader  to override the loader creation process. \n Implemented a silent flag for  config.from_pyfile . \n Added  teardown_request  decorator, for functions that should run at the end\nof a request regardless of whether an exception occurred.  Also the behavior\nfor  after_request  was changed.  It\u2019s now no longer executed when an exception\nis raised.  See  Upgrading to new Teardown Handling \n Implemented  flask.has_request_context() \n Deprecated  init_jinja_globals .  Override the\n create_jinja_environment()  method instead to\nachieve the same functionality. \n Added  flask.safe_join() \n The automatic JSON request data unpacking now looks at the charset\nmimetype parameter. \n Don\u2019t modify the session on  flask.get_flashed_messages()  if there\nare no messages in the session. \n before_request  handlers are now able to abort requests with errors. \n it is not possible to define user exception handlers.  That way you can\nprovide custom error messages from a central hub for certain errors that\nmight occur during request processing (for instance database connection\nerrors, timeouts from remote resources etc.). \n Blueprints can provide blueprint specific error handlers. \n Implemented generic  Pluggable Views  (class-based views). \n \n \n \n Version 0.6.1 \u00b6 \n Bugfix release, released on December 31st 2010 \n \n Fixed an issue where the default  OPTIONS  response was\nnot exposing all valid methods in the  Allow  header. \n Jinja2 template loading syntax now allows \u201c./\u201d in front of\na template load path.  Previously this caused issues with\nmodule setups. \n Fixed an issue where the subdomain setting for modules was\nignored for the static folder. \n Fixed a security problem that allowed clients to download arbitrary files\nif the host server was a windows based operating system and the client\nuses backslashes to escape the directory the files where exposed from. \n \n \n \n Version 0.6 \u00b6 \n Released on July 27th 2010, codename Whisky \n \n after request functions are now called in reverse order of\nregistration. \n OPTIONS is now automatically implemented by Flask unless the\napplication explicitly adds \u2018OPTIONS\u2019 as method to the URL rule.\nIn this case no automatic OPTIONS handling kicks in. \n static rules are now even in place if there is no static folder\nfor the module.  This was implemented to aid GAE which will\nremove the static folder if it\u2019s part of a mapping in the .yml\nfile. \n the  config  is now available in the templates\nas  config . \n context processors will no longer override values passed directly\nto the render function. \n added the ability to limit the incoming request data with the\nnew  MAX_CONTENT_LENGTH  configuration value. \n the endpoint for the  flask.Module.add_url_rule()  method\nis now optional to be consistent with the function of the\nsame name on the application object. \n added a  flask.make_response()  function that simplifies\ncreating response object instances in views. \n added signalling support based on blinker.  This feature is currently\noptional and supposed to be used by extensions and applications.  If\nyou want to use it, make sure to have  blinker  installed. \n refactored the way URL adapters are created.  This process is now\nfully customizable with the  create_url_adapter() \nmethod. \n modules can now register for a subdomain instead of just an URL\nprefix.  This makes it possible to bind a whole module to a\nconfigurable subdomain. \n \n \n \n Version 0.5.2 \u00b6 \n Bugfix Release, released on July 15th 2010 \n \n fixed another issue with loading templates from directories when\nmodules were used. \n \n \n \n Version 0.5.1 \u00b6 \n Bugfix Release, released on July 6th 2010 \n \n fixes an issue with template loading from directories when modules\nwhere used. \n \n \n \n Version 0.5 \u00b6 \n Released on July 6th 2010, codename Calvados \n \n fixed a bug with subdomains that was caused by the inability to\nspecify the server name.  The server name can now be set with\nthe  SERVER_NAME  config key.  This key is now also used to set\nthe session cookie cross-subdomain wide. \n autoescaping is no longer active for all templates.  Instead it\nis only active for  .html ,  .htm ,  .xml  and  .xhtml .\nInside templates this behavior can be changed with the\n autoescape  tag. \n refactored Flask internally.  It now consists of more than a\nsingle file. \n flask.send_file()  now emits etags and has the ability to\ndo conditional responses builtin. \n (temporarily) dropped support for zipped applications.  This was a\nrarely used feature and led to some confusing behavior. \n added support for per-package template and static-file directories. \n removed support for  create_jinja_loader  which is no longer used\nin 0.5 due to the improved module support. \n added a helper function to expose files from any directory. \n \n \n \n Version 0.4 \u00b6 \n Released on June 18th 2010, codename Rakia \n \n added the ability to register application wide error handlers\nfrom modules. \n after_request()  handlers are now also invoked\nif the request dies with an exception and an error handling page\nkicks in. \n test client has not the ability to preserve the request context\nfor a little longer.  This can also be used to trigger custom\nrequests that do not pop the request stack for testing. \n because the Python standard library caches loggers, the name of\nthe logger is configurable now to better support unittests. \n added  TESTING  switch that can activate unittesting helpers. \n the logger switches to  DEBUG  mode now if debug is enabled. \n \n \n \n Version 0.3.1 \u00b6 \n Bugfix release, released on May 28th 2010 \n \n fixed a error reporting bug with  flask.Config.from_envvar() \n removed some unused code from flask \n release does no longer include development leftover files (.git\nfolder for themes, built documentation in zip and pdf file and\nsome .pyc files) \n \n \n \n Version 0.3 \u00b6 \n Released on May 28th 2010, codename Schnaps \n \n added support for categories for flashed messages. \n the application now configures a  logging.Handler  and will\nlog request handling exceptions to that logger when not in debug\nmode.  This makes it possible to receive mails on server errors\nfor example. \n added support for context binding that does not require the use of\nthe with statement for playing in the console. \n the request context is now available within the with statement making\nit possible to further push the request context or pop it. \n added support for configurations. \n \n \n \n Version 0.2 \u00b6 \n Released on May 12th 2010, codename J\u00e4germeister \n \n various bugfixes \n integrated JSON support \n added  get_template_attribute()  helper function. \n add_url_rule()  can now also register a\nview function. \n refactored internal request dispatching. \n server listens on 127.0.0.1 by default now to fix issues with chrome. \n added external URL support. \n added support for  send_file() \n module support and internal request handling refactoring\nto better support pluggable applications. \n sessions can be set to be permanent now on a per-session basis. \n better error reporting on missing secret keys. \n added support for Google Appengine. \n \n \n \n Version 0.1 \u00b6 \n First public preview release. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Flask Changelog \n Version 0.13 \n Version 0.12.2 \n Version 0.12.1 \n Version 0.12 \n Version 0.11.2 \n Version 0.11.1 \n Version 0.11 \n Version 0.10.2 \n Version 0.10.1 \n Version 0.10 \n Version 0.9 \n Version 0.8.1 \n Version 0.8 \n Version 0.7.3 \n Version 0.7.2 \n Version 0.7.1 \n Version 0.7 \n Version 0.6.1 \n Version 0.6 \n Version 0.5.2 \n Version 0.5.1 \n Version 0.5 \n Version 0.4 \n Version 0.3.1 \n Version 0.3 \n Version 0.2 \n Version 0.1 \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Upgrading to Newer Releases \n       Next:  License \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/unicode/", "text": "\n   \n     \n     Unicode in Flask \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Unicode in Flask \u00b6 \n Flask, like Jinja2 and Werkzeug, is totally Unicode based when it comes to\ntext.  Not only these libraries, also the majority of web related Python\nlibraries that deal with text.  If you don\u2019t know Unicode so far, you\nshould probably read  The Absolute Minimum Every Software Developer\nAbsolutely, Positively Must Know About Unicode and Character Sets .  This part of the\ndocumentation just tries to cover the very basics so that you have a\npleasant experience with Unicode related things. \n \n Automatic Conversion \u00b6 \n Flask has a few assumptions about your application (which you can change\nof course) that give you basic and painless Unicode support: \n \n the encoding for text on your website is UTF-8 \n internally you will always use Unicode exclusively for text except\nfor literal strings with only ASCII character points. \n encoding and decoding happens whenever you are talking over a protocol\nthat requires bytes to be transmitted. \n \n So what does this mean to you? \n HTTP is based on bytes.  Not only the protocol, also the system used to\naddress documents on servers (so called URIs or URLs).  However HTML which\nis usually transmitted on top of HTTP supports a large variety of\ncharacter sets and which ones are used, are transmitted in an HTTP header.\nTo not make this too complex Flask just assumes that if you are sending\nUnicode out you want it to be UTF-8 encoded.  Flask will do the encoding\nand setting of the appropriate headers for you. \n The same is true if you are talking to databases with the help of\nSQLAlchemy or a similar ORM system.  Some databases have a protocol that\nalready transmits Unicode and if they do not, SQLAlchemy or your other ORM\nshould take care of that. \n \n \n The Golden Rule \u00b6 \n So the rule of thumb: if you are not dealing with binary data, work with\nUnicode.  What does working with Unicode in Python 2.x mean? \n \n as long as you are using ASCII charpoints only (basically numbers,\nsome special characters of latin letters without umlauts or anything\nfancy) you can use regular string literals ( 'Hello   World' ). \n if you need anything else than ASCII in a string you have to mark\nthis string as Unicode string by prefixing it with a lowercase  u .\n(like  u'H\u00e4nsel   und   Gretel' ) \n if you are using non-Unicode characters in your Python files you have\nto tell Python which encoding your file uses.  Again, I recommend\nUTF-8 for this purpose.  To tell the interpreter your encoding you can\nput the  #   -*-   coding:   utf-8   -*-  into the first or second line of\nyour Python source file. \n Jinja is configured to decode the template files from UTF-8.  So make\nsure to tell your editor to save the file as UTF-8 there as well. \n \n \n \n Encoding and Decoding Yourself \u00b6 \n If you are talking with a filesystem or something that is not really based\non Unicode you will have to ensure that you decode properly when working\nwith Unicode interface.  So for example if you want to load a file on the\nfilesystem and embed it into a Jinja2 template you will have to decode it\nfrom the encoding of that file.  Here the old problem that text files do\nnot specify their encoding comes into play.  So do yourself a favour and\nlimit yourself to UTF-8 for text files as well. \n Anyways.  To load such a file with Unicode you can use the built-in\n str.decode()  method: \n def   read_file ( filename ,   charset = 'utf-8' ): \n     with   open ( filename ,   'r' )   as   f : \n         return   f . read () . decode ( charset ) \n \n \n To go from Unicode into a specific charset such as UTF-8 you can use the\n unicode.encode()  method: \n def   write_file ( filename ,   contents ,   charset = 'utf-8' ): \n     with   open ( filename ,   'w' )   as   f : \n         f . write ( contents . encode ( charset )) \n \n \n \n \n Configuring Editors \u00b6 \n Most editors save as UTF-8 by default nowadays but in case your editor is\nnot configured to do this you have to change it.  Here some common ways to\nset your editor to store as UTF-8: \n \n Vim: put  set   enc=utf-8  to your  .vimrc  file. \n \n Emacs: either use an encoding cookie or put this into your  .emacs \nfile: \n ( prefer - coding - system   'utf-8) \n ( setq   default - buffer - file - coding - system   'utf-8) \n \n \n \n Notepad++: \n \n Go to  Settings -> Preferences \u2026 \n Select the \u201cNew Document/Default Directory\u201d tab \n Select \u201cUTF-8 without BOM\u201d as encoding \n \n It is also recommended to use the Unix newline format, you can select\nit in the same panel but this is not a requirement. \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Unicode in Flask \n Automatic Conversion \n The Golden Rule \n Encoding and Decoding Yourself \n Configuring Editors \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Security Considerations \n       Next:  Flask Extension Development \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/security/", "text": "\n   \n     \n     Security Considerations \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Security Considerations \u00b6 \n Web applications usually face all kinds of security problems and it\u2019s very\nhard to get everything right.  Flask tries to solve a few of these things\nfor you, but there are a couple more you have to take care of yourself. \n \n Cross-Site Scripting (XSS) \u00b6 \n Cross site scripting is the concept of injecting arbitrary HTML (and with\nit JavaScript) into the context of a website.  To remedy this, developers\nhave to properly escape text so that it cannot include arbitrary HTML\ntags.  For more information on that have a look at the Wikipedia article\non  Cross-Site Scripting . \n Flask configures Jinja2 to automatically escape all values unless\nexplicitly told otherwise.  This should rule out all XSS problems caused\nin templates, but there are still other places where you have to be\ncareful: \n \n generating HTML without the help of Jinja2 \n calling  Markup  on data submitted by users \n sending out HTML from uploaded files, never do that, use the\n Content-Disposition:   attachment  header to prevent that problem. \n sending out textfiles from uploaded files.  Some browsers are using\ncontent-type guessing based on the first few bytes so users could\ntrick a browser to execute HTML. \n \n Another thing that is very important are unquoted attributes.  While\nJinja2 can protect you from XSS issues by escaping HTML, there is one\nthing it cannot protect you from: XSS by attribute injection.  To counter\nthis possible attack vector, be sure to always quote your attributes with\neither double or single quotes when using Jinja expressions in them: \n < a   href = \" {{   href   }} \" > the text </ a > \n \n \n Why is this necessary?  Because if you would not be doing that, an\nattacker could easily inject custom JavaScript handlers.  For example an\nattacker could inject this piece of HTML+JavaScript: \n onmouseover=alert(document.cookie)\n \n \n When the user would then move with the mouse over the link, the cookie\nwould be presented to the user in an alert window.  But instead of showing\nthe cookie to the user, a good attacker might also execute any other\nJavaScript code.  In combination with CSS injections the attacker might\neven make the element fill out the entire page so that the user would\njust have to have the mouse anywhere on the page to trigger the attack. \n \n \n Cross-Site Request Forgery (CSRF) \u00b6 \n Another big problem is CSRF.  This is a very complex topic and I won\u2019t\noutline it here in detail just mention what it is and how to theoretically\nprevent it. \n If your authentication information is stored in cookies, you have implicit\nstate management.  The state of \u201cbeing logged in\u201d is controlled by a\ncookie, and that cookie is sent with each request to a page.\nUnfortunately that includes requests triggered by 3rd party sites.  If you\ndon\u2019t keep that in mind, some people might be able to trick your\napplication\u2019s users with social engineering to do stupid things without\nthem knowing. \n Say you have a specific URL that, when you sent  POST  requests to will\ndelete a user\u2019s profile (say  http://example.com/user/delete ).  If an\nattacker now creates a page that sends a post request to that page with\nsome JavaScript they just have to trick some users to load that page and\ntheir profiles will end up being deleted. \n Imagine you were to run Facebook with millions of concurrent users and\nsomeone would send out links to images of little kittens.  When users\nwould go to that page, their profiles would get deleted while they are\nlooking at images of fluffy cats. \n How can you prevent that?  Basically for each request that modifies\ncontent on the server you would have to either use a one-time token and\nstore that in the cookie  and  also transmit it with the form data.\nAfter receiving the data on the server again, you would then have to\ncompare the two tokens and ensure they are equal. \n Why does Flask not do that for you?  The ideal place for this to happen is\nthe form validation framework, which does not exist in Flask. \n \n \n JSON Security \u00b6 \n In Flask 0.10 and lower,  jsonify()  did not serialize top-level\narrays to JSON. This was because of a security vulnerability in ECMAScript 4. \n ECMAScript 5 closed this vulnerability, so only extremely old browsers are\nstill vulnerable. All of these browsers have  other more serious\nvulnerabilities , so\nthis behavior was changed and  jsonify()  now supports serializing\narrays. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Security Considerations \n Cross-Site Scripting (XSS) \n Cross-Site Request Forgery (CSRF) \n JSON Security \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  HTML/XHTML FAQ \n       Next:  Unicode in Flask \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/htmlfaq/", "text": "\n   \n     \n     HTML/XHTML FAQ \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n HTML/XHTML FAQ \u00b6 \n The Flask documentation and example applications are using HTML5.  You\nmay notice that in many situations, when end tags are optional they are\nnot used, so that the HTML is cleaner and faster to load.  Because there\nis much confusion about HTML and XHTML among developers, this document tries\nto answer some of the major questions. \n \n History of XHTML \u00b6 \n For a while, it appeared that HTML was about to be replaced by XHTML.\nHowever, barely any websites on the Internet are actual XHTML (which is\nHTML processed using XML rules).  There are a couple of major reasons\nwhy this is the case.  One of them is Internet Explorer\u2019s lack of proper\nXHTML support. The XHTML spec states that XHTML must be served with the MIME\ntype  application/xhtml+xml , but Internet Explorer refuses to read files\nwith that MIME type.\nWhile it is relatively easy to configure Web servers to serve XHTML properly,\nfew people do.  This is likely because properly using XHTML can be quite\npainful. \n One of the most important causes of pain is XML\u2019s draconian (strict and\nruthless) error handling.  When an XML parsing error is encountered,\nthe browser is supposed to show the user an ugly error message, instead\nof attempting to recover from the error and display what it can.  Most of\nthe (X)HTML generation on the web is based on non-XML template engines\n(such as Jinja, the one used in Flask) which do not protect you from\naccidentally creating invalid XHTML.  There are XML based template engines,\nsuch as Kid and the popular Genshi, but they often come with a larger\nruntime overhead and are not as straightforward to use because they have\nto obey XML rules. \n The majority of users, however, assumed they were properly using XHTML.\nThey wrote an XHTML doctype at the top of the document and self-closed all\nthe necessary tags ( <br>  becomes  <br/>  or  <br></br>  in XHTML).\nHowever, even if the document properly validates as XHTML, what really\ndetermines XHTML/HTML processing in browsers is the MIME type, which as\nsaid before is often not set properly. So the valid XHTML was being treated\nas invalid HTML. \n XHTML also changed the way JavaScript is used. To properly work with XHTML,\nprogrammers have to use the namespaced DOM interface with the XHTML\nnamespace to query for HTML elements. \n \n \n History of HTML5 \u00b6 \n Development of the HTML5 specification was started in 2004 under the name\n\u201cWeb Applications 1.0\u201d by the Web Hypertext Application Technology Working\nGroup, or WHATWG (which was formed by the major browser vendors Apple,\nMozilla, and Opera) with the goal of writing a new and improved HTML\nspecification, based on existing browser behavior instead of unrealistic\nand backwards-incompatible specifications. \n For example, in HTML4  <title/Hello/  theoretically parses exactly the\nsame as  <title>Hello</title> .  However, since people were using\nXHTML-like tags along the lines of  <link   /> , browser vendors implemented\nthe XHTML syntax over the syntax defined by the specification. \n In 2007, the specification was adopted as the basis of a new HTML\nspecification under the umbrella of the W3C, known as HTML5.  Currently,\nit appears that XHTML is losing traction, as the XHTML 2 working group has\nbeen disbanded and HTML5 is being implemented by all major browser vendors. \n \n \n HTML versus XHTML \u00b6 \n The following table gives you a quick overview of features available in\nHTML 4.01, XHTML 1.1 and HTML5. (XHTML 1.0 is not included, as it was\nsuperseded by XHTML 1.1 and the barely-used XHTML5.) \n \n \n \n \n \n \n \n \n \u00a0 \n HTML4.01 \n XHTML1.1 \n HTML5 \n \n \n \n <tag/value/  ==  <tag>value</tag> \n   [1] \n \n \n \n <br/>  supported \n \n \n   [2] \n \n <script/>  supported \n \n \n \n \n should be served as  text/html \n \n   [3] \n \n \n should be served as\n application/xhtml+xml \n \n \n \n \n strict error handling \n \n \n \n \n inline SVG \n \n \n \n \n inline MathML \n \n \n \n \n <video>  tag \n \n \n \n \n <audio>  tag \n \n \n \n \n New semantic tags like  <article> \n \n \n \n \n \n \n \n \n \n [1] This is an obscure feature inherited from SGML. It is usually not\nsupported by browsers, for reasons detailed above. \n \n \n \n \n \n [2] This is for compatibility with server code that generates XHTML for\ntags such as  <br> .  It should not be used in new code. \n \n \n \n \n \n [3] XHTML 1.0 is the last XHTML standard that allows to be served\nas  text/html  for backwards compatibility reasons. \n \n \n \n \n What does \u201cstrict\u201d mean? \u00b6 \n HTML5 has strictly defined parsing rules, but it also specifies exactly\nhow a browser should react to parsing errors - unlike XHTML, which simply\nstates parsing should abort. Some people are confused by apparently\ninvalid syntax that still generates the expected results (for example,\nmissing end tags or unquoted attribute values). \n Some of these work because of the lenient error handling most browsers use\nwhen they encounter a markup error, others are actually specified.  The\nfollowing constructs are optional in HTML5 by standard, but have to be\nsupported by browsers: \n \n Wrapping the document in an  <html>  tag \n Wrapping header elements in  <head>  or the body elements in\n <body> \n Closing the  <p> ,  <li> ,  <dt> ,  <dd> ,  <tr> ,\n <td> ,  <th> ,  <tbody> ,  <thead> , or  <tfoot>  tags. \n Quoting attributes, so long as they contain no whitespace or\nspecial characters (like  < ,  > ,  ' , or  \" ). \n Requiring boolean attributes to have a value. \n \n This means the following page in HTML5 is perfectly valid: \n <!doctype html> \n < title > Hello HTML5 </ title > \n < div   class = header > \n   < h1 > Hello HTML5 </ h1 > \n   < p   class = tagline > HTML5 is awesome\n </ div > \n < ul   class = nav > \n   < li >< a   href = /index > Index </ a > \n   < li >< a   href = /downloads > Downloads </ a > \n   < li >< a   href = /about > About </ a > \n </ ul > \n < div   class = body > \n   < h2 > HTML5 is probably the future </ h2 > \n   < p > \n    There might be some other things around but in terms of\n    browser vendor support, HTML5 is hard to beat.\n   < dl > \n     < dt > Key 1\n     < dd > Value 1\n     < dt > Key 2\n     < dd > Value 2\n   </ dl > \n </ div > \n \n \n \n \n New technologies in HTML5 \u00b6 \n HTML5 adds many new features that make Web applications easier to write\nand to use. \n \n The  <audio>  and  <video>  tags provide a way to embed audio and\nvideo without complicated add-ons like QuickTime or Flash. \n Semantic elements like  <article> ,  <header> ,  <nav> , and\n <time>  that make content easier to understand. \n The  <canvas>  tag, which supports a powerful drawing API, reducing\nthe need for server-generated images to present data graphically. \n New form control types like  <input   type=\"date\">  that allow user\nagents to make entering and validating values easier. \n Advanced JavaScript APIs like Web Storage, Web Workers, Web Sockets,\ngeolocation, and offline applications. \n \n Many other features have been added, as well. A good guide to new features\nin HTML5 is Mark Pilgrim\u2019s soon-to-be-published book,  Dive Into HTML5 .\nNot all of them are supported in browsers yet, however, so use caution. \n \n \n What should be used? \u00b6 \n Currently, the answer is HTML5.  There are very few reasons to use XHTML\nconsidering the latest developments in Web browsers.  To summarize the\nreasons given above: \n \n Internet Explorer (which, sadly, currently leads in market share)\nhas poor support for XHTML. \n Many JavaScript libraries also do not support XHTML, due to the more\ncomplicated namespacing API it requires. \n HTML5 adds several new features, including semantic tags and the\nlong-awaited  <audio>  and  <video>  tags. \n It has the support of most browser vendors behind it. \n It is much easier to write, and more compact. \n \n For most applications, it is undoubtedly better to use HTML5 than XHTML. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n HTML/XHTML FAQ \n History of XHTML \n History of HTML5 \n HTML versus XHTML \n What does \u201cstrict\u201d mean? \n New technologies in HTML5 \n What should be used? \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Design Decisions in Flask \n       Next:  Security Considerations \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/design/", "text": "\n   \n     \n     Design Decisions in Flask \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Design Decisions in Flask \u00b6 \n If you are curious why Flask does certain things the way it does and not\ndifferently, this section is for you.  This should give you an idea about\nsome of the design decisions that may appear arbitrary and surprising at\nfirst, especially in direct comparison with other frameworks. \n \n The Explicit Application Object \u00b6 \n A Python web application based on WSGI has to have one central callable\nobject that implements the actual application.  In Flask this is an\ninstance of the  Flask  class.  Each Flask application has\nto create an instance of this class itself and pass it the name of the\nmodule, but why can\u2019t Flask do that itself? \n Without such an explicit application object the following code: \n from   flask   import   Flask \n app   =   Flask ( __name__ ) \n\n @app . route ( '/' ) \n def   index (): \n     return   'Hello World!' \n \n \n Would look like this instead: \n from   hypothetical_flask   import   route \n\n @route ( '/' ) \n def   index (): \n     return   'Hello World!' \n \n \n There are three major reasons for this.  The most important one is that\nimplicit application objects require that there may only be one instance at\nthe time.  There are ways to fake multiple applications with a single\napplication object, like maintaining a stack of applications, but this\ncauses some problems I won\u2019t outline here in detail.  Now the question is:\nwhen does a microframework need more than one application at the same\ntime?  A good example for this is unittesting.  When you want to test\nsomething it can be very helpful to create a minimal application to test\nspecific behavior.  When the application object is deleted everything it\nallocated will be freed again. \n Another thing that becomes possible when you have an explicit object lying\naround in your code is that you can subclass the base class\n( Flask ) to alter specific behavior.  This would not be\npossible without hacks if the object were created ahead of time for you\nbased on a class that is not exposed to you. \n But there is another very important reason why Flask depends on an\nexplicit instantiation of that class: the package name.  Whenever you\ncreate a Flask instance you usually pass it  __name__  as package name.\nFlask depends on that information to properly load resources relative\nto your module.  With Python\u2019s outstanding support for reflection it can\nthen access the package to figure out where the templates and static files\nare stored (see  open_resource() ).  Now obviously there\nare frameworks around that do not need any configuration and will still be\nable to load templates relative to your application module.  But they have\nto use the current working directory for that, which is a very unreliable\nway to determine where the application is.  The current working directory\nis process-wide and if you are running multiple applications in one\nprocess (which could happen in a webserver without you knowing) the paths\nwill be off.  Worse: many webservers do not set the working directory to\nthe directory of your application but to the document root which does not\nhave to be the same folder. \n The third reason is \u201cexplicit is better than implicit\u201d.  That object is\nyour WSGI application, you don\u2019t have to remember anything else.  If you\nwant to apply a WSGI middleware, just wrap it and you\u2019re done (though\nthere are better ways to do that so that you do not lose the reference\nto the application object  wsgi_app() ). \n Furthermore this design makes it possible to use a factory function to\ncreate the application which is very helpful for unittesting and similar\nthings ( Application Factories ). \n \n \n The Routing System \u00b6 \n Flask uses the Werkzeug routing system which was designed to\nautomatically order routes by complexity.  This means that you can declare\nroutes in arbitrary order and they will still work as expected.  This is a\nrequirement if you want to properly implement decorator based routing\nsince decorators could be fired in undefined order when the application is\nsplit into multiple modules. \n Another design decision with the Werkzeug routing system is that routes\nin Werkzeug try to ensure that URLs are unique.  Werkzeug will go quite far\nwith that in that it will automatically redirect to a canonical URL if a route\nis ambiguous. \n \n \n One Template Engine \u00b6 \n Flask decides on one template engine: Jinja2.  Why doesn\u2019t Flask have a\npluggable template engine interface?  You can obviously use a different\ntemplate engine, but Flask will still configure Jinja2 for you.  While\nthat limitation that Jinja2 is  always  configured will probably go away,\nthe decision to bundle one template engine and use that will not. \n Template engines are like programming languages and each of those engines\nhas a certain understanding about how things work.  On the surface they\nall work the same: you tell the engine to evaluate a template with a set\nof variables and take the return value as string. \n But that\u2019s about where similarities end.  Jinja2 for example has an\nextensive filter system, a certain way to do template inheritance, support\nfor reusable blocks (macros) that can be used from inside templates and\nalso from Python code, uses Unicode for all operations, supports\niterative template rendering, configurable syntax and more.  On the other\nhand an engine like Genshi is based on XML stream evaluation, template\ninheritance by taking the availability of XPath into account and more.\nMako on the other hand treats templates similar to Python modules. \n When it comes to connecting a template engine with an application or\nframework there is more than just rendering templates.  For instance,\nFlask uses Jinja2\u2019s extensive autoescaping support.  Also it provides\nways to access macros from Jinja2 templates. \n A template abstraction layer that would not take the unique features of\nthe template engines away is a science on its own and a too large\nundertaking for a microframework like Flask. \n Furthermore extensions can then easily depend on one template language\nbeing present.  You can easily use your own templating language, but an\nextension could still depend on Jinja itself. \n \n \n Micro with Dependencies \u00b6 \n Why does Flask call itself a microframework and yet it depends on two\nlibraries (namely Werkzeug and Jinja2).  Why shouldn\u2019t it?  If we look\nover to the Ruby side of web development there we have a protocol very\nsimilar to WSGI.  Just that it\u2019s called Rack there, but besides that it\nlooks very much like a WSGI rendition for Ruby.  But nearly all\napplications in Ruby land do not work with Rack directly, but on top of a\nlibrary with the same name.  This Rack library has two equivalents in\nPython: WebOb (formerly Paste) and Werkzeug.  Paste is still around but\nfrom my understanding it\u2019s sort of deprecated in favour of WebOb.  The\ndevelopment of WebOb and Werkzeug started side by side with similar ideas\nin mind: be a good implementation of WSGI for other applications to take\nadvantage. \n Flask is a framework that takes advantage of the work already done by\nWerkzeug to properly interface WSGI (which can be a complex task at\ntimes).  Thanks to recent developments in the Python package\ninfrastructure, packages with dependencies are no longer an issue and\nthere are very few reasons against having libraries that depend on others. \n \n \n Thread Locals \u00b6 \n Flask uses thread local objects (context local objects in fact, they\nsupport greenlet contexts as well) for request, session and an extra\nobject you can put your own things on ( g ).  Why is that and\nisn\u2019t that a bad idea? \n Yes it is usually not such a bright idea to use thread locals.  They cause\ntroubles for servers that are not based on the concept of threads and make\nlarge applications harder to maintain.  However Flask is just not designed\nfor large applications or asynchronous servers.  Flask wants to make it\nquick and easy to write a traditional web application. \n Also see the  Becoming Big  section of the documentation for some\ninspiration for larger applications based on Flask. \n \n \n What Flask is, What Flask is Not \u00b6 \n Flask will never have a database layer.  It will not have a form library\nor anything else in that direction.  Flask itself just bridges to Werkzeug\nto implement a proper WSGI application and to Jinja2 to handle templating.\nIt also binds to a few common standard library packages such as logging.\nEverything else is up for extensions. \n Why is this the case?  Because people have different preferences and\nrequirements and Flask could not meet those if it would force any of this\ninto the core.  The majority of web applications will need a template\nengine in some sort.  However not every application needs a SQL database. \n The idea of Flask is to build a good foundation for all applications.\nEverything else is up to you or extensions. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Design Decisions in Flask \n The Explicit Application Object \n The Routing System \n One Template Engine \n Micro with Dependencies \n Thread Locals \n What Flask is, What Flask is Not \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  API \n       Next:  HTML/XHTML FAQ \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/becomingbig/", "text": "\n   \n     \n     Becoming Big \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Becoming Big \u00b6 \n Here are your options when growing your codebase or scaling your application. \n \n Read the Source. \u00b6 \n Flask started in part to demonstrate how to build your own framework on top of\nexisting well-used tools Werkzeug (WSGI) and Jinja (templating), and as it\ndeveloped, it became useful to a wide audience.  As you grow your codebase,\ndon\u2019t just use Flask \u2013 understand it.  Read the source.  Flask\u2019s code is\nwritten to be read; its documentation is published so you can use its internal\nAPIs.  Flask sticks to documented APIs in upstream libraries, and documents its\ninternal utilities so that you can find the hook points needed for your\nproject. \n \n \n Hook. Extend. \u00b6 \n The  API  docs are full of available overrides, hook points, and\n Signals . You can provide custom classes for things like the request and\nresponse objects.  Dig deeper on the APIs you use, and look for the\ncustomizations which are available out of the box in a Flask release.  Look for\nways in which your project can be refactored into a collection of utilities and\nFlask extensions.  Explore the many  extensions  in the community, and look for patterns to\nbuild your own extensions if you do not find the tools you need. \n \n \n Subclass. \u00b6 \n The  Flask  class has many methods designed for subclassing. You\ncan quickly add or customize behavior by subclassing  Flask  (see\nthe linked method docs) and using that subclass wherever you instantiate an\napplication class. This works well with  Application Factories . See  Subclassing Flask  for an example. \n \n \n Wrap with middleware. \u00b6 \n The  Application Dispatching  chapter shows in detail how to apply middleware. You\ncan introduce WSGI middleware to wrap your Flask instances and introduce fixes\nand changes at the layer between your Flask application and your HTTP\nserver. Werkzeug includes several  middlewares . \n \n \n Fork. \u00b6 \n If none of the above options work, fork Flask.  The majority of code of Flask\nis within Werkzeug and Jinja2.  These libraries do the majority of the work.\nFlask is just the paste that glues those together.  For every project there is\nthe point where the underlying framework gets in the way (due to assumptions\nthe original developers had).  This is natural because if this would not be the\ncase, the framework would be a very complex system to begin with which causes a\nsteep learning curve and a lot of user frustration. \n This is not unique to Flask.  Many people use patched and modified\nversions of their framework to counter shortcomings.  This idea is also\nreflected in the license of Flask.  You don\u2019t have to contribute any\nchanges back if you decide to modify the framework. \n The downside of forking is of course that Flask extensions will most\nlikely break because the new framework has a different import name.\nFurthermore integrating upstream changes can be a complex process,\ndepending on the number of changes.  Because of that, forking should be\nthe very last resort. \n \n \n Scale like a pro. \u00b6 \n For many web applications the complexity of the code is less an issue than\nthe scaling for the number of users or data entries expected.  Flask by\nitself is only limited in terms of scaling by your application code, the\ndata store you want to use and the Python implementation and webserver you\nare running on. \n Scaling well means for example that if you double the amount of servers\nyou get about twice the performance.  Scaling bad means that if you add a\nnew server the application won\u2019t perform any better or would not even\nsupport a second server. \n There is only one limiting factor regarding scaling in Flask which are\nthe context local proxies.  They depend on context which in Flask is\ndefined as being either a thread, process or greenlet.  If your server\nuses some kind of concurrency that is not based on threads or greenlets,\nFlask will no longer be able to support these global proxies.  However the\nmajority of servers are using either threads, greenlets or separate\nprocesses to achieve concurrency which are all methods well supported by\nthe underlying Werkzeug library. \n \n \n Discuss with the community. \u00b6 \n The Flask developers keep the framework accessible to users with codebases big\nand small. If you find an obstacle in your way, caused by Flask, don\u2019t hesitate\nto contact the developers on the mailinglist or IRC channel.  The best way for\nthe Flask and Flask extension developers to improve the tools for larger\napplications is getting feedback from users. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Becoming Big \n Read the Source. \n Hook. Extend. \n Subclass. \n Wrap with middleware. \n Fork. \n Scale like a pro. \n Discuss with the community. \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  CGI \n       Next:  API \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/deploying/", "text": "\n   \n     \n     Deployment Options \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Deployment Options \u00b6 \n While lightweight and easy to use,  Flask\u2019s built-in server is not suitable\nfor production  as it doesn\u2019t scale well and by default serves only one\nrequest at a time.  Some of the options available for properly running Flask in\nproduction are documented here. \n If you want to deploy your Flask application to a WSGI server not listed here,\nlook up the server documentation about how to use a WSGI app with it.  Just\nremember that your  Flask  application object is the actual WSGI\napplication. \n \n Hosted options \u00b6 \n \n Deploying Flask on Heroku \n Deploying Flask on OpenShift \n Deploying Flask on Webfaction \n Deploying Flask on Google App Engine \n Deploying Flask on AWS Elastic Beanstalk \n Sharing your Localhost Server with Localtunnel \n Deploying on Azure (IIS) \n Deploying on PythonAnywhere \n \n \n \n Self-hosted options \u00b6 \n \n \n mod_wsgi (Apache) \n Installing  mod_wsgi \n Creating a  .wsgi  file \n Configuring Apache \n Troubleshooting \n Support for Automatic Reloading \n Working with Virtual Environments \n \n \n Standalone WSGI Containers \n Gunicorn \n Gevent \n Twisted Web \n Proxy Setups \n \n \n uWSGI \n Starting your app with uwsgi \n Configuring nginx \n \n \n FastCGI \n Creating a  .fcgi  file \n Configuring Apache \n Configuring lighttpd \n Configuring nginx \n Running FastCGI Processes \n Debugging \n \n \n CGI \n Creating a  .cgi  file \n Server Setup \n \n \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Deployment Options \n Hosted options \n Self-hosted options \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Subclassing Flask \n       Next:  mod_wsgi (Apache) \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/subclassing/", "text": "\n   \n     \n     Subclassing Flask \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Subclassing Flask \u00b6 \n The  Flask  class is designed for subclassing. \n For example, you may want to override how request parameters are handled to preserve their order: \n from   flask   import   Flask ,   Request \n from   werkzeug.datastructures   import   ImmutableOrderedMultiDict \n class   MyRequest ( Request ): \n     \"\"\"Request subclass to override request parameter storage\"\"\" \n     parameter_storage_class   =   ImmutableOrderedMultiDict \n class   MyFlask ( Flask ): \n     \"\"\"Flask subclass using the custom request class\"\"\" \n     request_class   =   MyRequest \n \n \n This is the recommended approach for overriding or augmenting Flask\u2019s internal functionality. \n \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Celery Based Background Tasks \n       Next:  Deployment Options \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/requestchecksum/", "text": "\n   \n     \n     Request Content Checksums \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Request Content Checksums \u00b6 \n Various pieces of code can consume the request data and preprocess it.\nFor instance JSON data ends up on the request object already read and\nprocessed, form data ends up there as well but goes through a different\ncode path.  This seems inconvenient when you want to calculate the\nchecksum of the incoming request data.  This is necessary sometimes for\nsome APIs. \n Fortunately this is however very simple to change by wrapping the input\nstream. \n The following example calculates the SHA1 checksum of the incoming data as\nit gets read and stores it in the WSGI environment: \n import   hashlib \n\n class   ChecksumCalcStream ( object ): \n\n     def   __init__ ( self ,   stream ): \n         self . _stream   =   stream \n         self . _hash   =   hashlib . sha1 () \n\n     def   read ( self ,   bytes ): \n         rv   =   self . _stream . read ( bytes ) \n         self . _hash . update ( rv ) \n         return   rv \n\n     def   readline ( self ,   size_hint ): \n         rv   =   self . _stream . readline ( size_hint ) \n         self . _hash . update ( rv ) \n         return   rv \n\n def   generate_checksum ( request ): \n     env   =   request . environ \n     stream   =   ChecksumCalcStream ( env [ 'wsgi.input' ]) \n     env [ 'wsgi.input' ]   =   stream \n     return   stream . _hash \n \n \n To use this, all you need to do is to hook the calculating stream in\nbefore the request starts consuming data.  (Eg: be careful accessing\n request.form  or anything of that nature.   before_request_handlers \nfor instance should be careful not to access it). \n Example usage: \n @app . route ( '/special-api' ,   methods = [ 'POST' ]) \n def   special_api (): \n     hash   =   generate_checksum ( request ) \n     # Accessing this parses the input stream \n     files   =   request . files \n     # At this point the hash is fully constructed. \n     checksum   =   hash . hexdigest () \n     return   'Hash was:  %s '   %   checksum \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Adding HTTP Method Overrides \n       Next:  Celery Based Background Tasks \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/methodoverrides/", "text": "\n   \n     \n     Adding HTTP Method Overrides \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Adding HTTP Method Overrides \u00b6 \n Some HTTP proxies do not support arbitrary HTTP methods or newer HTTP\nmethods (such as PATCH).  In that case it\u2019s possible to \u201cproxy\u201d HTTP\nmethods through another HTTP method in total violation of the protocol. \n The way this works is by letting the client do an HTTP POST request and\nset the  X-HTTP-Method-Override  header and set the value to the\nintended HTTP method (such as  PATCH ). \n This can easily be accomplished with an HTTP middleware: \n class   HTTPMethodOverrideMiddleware ( object ): \n     allowed_methods   =   frozenset ([ \n         'GET' , \n         'HEAD' , \n         'POST' , \n         'DELETE' , \n         'PUT' , \n         'PATCH' , \n         'OPTIONS' \n     ]) \n     bodyless_methods   =   frozenset ([ 'GET' ,   'HEAD' ,   'OPTIONS' ,   'DELETE' ]) \n\n     def   __init__ ( self ,   app ): \n         self . app   =   app \n\n     def   __call__ ( self ,   environ ,   start_response ): \n         method   =   environ . get ( 'HTTP_X_HTTP_METHOD_OVERRIDE' ,   '' ) . upper () \n         if   method   in   self . allowed_methods : \n             method   =   method . encode ( 'ascii' ,   'replace' ) \n             environ [ 'REQUEST_METHOD' ]   =   method \n         if   method   in   self . bodyless_methods : \n             environ [ 'CONTENT_LENGTH' ]   =   '0' \n         return   self . app ( environ ,   start_response ) \n \n \n To use this with Flask this is all that is necessary: \n from   flask   import   Flask \n\n app   =   Flask ( __name__ ) \n app . wsgi_app   =   HTTPMethodOverrideMiddleware ( app . wsgi_app ) \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Deferred Request Callbacks \n       Next:  Request Content Checksums \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/celery/", "text": "\n   \n     \n     Celery Based Background Tasks \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Celery Based Background Tasks \u00b6 \n Celery is a task queue for Python with batteries included.  It used to\nhave a Flask integration but it became unnecessary after some\nrestructuring of the internals of Celery with Version 3.  This guide fills\nin the blanks in how to properly use Celery with Flask but assumes that\nyou generally already read the  First Steps with Celery \nguide in the official Celery documentation. \n \n Installing Celery \u00b6 \n Celery is on the Python Package Index (PyPI), so it can be installed with\nstandard Python tools like  pip  or  easy_install : \n $ pip install celery\n \n \n \n \n Configuring Celery \u00b6 \n The first thing you need is a Celery instance, this is called the celery\napplication.  It serves the same purpose as the  Flask \nobject in Flask, just for Celery.  Since this instance is used as the\nentry-point for everything you want to do in Celery, like creating tasks\nand managing workers, it must be possible for other modules to import it. \n For instance you can place this in a  tasks  module.  While you can use\nCelery without any reconfiguration with Flask, it becomes a bit nicer by\nsubclassing tasks and adding support for Flask\u2019s application contexts and\nhooking it up with the Flask configuration. \n This is all that is necessary to properly integrate Celery with Flask: \n from   celery   import   Celery \n\n def   make_celery ( app ): \n     celery   =   Celery ( app . import_name ,   backend = app . config [ 'CELERY_RESULT_BACKEND' ], \n                     broker = app . config [ 'CELERY_BROKER_URL' ]) \n     celery . conf . update ( app . config ) \n     TaskBase   =   celery . Task \n     class   ContextTask ( TaskBase ): \n         abstract   =   True \n         def   __call__ ( self ,   * args ,   ** kwargs ): \n             with   app . app_context (): \n                 return   TaskBase . __call__ ( self ,   * args ,   ** kwargs ) \n     celery . Task   =   ContextTask \n     return   celery \n \n \n The function creates a new Celery object, configures it with the broker\nfrom the application config, updates the rest of the Celery config from\nthe Flask config and then creates a subclass of the task that wraps the\ntask execution in an application context. \n \n \n Minimal Example \u00b6 \n With what we have above this is the minimal example of using Celery with\nFlask: \n from   flask   import   Flask \n\n flask_app   =   Flask ( __name__ ) \n flask_app . config . update ( \n     CELERY_BROKER_URL = 'redis://localhost:6379' , \n     CELERY_RESULT_BACKEND = 'redis://localhost:6379' \n ) \n celery   =   make_celery ( flask_app ) \n\n\n @celery . task () \n def   add_together ( a ,   b ): \n     return   a   +   b \n \n \n This task can now be called in the background: \n >>>  result   =   add_together . delay ( 23 ,   42 ) \n >>>  result . wait () \n 65 \n \n \n \n \n Running the Celery Worker \u00b6 \n Now if you jumped in and already executed the above code you will be\ndisappointed to learn that your  .wait()  will never actually return.\nThat\u2019s because you also need to run celery.  You can do that by running\ncelery as a worker: \n $ celery -A your_application.celery worker\n \n \n The  your_application  string has to point to your application\u2019s package\nor module that creates the  celery  object. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Celery Based Background Tasks \n Installing Celery \n Configuring Celery \n Minimal Example \n Running the Celery Worker \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Request Content Checksums \n       Next:  Subclassing Flask \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/deferredcallbacks/", "text": "\n   \n     \n     Deferred Request Callbacks \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Deferred Request Callbacks \u00b6 \n One of the design principles of Flask is that response objects are created\nand passed down a chain of potential callbacks that can modify them or\nreplace them.  When the request handling starts, there is no response\nobject yet.  It is created as necessary either by a view function or by\nsome other component in the system. \n But what happens if you want to modify the response at a point where the\nresponse does not exist yet?  A common example for that would be a\nbefore-request function that wants to set a cookie on the response object. \n One way is to avoid the situation.  Very often that is possible.  For\ninstance you can try to move that logic into an after-request callback\ninstead.  Sometimes however moving that code there is just not a very\npleasant experience or makes code look very awkward. \n As an alternative possibility you can attach a bunch of callback functions\nto the  g  object and call them at the end of the request.\nThis way you can defer code execution from anywhere in the application. \n \n The Decorator \u00b6 \n The following decorator is the key.  It registers a function on a list on\nthe  g  object: \n from   flask   import   g \n\n def   after_this_request ( f ): \n     if   not   hasattr ( g ,   'after_request_callbacks' ): \n         g . after_request_callbacks   =   [] \n     g . after_request_callbacks . append ( f ) \n     return   f \n \n \n \n \n Calling the Deferred \u00b6 \n Now you can use the  after_this_request  decorator to mark a function to\nbe called at the end of the request.  But we still need to call them.  For\nthis the following function needs to be registered as\n after_request()  callback: \n @app . after_request \n def   call_after_request_callbacks ( response ): \n     for   callback   in   getattr ( g ,   'after_request_callbacks' ,   ()): \n         callback ( response ) \n     return   response \n \n \n \n \n A Practical Example \u00b6 \n At any time during a request, we can register a function to be called at the\nend of the request.  For example you can remember the current language of the\nuser in a cookie in the before-request function: \n from   flask   import   request \n\n @app . before_request \n def   detect_user_language (): \n     language   =   request . cookies . get ( 'user_lang' ) \n     if   language   is   None : \n         language   =   guess_language_from_request () \n         @after_this_request \n         def   remember_language ( response ): \n             response . set_cookie ( 'user_lang' ,   language ) \n     g . language   =   language \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Deferred Request Callbacks \n The Decorator \n Calling the Deferred \n A Practical Example \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Streaming Contents \n       Next:  Adding HTTP Method Overrides \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/streaming/", "text": "\n   \n     \n     Streaming Contents \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Streaming Contents \u00b6 \n Sometimes you want to send an enormous amount of data to the client, much\nmore than you want to keep in memory.  When you are generating the data on\nthe fly though, how do you send that back to the client without the\nroundtrip to the filesystem? \n The answer is by using generators and direct responses. \n \n Basic Usage \u00b6 \n This is a basic view function that generates a lot of CSV data on the fly.\nThe trick is to have an inner function that uses a generator to generate\ndata and to then invoke that function and pass it to a response object: \n from   flask   import   Response \n\n @app . route ( '/large.csv' ) \n def   generate_large_csv (): \n     def   generate (): \n         for   row   in   iter_all_rows (): \n             yield   ',' . join ( row )   +   ' \\n ' \n     return   Response ( generate (),   mimetype = 'text/csv' ) \n \n \n Each  yield  expression is directly sent to the browser.  Note though\nthat some WSGI middlewares might break streaming, so be careful there in\ndebug environments with profilers and other things you might have enabled. \n \n \n Streaming from Templates \u00b6 \n The Jinja2 template engine also supports rendering templates piece by\npiece.  This functionality is not directly exposed by Flask because it is\nquite uncommon, but you can easily do it yourself: \n from   flask   import   Response \n\n def   stream_template ( template_name ,   ** context ): \n     app . update_template_context ( context ) \n     t   =   app . jinja_env . get_template ( template_name ) \n     rv   =   t . stream ( context ) \n     rv . enable_buffering ( 5 ) \n     return   rv \n\n @app . route ( '/my-large-page.html' ) \n def   render_large_template (): \n     rows   =   iter_all_rows () \n     return   Response ( stream_template ( 'the_template.html' ,   rows = rows )) \n \n \n The trick here is to get the template object from the Jinja2 environment\non the application and to call  stream()  instead of\n render()  which returns a stream object instead of a\nstring.  Since we\u2019re bypassing the Flask template render functions and\nusing the template object itself we have to make sure to update the render\ncontext ourselves by calling  update_template_context() .\nThe template is then evaluated as the stream is iterated over.  Since each\ntime you do a yield the server will flush the content to the client you\nmight want to buffer up a few items in the template which you can do with\n rv.enable_buffering(size) .   5  is a sane default. \n \n \n Streaming with Context \u00b6 \n \n New in version 0.9. \n \n Note that when you stream data, the request context is already gone the\nmoment the function executes.  Flask 0.9 provides you with a helper that\ncan keep the request context around during the execution of the\ngenerator: \n from   flask   import   stream_with_context ,   request ,   Response \n\n @app . route ( '/stream' ) \n def   streamed_response (): \n     def   generate (): \n         yield   'Hello ' \n         yield   request . args [ 'name' ] \n         yield   '!' \n     return   Response ( stream_with_context ( generate ())) \n \n \n Without the  stream_with_context()  function you would get a\n RuntimeError  at that point. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Streaming Contents \n Basic Usage \n Streaming from Templates \n Streaming with Context \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Adding a favicon \n       Next:  Deferred Request Callbacks \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/favicon/", "text": "\n   \n     \n     Adding a favicon \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Adding a favicon \u00b6 \n A \u201cfavicon\u201d is an icon used by browsers for tabs and bookmarks. This helps\nto distinguish your website and to give it a unique brand. \n A common question is how to add a favicon to a Flask application. First, of\ncourse, you need an icon. It should be 16 \u00d7 16 pixels and in the ICO file\nformat. This is not a requirement but a de-facto standard supported by all\nrelevant browsers. Put the icon in your static directory as\n favicon.ico . \n Now, to get browsers to find your icon, the correct way is to add a link\ntag in your HTML. So, for example: \n < link   rel = \"shortcut icon\"   href = \" {{   url_for ( 'static' ,   filename = 'favicon.ico' )   }} \" > \n \n \n That\u2019s all you need for most browsers, however some really old ones do not\nsupport this standard. The old de-facto standard is to serve this file,\nwith this name, at the website root. If your application is not mounted at\nthe root path of the domain you either need to configure the web server to\nserve the icon at the root or if you can\u2019t do that you\u2019re out of luck. If\nhowever your application is the root you can simply route a redirect: \n app . add_url_rule ( '/favicon.ico' , \n                  redirect_to = url_for ( 'static' ,   filename = 'favicon.ico' )) \n \n \n If you want to save the extra redirect request you can also write a view\nusing  send_from_directory() : \n import   os \n from   flask   import   send_from_directory \n\n @app . route ( '/favicon.ico' ) \n def   favicon (): \n     return   send_from_directory ( os . path . join ( app . root_path ,   'static' ), \n                                'favicon.ico' ,   mimetype = 'image/vnd.microsoft.icon' ) \n \n \n We can leave out the explicit mimetype and it will be guessed, but we may\nas well specify it to avoid the extra guessing, as it will always be the\nsame. \n The above will serve the icon via your application and if possible it\u2019s\nbetter to configure your dedicated web server to serve it; refer to the\nweb server\u2019s documentation. \n \n See also \u00b6 \n \n The  Favicon  article on\nWikipedia \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Adding a favicon \n See also \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  MongoKit in Flask \n       Next:  Streaming Contents \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/mongokit/", "text": "\n   \n     \n     MongoKit in Flask \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n MongoKit in Flask \u00b6 \n Using a document database rather than a full DBMS gets more common these days.\nThis pattern shows how to use MongoKit, a document mapper library, to\nintegrate with MongoDB. \n This pattern requires a running MongoDB server and the MongoKit library\ninstalled. \n There are two very common ways to use MongoKit.  I will outline each of them\nhere: \n \n Declarative \u00b6 \n The default behavior of MongoKit is the declarative one that is based on\ncommon ideas from Django or the SQLAlchemy declarative extension. \n Here an example  app.py  module for your application: \n from   flask   import   Flask \n from   mongokit   import   Connection ,   Document \n\n # configuration \n MONGODB_HOST   =   'localhost' \n MONGODB_PORT   =   27017 \n\n # create the little application object \n app   =   Flask ( __name__ ) \n app . config . from_object ( __name__ ) \n\n # connect to the database \n connection   =   Connection ( app . config [ 'MONGODB_HOST' ], \n                         app . config [ 'MONGODB_PORT' ]) \n \n \n To define your models, just subclass the  Document  class that is imported\nfrom MongoKit.  If you\u2019ve seen the SQLAlchemy pattern you may wonder why we do\nnot have a session and even do not define a  init_db  function here.  On the\none hand, MongoKit does not have something like a session.  This sometimes\nmakes it more to type but also makes it blazingly fast.  On the other hand,\nMongoDB is schemaless.  This means you can modify the data structure from one\ninsert query to the next without any problem.  MongoKit is just schemaless\ntoo, but implements some validation to ensure data integrity. \n Here is an example document (put this also into  app.py , e.g.): \n from   mongokit   import   ValidationError \n\n def   max_length ( length ): \n     def   validate ( value ): \n         if   len ( value )   <=   length : \n             return   True \n         # must have %s in error format string to have mongokit place key in there \n         raise   ValidationError ( ' %s  must be at most  {}  characters long' . format ( length )) \n     return   validate \n\n class   User ( Document ): \n     structure   =   { \n         'name' :   unicode , \n         'email' :   unicode , \n     } \n     validators   =   { \n         'name' :   max_length ( 50 ), \n         'email' :   max_length ( 120 ) \n     } \n     use_dot_notation   =   True \n     def   __repr__ ( self ): \n         return   '<User  %r >'   %   ( self . name ) \n\n # register the User document with our current connection \n connection . register ([ User ]) \n \n \n This example shows you how to define your schema (named structure), a\nvalidator for the maximum character length and uses a special MongoKit feature\ncalled  use_dot_notation .  Per default MongoKit behaves like a python\ndictionary but with  use_dot_notation  set to  True  you can use your\ndocuments like you use models in nearly any other ORM by using dots to\nseparate between attributes. \n You can insert entries into the database like this: \n >>>  from   yourapplication.database   import   connection \n >>>  from   yourapplication.models   import   User \n >>>  collection   =   connection [ 'test' ] . users \n >>>  user   =   collection . User () \n >>>  user [ 'name' ]   =   u 'admin' \n >>>  user [ 'email' ]   =   u 'admin@localhost' \n >>>  user . save () \n \n \n Note that MongoKit is kinda strict with used column types, you must not use a\ncommon  str  type for either  name  or  email  but unicode. \n Querying is simple as well: \n >>>  list ( collection . User . find ()) \n [<User u'admin'>] \n >>>  collection . User . find_one ({ 'name' :   u 'admin' }) \n <User u'admin'> \n \n \n \n \n PyMongo Compatibility Layer \u00b6 \n If you just want to use PyMongo, you can do that with MongoKit as well.  You\nmay use this process if you need the best performance to get.  Note that this\nexample does not show how to couple it with Flask, see the above MongoKit code\nfor examples: \n from   MongoKit   import   Connection \n\n connection   =   Connection () \n \n \n To insert data you can use the  insert  method.  We have to get a\ncollection first, this is somewhat the same as a table in the SQL world. \n >>>  collection   =   connection [ 'test' ] . users \n >>>  user   =   { 'name' :   u 'admin' ,   'email' :   u 'admin@localhost' } \n >>>  collection . insert ( user ) \n \n \n MongoKit will automatically commit for us. \n To query your database, you use the collection directly: \n >>>  list ( collection . find ()) \n [{u'_id': ObjectId('4c271729e13823182f000000'), u'name': u'admin', u'email': u'admin@localhost'}] \n >>>  collection . find_one ({ 'name' :   u 'admin' }) \n {u'_id': ObjectId('4c271729e13823182f000000'), u'name': u'admin', u'email': u'admin@localhost'} \n \n \n These results are also dict-like objects: \n >>>  r   =   collection . find_one ({ 'name' :   u 'admin' }) \n >>>  r [ 'email' ] \n u'admin@localhost' \n \n \n For more information about MongoKit, head over to the\n website . \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n MongoKit in Flask \n Declarative \n PyMongo Compatibility Layer \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Lazily Loading Views \n       Next:  Adding a favicon \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/flashing/", "text": "\n   \n     \n     Message Flashing \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Message Flashing \u00b6 \n Good applications and user interfaces are all about feedback.  If the user\ndoes not get enough feedback they will probably end up hating the\napplication.  Flask provides a really simple way to give feedback to a\nuser with the flashing system.  The flashing system basically makes it\npossible to record a message at the end of a request and access it next\nrequest and only next request.  This is usually combined with a layout\ntemplate that does this. Note that browsers and sometimes web servers enforce\na limit on cookie sizes. This means that flashing messages that are too\nlarge for session cookies causes message flashing to fail silently. \n \n Simple Flashing \u00b6 \n So here is a full example: \n from   flask   import   Flask ,   flash ,   redirect ,   render_template ,  \\\n      request ,   url_for \n\n app   =   Flask ( __name__ ) \n app . secret_key   =   'some_secret' \n\n @app . route ( '/' ) \n def   index (): \n     return   render_template ( 'index.html' ) \n\n @app . route ( '/login' ,   methods = [ 'GET' ,   'POST' ]) \n def   login (): \n     error   =   None \n     if   request . method   ==   'POST' : \n         if   request . form [ 'username' ]   !=   'admin'   or  \\\n                 request . form [ 'password' ]   !=   'secret' : \n             error   =   'Invalid credentials' \n         else : \n             flash ( 'You were successfully logged in' ) \n             return   redirect ( url_for ( 'index' )) \n     return   render_template ( 'login.html' ,   error = error ) \n \n \n And here is the  layout.html  template which does the magic: \n <!doctype html> \n < title > My Application </ title > \n {%   with   messages   =   get_flashed_messages ()   %} \n   {%   if   messages   %} \n     < ul   class = flashes > \n     {%   for   message   in   messages   %} \n       < li > {{   message   }} </ li > \n     {%   endfor   %} \n     </ ul > \n   {%   endif   %} \n {%   endwith   %} \n {%   block   body   %}{%   endblock   %} \n \n \n Here is the  index.html  template which inherits from  layout.html : \n {%   extends   \"layout.html\"   %} \n {%   block   body   %} \n   < h1 > Overview </ h1 > \n   < p > Do you want to  < a   href = \" {{   url_for ( 'login' )   }} \" > log in? </ a > \n {%   endblock   %} \n \n \n And here is the  login.html  template which also inherits from\n layout.html : \n {%   extends   \"layout.html\"   %} \n {%   block   body   %} \n   < h1 > Login </ h1 > \n   {%   if   error   %} \n     < p   class = error >< strong > Error: </ strong >   {{   error   }} \n   {%   endif   %} \n   < form   method = post > \n     < dl > \n       < dt > Username:\n       < dd >< input   type = text   name = username   value = \" {{ \n           request.form.username   }} \" > \n       < dt > Password:\n       < dd >< input   type = password   name = password > \n     </ dl > \n     < p >< input   type = submit   value = Login > \n   </ form > \n {%   endblock   %} \n \n \n \n \n Flashing With Categories \u00b6 \n \n New in version 0.3. \n \n It is also possible to provide categories when flashing a message.  The\ndefault category if nothing is provided is  'message' .  Alternative\ncategories can be used to give the user better feedback.  For example\nerror messages could be displayed with a red background. \n To flash a message with a different category, just use the second argument\nto the  flash()  function: \n flash ( u 'Invalid password provided' ,   'error' ) \n \n \n Inside the template you then have to tell the\n get_flashed_messages()  function to also return the\ncategories.  The loop looks slightly different in that situation then: \n {%   with   messages   =   get_flashed_messages ( with_categories = true )   %} \n   {%   if   messages   %} \n     < ul   class = flashes > \n     {%   for   category ,   message   in   messages   %} \n       < li   class = \" {{   category   }} \" > {{   message   }} </ li > \n     {%   endfor   %} \n     </ ul > \n   {%   endif   %} \n {%   endwith   %} \n \n \n This is just one example of how to render these flashed messages.  One\nmight also use the category to add a prefix such as\n <strong>Error:</strong>  to the message. \n \n \n Filtering Flash Messages \u00b6 \n \n New in version 0.9. \n \n Optionally you can pass a list of categories which filters the results of\n get_flashed_messages() .  This is useful if you wish to\nrender each category in a separate block. \n {%   with   errors   =   get_flashed_messages ( category_filter =[ \"error\" ])   %} \n {%   if   errors   %} \n < div   class = \"alert-message block-message error\" > \n   < a   class = \"close\"   href = \"#\" > \u00d7 </ a > \n   < ul > \n     {% -  for   msg   in   errors   %} \n     < li > {{   msg   }} </ li > \n     {%   endfor  - %} \n   </ ul > \n </ div > \n {%   endif   %} \n {%   endwith   %} \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Message Flashing \n Simple Flashing \n Flashing With Categories \n Filtering Flash Messages \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Template Inheritance \n       Next:  AJAX with jQuery \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/templateinheritance/", "text": "\n   \n     \n     Template Inheritance \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Template Inheritance \u00b6 \n The most powerful part of Jinja is template inheritance. Template inheritance\nallows you to build a base \u201cskeleton\u201d template that contains all the common\nelements of your site and defines  blocks  that child templates can override. \n Sounds complicated but is very basic. It\u2019s easiest to understand it by starting\nwith an example. \n \n Base Template \u00b6 \n This template, which we\u2019ll call  layout.html , defines a simple HTML skeleton\ndocument that you might use for a simple two-column page. It\u2019s the job of\n\u201cchild\u201d templates to fill the empty blocks with content: \n <!doctype html> \n < html > \n   < head > \n     {%   block   head   %} \n     < link   rel = \"stylesheet\"   href = \" {{   url_for ( 'static' ,   filename = 'style.css' )   }} \" > \n     < title > {%   block   title   %}{%   endblock   %}  - My Webpage </ title > \n     {%   endblock   %} \n   </ head > \n   < body > \n     < div   id = \"content\" > {%   block   content   %}{%   endblock   %} </ div > \n     < div   id = \"footer\" > \n       {%   block   footer   %} \n       &copy;  Copyright 2010 by  < a   href = \"http://domain.invalid/\" > you </ a > .\n       {%   endblock   %} \n     </ div > \n   </ body > \n </ html > \n \n \n In this example, the  {%   block   %}  tags define four blocks that child templates\ncan fill in. All the  block  tag does is tell the template engine that a\nchild template may override those portions of the template. \n \n \n Child Template \u00b6 \n A child template might look like this: \n {%   extends   \"layout.html\"   %} \n {%   block   title   %} Index {%   endblock   %} \n {%   block   head   %} \n   {{   super ()   }} \n   < style   type = \"text/css\" > \n     . important   {   color :   #336699 ;   } \n   </ style > \n {%   endblock   %} \n {%   block   content   %} \n   < h1 > Index </ h1 > \n   < p   class = \"important\" > \n    Welcome on my awesome homepage.\n {%   endblock   %} \n \n \n The  {%   extends   %}  tag is the key here. It tells the template engine that\nthis template \u201cextends\u201d another template.  When the template system evaluates\nthis template, first it locates the parent.  The extends tag must be the\nfirst tag in the template.  To render the contents of a block defined in\nthe parent template, use  {{   super()   }} . \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Template Inheritance \n Base Template \n Child Template \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Form Validation with WTForms \n       Next:  Message Flashing \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/wtforms/", "text": "\n   \n     \n     Form Validation with WTForms \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Form Validation with WTForms \u00b6 \n When you have to work with form data submitted by a browser view, code\nquickly becomes very hard to read.  There are libraries out there designed\nto make this process easier to manage.  One of them is  WTForms  which we\nwill handle here.  If you find yourself in the situation of having many\nforms, you might want to give it a try. \n When you are working with WTForms you have to define your forms as classes\nfirst.  I recommend breaking up the application into multiple modules\n( Larger Applications ) for that and adding a separate module for the\nforms. \n \n Getting the most out of WTForms with an Extension \n The  Flask-WTF  extension expands on this pattern and adds a\nfew little helpers that make working with forms and Flask more\nfun.  You can get it from  PyPI . \n \n \n The Forms \u00b6 \n This is an example form for a typical registration page: \n from   wtforms   import   Form ,   BooleanField ,   StringField ,   PasswordField ,   validators \n\n class   RegistrationForm ( Form ): \n     username   =   StringField ( 'Username' ,   [ validators . Length ( min = 4 ,   max = 25 )]) \n     email   =   StringField ( 'Email Address' ,   [ validators . Length ( min = 6 ,   max = 35 )]) \n     password   =   PasswordField ( 'New Password' ,   [ \n         validators . DataRequired (), \n         validators . EqualTo ( 'confirm' ,   message = 'Passwords must match' ) \n     ]) \n     confirm   =   PasswordField ( 'Repeat Password' ) \n     accept_tos   =   BooleanField ( 'I accept the TOS' ,   [ validators . DataRequired ()]) \n \n \n \n \n In the View \u00b6 \n In the view function, the usage of this form looks like this: \n @app . route ( '/register' ,   methods = [ 'GET' ,   'POST' ]) \n def   register (): \n     form   =   RegistrationForm ( request . form ) \n     if   request . method   ==   'POST'   and   form . validate (): \n         user   =   User ( form . username . data ,   form . email . data , \n                     form . password . data ) \n         db_session . add ( user ) \n         flash ( 'Thanks for registering' ) \n         return   redirect ( url_for ( 'login' )) \n     return   render_template ( 'register.html' ,   form = form ) \n \n \n Notice we\u2019re implying that the view is using SQLAlchemy here\n( SQLAlchemy in Flask ), but that\u2019s not a requirement, of course.  Adapt\nthe code as necessary. \n Things to remember: \n \n create the form from the request  form  value if\nthe data is submitted via the HTTP  POST  method and\n args  if the data is submitted as  GET . \n to validate the data, call the  validate() \nmethod, which will return  True  if the data validates,  False \notherwise. \n to access individual values from the form, access  form.<NAME>.data . \n \n \n \n Forms in Templates \u00b6 \n Now to the template side.  When you pass the form to the templates, you can\neasily render them there.  Look at the following example template to see\nhow easy this is.  WTForms does half the form generation for us already.\nTo make it even nicer, we can write a macro that renders a field with\nlabel and a list of errors if there are any. \n Here\u2019s an example  _formhelpers.html  template with such a macro: \n {%   macro   render_field ( field )   %} \n   < dt > {{   field.label   }} \n   < dd > {{   field (** kwargs )| safe   }} \n   {%   if   field.errors   %} \n     < ul   class = errors > \n     {%   for   error   in   field.errors   %} \n       < li > {{   error   }} </ li > \n     {%   endfor   %} \n     </ ul > \n   {%   endif   %} \n   </ dd > \n {%   endmacro   %} \n \n \n This macro accepts a couple of keyword arguments that are forwarded to\nWTForm\u2019s field function, which renders the field for us.  The keyword\narguments will be inserted as HTML attributes.  So, for example, you can\ncall  render_field(form.username,   class='username')  to add a class to\nthe input element.  Note that WTForms returns standard Python unicode\nstrings, so we have to tell Jinja2 that this data is already HTML-escaped\nwith the  |safe  filter. \n Here is the  register.html  template for the function we used above, which\ntakes advantage of the  _formhelpers.html  template: \n {%   from   \"_formhelpers.html\"   import   render_field   %} \n < form   method = post > \n   < dl > \n     {{   render_field ( form.username )   }} \n     {{   render_field ( form.email )   }} \n     {{   render_field ( form.password )   }} \n     {{   render_field ( form.confirm )   }} \n     {{   render_field ( form.accept_tos )   }} \n   </ dl > \n   < p >< input   type = submit   value = Register > \n </ form > \n \n \n For more information about WTForms, head over to the  WTForms\nwebsite . \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Form Validation with WTForms \n The Forms \n In the View \n Forms in Templates \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  View Decorators \n       Next:  Template Inheritance \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/viewdecorators/", "text": "\n   \n     \n     View Decorators \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n View Decorators \u00b6 \n Python has a really interesting feature called function decorators.  This\nallows some really neat things for web applications.  Because each view in\nFlask is a function, decorators can be used to inject additional\nfunctionality to one or more functions.  The  route() \ndecorator is the one you probably used already.  But there are use cases\nfor implementing your own decorator.  For instance, imagine you have a\nview that should only be used by people that are logged in.  If a user\ngoes to the site and is not logged in, they should be redirected to the\nlogin page.  This is a good example of a use case where a decorator is an\nexcellent solution. \n \n Login Required Decorator \u00b6 \n So let\u2019s implement such a decorator.  A decorator is a function that\nwraps and replaces another function.  Since the original function is\nreplaced, you need to remember to copy the original function\u2019s information\nto the new function.  Use  functools.wraps()  to handle this for you. \n This example assumes that the login page is called  'login'  and that\nthe current user is stored in  g.user  and is  None  if there is no-one\nlogged in. \n from   functools   import   wraps \n from   flask   import   g ,   request ,   redirect ,   url_for \n\n def   login_required ( f ): \n     @wraps ( f ) \n     def   decorated_function ( * args ,   ** kwargs ): \n         if   g . user   is   None : \n             return   redirect ( url_for ( 'login' ,   next = request . url )) \n         return   f ( * args ,   ** kwargs ) \n     return   decorated_function \n \n \n To use the decorator, apply it as innermost decorator to a view function.\nWhen applying further decorators, always remember\nthat the  route()  decorator is the outermost. \n @app . route ( '/secret_page' ) \n @login_required \n def   secret_page (): \n     pass \n \n \n \n Note \n The  next  value will exist in  request.args  after a  GET  request for\nthe login page.  You\u2019ll have to pass it along when sending the  POST  request\nfrom the login form.  You can do this with a hidden input tag, then retrieve it\nfrom  request.form  when logging the user in. \n < input   type = \"hidden\"   value = \"{{ request.args.get('next', '') }}\" /> \n \n \n \n \n \n Caching Decorator \u00b6 \n Imagine you have a view function that does an expensive calculation and\nbecause of that you would like to cache the generated results for a\ncertain amount of time.  A decorator would be nice for that.  We\u2019re\nassuming you have set up a cache like mentioned in  Caching . \n Here is an example cache function.  It generates the cache key from a\nspecific prefix (actually a format string) and the current path of the\nrequest.  Notice that we are using a function that first creates the\ndecorator that then decorates the function.  Sounds awful? Unfortunately\nit is a little bit more complex, but the code should still be\nstraightforward to read. \n The decorated function will then work as follows \n \n get the unique cache key for the current request base on the current\npath. \n get the value for that key from the cache. If the cache returned\nsomething we will return that value. \n otherwise the original function is called and the return value is\nstored in the cache for the timeout provided (by default 5 minutes). \n \n Here the code: \n from   functools   import   wraps \n from   flask   import   request \n\n def   cached ( timeout = 5   *   60 ,   key = 'view/ %s ' ): \n     def   decorator ( f ): \n         @wraps ( f ) \n         def   decorated_function ( * args ,   ** kwargs ): \n             cache_key   =   key   %   request . path \n             rv   =   cache . get ( cache_key ) \n             if   rv   is   not   None : \n                 return   rv \n             rv   =   f ( * args ,   ** kwargs ) \n             cache . set ( cache_key ,   rv ,   timeout = timeout ) \n             return   rv \n         return   decorated_function \n     return   decorator \n \n \n Notice that this assumes an instantiated  cache  object is available, see\n Caching  for more information. \n \n \n Templating Decorator \u00b6 \n A common pattern invented by the TurboGears guys a while back is a\ntemplating decorator.  The idea of that decorator is that you return a\ndictionary with the values passed to the template from the view function\nand the template is automatically rendered.  With that, the following\nthree examples do exactly the same: \n @app . route ( '/' ) \n def   index (): \n     return   render_template ( 'index.html' ,   value = 42 ) \n\n @app . route ( '/' ) \n @templated ( 'index.html' ) \n def   index (): \n     return   dict ( value = 42 ) \n\n @app . route ( '/' ) \n @templated () \n def   index (): \n     return   dict ( value = 42 ) \n \n \n As you can see, if no template name is provided it will use the endpoint\nof the URL map with dots converted to slashes +  '.html' .  Otherwise\nthe provided template name is used.  When the decorated function returns,\nthe dictionary returned is passed to the template rendering function.  If\n None  is returned, an empty dictionary is assumed, if something else than\na dictionary is returned we return it from the function unchanged.  That\nway you can still use the redirect function or return simple strings. \n Here is the code for that decorator: \n from   functools   import   wraps \n from   flask   import   request ,   render_template \n\n def   templated ( template = None ): \n     def   decorator ( f ): \n         @wraps ( f ) \n         def   decorated_function ( * args ,   ** kwargs ): \n             template_name   =   template \n             if   template_name   is   None : \n                 template_name   =   request . endpoint  \\\n                     . replace ( '.' ,   '/' )   +   '.html' \n             ctx   =   f ( * args ,   ** kwargs ) \n             if   ctx   is   None : \n                 ctx   =   {} \n             elif   not   isinstance ( ctx ,   dict ): \n                 return   ctx \n             return   render_template ( template_name ,   ** ctx ) \n         return   decorated_function \n     return   decorator \n \n \n \n \n Endpoint Decorator \u00b6 \n When you want to use the werkzeug routing system for more flexibility you\nneed to map the endpoint as defined in the  Rule \nto a view function. This is possible with this decorator. For example: \n from   flask   import   Flask \n from   werkzeug.routing   import   Rule \n\n app   =   Flask ( __name__ ) \n app . url_map . add ( Rule ( '/' ,   endpoint = 'index' )) \n\n @app . endpoint ( 'index' ) \n def   my_index (): \n     return   \"Hello world\" \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n View Decorators \n Login Required Decorator \n Caching Decorator \n Templating Decorator \n Endpoint Decorator \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Caching \n       Next:  Form Validation with WTForms \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/lazyloading/", "text": "\n   \n     \n     Lazily Loading Views \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Lazily Loading Views \u00b6 \n Flask is usually used with the decorators.  Decorators are simple and you\nhave the URL right next to the function that is called for that specific\nURL.  However there is a downside to this approach: it means all your code\nthat uses decorators has to be imported upfront or Flask will never\nactually find your function. \n This can be a problem if your application has to import quick.  It might\nhave to do that on systems like Google\u2019s App Engine or other systems.  So\nif you suddenly notice that your application outgrows this approach you\ncan fall back to a centralized URL mapping. \n The system that enables having a central URL map is the\n add_url_rule()  function.  Instead of using decorators,\nyou have a file that sets up the application with all URLs. \n \n Converting to Centralized URL Map \u00b6 \n Imagine the current application looks somewhat like this: \n from   flask   import   Flask \n app   =   Flask ( __name__ ) \n\n @app . route ( '/' ) \n def   index (): \n     pass \n\n @app . route ( '/user/<username>' ) \n def   user ( username ): \n     pass \n \n \n Then, with the centralized approach you would have one file with the views\n( views.py ) but without any decorator: \n def   index (): \n     pass \n\n def   user ( username ): \n     pass \n \n \n And then a file that sets up an application which maps the functions to\nURLs: \n from   flask   import   Flask \n from   yourapplication   import   views \n app   =   Flask ( __name__ ) \n app . add_url_rule ( '/' ,   view_func = views . index ) \n app . add_url_rule ( '/user/<username>' ,   view_func = views . user ) \n \n \n \n \n Loading Late \u00b6 \n So far we only split up the views and the routing, but the module is still\nloaded upfront.  The trick is to actually load the view function as needed.\nThis can be accomplished with a helper class that behaves just like a\nfunction but internally imports the real function on first use: \n from   werkzeug   import   import_string ,   cached_property \n\n class   LazyView ( object ): \n\n     def   __init__ ( self ,   import_name ): \n         self . __module__ ,   self . __name__   =   import_name . rsplit ( '.' ,   1 ) \n         self . import_name   =   import_name \n\n     @cached_property \n     def   view ( self ): \n         return   import_string ( self . import_name ) \n\n     def   __call__ ( self ,   * args ,   ** kwargs ): \n         return   self . view ( * args ,   ** kwargs ) \n \n \n What\u2019s important here is is that  __module__  and  __name__  are properly\nset.  This is used by Flask internally to figure out how to name the\nURL rules in case you don\u2019t provide a name for the rule yourself. \n Then you can define your central place to combine the views like this: \n from   flask   import   Flask \n from   yourapplication.helpers   import   LazyView \n app   =   Flask ( __name__ ) \n app . add_url_rule ( '/' , \n                  view_func = LazyView ( 'yourapplication.views.index' )) \n app . add_url_rule ( '/user/<username>' , \n                  view_func = LazyView ( 'yourapplication.views.user' )) \n \n \n You can further optimize this in terms of amount of keystrokes needed to\nwrite this by having a function that calls into\n add_url_rule()  by prefixing a string with the project\nname and a dot, and by wrapping  view_func  in a  LazyView  as needed. \n def   url ( import_name ,   url_rules = [],   ** options ): \n     view   =   LazyView ( 'yourapplication.'   +   import_name ) \n     for   url_rule   in   url_rules : \n         app . add_url_rule ( url_rule ,   view_func = view ,   ** options ) \n\n # add a single route to the index view \n url ( 'views.index' ,   [ '/' ]) \n\n # add two routes to a single function endpoint \n url_rules   =   [ '/user/' , '/user/<username>' ] \n url ( 'views.user' ,   url_rules ) \n \n \n One thing to keep in mind is that before and after request handlers have\nto be in a file that is imported upfront to work properly on the first\nrequest.  The same goes for any kind of remaining decorator. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Lazily Loading Views \n Converting to Centralized URL Map \n Loading Late \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Custom Error Pages \n       Next:  MongoKit in Flask \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/errorpages/", "text": "\n   \n     \n     Custom Error Pages \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Custom Error Pages \u00b6 \n Flask comes with a handy  abort()  function that aborts a\nrequest with an HTTP error code early.  It will also provide a plain black\nand white error page for you with a basic description, but nothing fancy. \n Depending on the error code it is less or more likely for the user to\nactually see such an error. \n \n Common Error Codes \u00b6 \n The following error codes are some that are often displayed to the user,\neven if the application behaves correctly: \n \n 404 Not Found \n The good old \u201cchap, you made a mistake typing that URL\u201d message.  So\ncommon that even novices to the internet know that 404 means: damn,\nthe thing I was looking for is not there.  It\u2019s a very good idea to\nmake sure there is actually something useful on a 404 page, at least a\nlink back to the index. \n 403 Forbidden \n If you have some kind of access control on your website, you will have\nto send a 403 code for disallowed resources.  So make sure the user\nis not lost when they try to access a forbidden resource. \n 410 Gone \n Did you know that there the \u201c404 Not Found\u201d has a brother named \u201c410\nGone\u201d?  Few people actually implement that, but the idea is that\nresources that previously existed and got deleted answer with 410\ninstead of 404.  If you are not deleting documents permanently from\nthe database but just mark them as deleted, do the user a favour and\nuse the 410 code instead and display a message that what they were\nlooking for was deleted for all eternity. \n 500 Internal Server Error \n Usually happens on programming errors or if the server is overloaded.\nA terribly good idea is to have a nice page there, because your\napplication  will  fail sooner or later (see also:\n Application Errors ). \n \n \n \n Error Handlers \u00b6 \n An error handler is a function, just like a view function, but it is\ncalled when an error happens and is passed that error.  The error is most\nlikely a  HTTPException , but in one case it\ncan be a different error: a handler for internal server errors will be\npassed other exception instances as well if they are uncaught. \n An error handler is registered with the  errorhandler() \ndecorator and the error code of the exception.  Keep in mind that Flask\nwill  not  set the error code for you, so make sure to also provide the\nHTTP status code when returning a response. \n Please note that if you add an error handler for \u201c500 Internal Server\nError\u201d, Flask will not trigger it if it\u2019s running in Debug mode. \n Here an example implementation for a \u201c404 Page Not Found\u201d exception: \n from   flask   import   render_template \n\n @app . errorhandler ( 404 ) \n def   page_not_found ( e ): \n     return   render_template ( '404.html' ),   404 \n \n \n An example template might be this: \n {%   extends   \"layout.html\"   %} \n {%   block   title   %} Page Not Found {%   endblock   %} \n {%   block   body   %} \n   < h1 > Page Not Found </ h1 > \n   < p > What you were looking for is just not there.\n   < p >< a   href = \" {{   url_for ( 'index' )   }} \" > go somewhere nice </ a > \n {%   endblock   %} \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Custom Error Pages \n Common Error Codes \n Error Handlers \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  AJAX with jQuery \n       Next:  Lazily Loading Views \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/jquery/", "text": "\n   \n     \n     AJAX with jQuery \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n AJAX with jQuery \u00b6 \n jQuery  is a small JavaScript library commonly used to simplify working\nwith the DOM and JavaScript in general.  It is the perfect tool to make\nweb applications more dynamic by exchanging JSON between server and\nclient. \n JSON itself is a very lightweight transport format, very similar to how\nPython primitives (numbers, strings, dicts and lists) look like which is\nwidely supported and very easy to parse.  It became popular a few years\nago and quickly replaced XML as transport format in web applications. \n \n Loading jQuery \u00b6 \n In order to use jQuery, you have to download it first and place it in the\nstatic folder of your application and then ensure it\u2019s loaded.  Ideally\nyou have a layout template that is used for all pages where you just have\nto add a script statement to the bottom of your  <body>  to load jQuery: \n < script   type = text/javascript   src = \"{{ \n   url_for('static', filename='jquery.js') }}\" ></ script > \n \n \n Another method is using Google\u2019s  AJAX Libraries API  to load jQuery: \n < script   src = \"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\" ></ script > \n < script > window . jQuery   ||   document . write ( '<script src=\"{{ \n   url_for(' static ', filename=' jquery . js ') }}\">\\x3C/script>' )</ script > \n \n \n In this case you have to put jQuery into your static folder as a fallback, but it will\nfirst try to load it directly from Google. This has the advantage that your\nwebsite will probably load faster for users if they went to at least one\nother website before using the same jQuery version from Google because it\nwill already be in the browser cache. \n \n \n Where is My Site? \u00b6 \n Do you know where your application is?  If you are developing the answer\nis quite simple: it\u2019s on localhost port something and directly on the root\nof that server.  But what if you later decide to move your application to\na different location?  For example to  http://example.com/myapp ?  On\nthe server side this never was a problem because we were using the handy\n url_for()  function that could answer that question for\nus, but if we are using jQuery we should not hardcode the path to\nthe application but make that dynamic, so how can we do that? \n A simple method would be to add a script tag to our page that sets a\nglobal variable to the prefix to the root of the application.  Something\nlike this: \n < script   type = text/javascript > \n   $SCRIPT_ROOT   =   {{   request.script_root | tojson | safe   }} ; \n </ script > \n \n \n The  |safe  is necessary in Flask before 0.10 so that Jinja does not\nescape the JSON encoded string with HTML rules.  Usually this would be\nnecessary, but we are inside a  script  block here where different rules\napply. \n \n Information for Pros \n In HTML the  script  tag is declared  CDATA  which means that entities\nwill not be parsed.  Everything until  </script>  is handled as script.\nThis also means that there must never be any  </  between the script\ntags.   |tojson  is kind enough to do the right thing here and\nescape slashes for you ( {{   \"</script>\"|tojson|safe   }}  is rendered as\n \"<\\/script>\" ). \n In Flask 0.10 it goes a step further and escapes all HTML tags with\nunicode escapes.  This makes it possible for Flask to automatically\nmark the result as HTML safe. \n \n \n \n JSON View Functions \u00b6 \n Now let\u2019s create a server side function that accepts two URL arguments of\nnumbers which should be added together and then sent back to the\napplication in a JSON object.  This is a really ridiculous example and is\nsomething you usually would do on the client side alone, but a simple\nexample that shows how you would use jQuery and Flask nonetheless: \n from   flask   import   Flask ,   jsonify ,   render_template ,   request \n app   =   Flask ( __name__ ) \n\n @app . route ( '/_add_numbers' ) \n def   add_numbers (): \n     a   =   request . args . get ( 'a' ,   0 ,   type = int ) \n     b   =   request . args . get ( 'b' ,   0 ,   type = int ) \n     return   jsonify ( result = a   +   b ) \n\n @app . route ( '/' ) \n def   index (): \n     return   render_template ( 'index.html' ) \n \n \n As you can see I also added an  index  method here that renders a\ntemplate.  This template will load jQuery as above and have a little form\nwe can add two numbers and a link to trigger the function on the server\nside. \n Note that we are using the  get()  method here\nwhich will never fail.  If the key is missing a default value (here  0 )\nis returned.  Furthermore it can convert values to a specific type (like\nin our case  int ).  This is especially handy for code that is\ntriggered by a script (APIs, JavaScript etc.) because you don\u2019t need\nspecial error reporting in that case. \n \n \n The HTML \u00b6 \n Your index.html template either has to extend a  layout.html  template with\njQuery loaded and the  $SCRIPT_ROOT  variable set, or do that on the top.\nHere\u2019s the HTML code needed for our little application ( index.html ).\nNotice that we also drop the script directly into the HTML here.  It is\nusually a better idea to have that in a separate script file: \n < script   type = text/javascript > \n   $ ( function ()   { \n     $ ( 'a#calculate' ). bind ( 'click' ,   function ()   { \n       $ . getJSON ( $SCRIPT_ROOT   +   '/_add_numbers' ,   { \n         a :   $ ( 'input[name=\"a\"]' ). val (), \n         b :   $ ( 'input[name=\"b\"]' ). val () \n       },   function ( data )   { \n         $ ( \"#result\" ). text ( data . result ); \n       }); \n       return   false ; \n     }); \n   }); \n </ script > \n < h1 > jQuery Example </ h1 > \n < p >< input   type = text   size = 5   name = a >  +\n    < input   type = text   size = 5   name = b >  =\n    < span   id = result > ? </ span > \n < p >< a   href = #   id = calculate > calculate server side </ a > \n \n \n I won\u2019t go into detail here about how jQuery works, just a very quick\nexplanation of the little bit of code above: \n \n $(function()   {   ...   })  specifies code that should run once the\nbrowser is done loading the basic parts of the page. \n $('selector')  selects an element and lets you operate on it. \n element.bind('event',   func)  specifies a function that should run\nwhen the user clicked on the element.  If that function returns\n false , the default behavior will not kick in (in this case, navigate\nto the  #  URL). \n $.getJSON(url,   data,   func)  sends a  GET  request to  url  and will\nsend the contents of the  data  object as query parameters.  Once the\ndata arrived, it will call the given function with the return value as\nargument.  Note that we can use the  $SCRIPT_ROOT  variable here that\nwe set earlier. \n \n If you don\u2019t get the whole picture, download the  sourcecode\nfor this example \nfrom GitHub. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n AJAX with jQuery \n Loading jQuery \n Where is My Site? \n JSON View Functions \n The HTML \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Message Flashing \n       Next:  Custom Error Pages \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/caching/", "text": "\n   \n     \n     Caching \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Caching \u00b6 \n When your application runs slow, throw some caches in.  Well, at least\nit\u2019s the easiest way to speed up things.  What does a cache do?  Say you\nhave a function that takes some time to complete but the results would\nstill be good enough if they were 5 minutes old.  So then the idea is that\nyou actually put the result of that calculation into a cache for some\ntime. \n Flask itself does not provide caching for you, but Werkzeug, one of the\nlibraries it is based on, has some very basic cache support.  It supports\nmultiple cache backends, normally you want to use a memcached server. \n \n Setting up a Cache \u00b6 \n You create a cache object once and keep it around, similar to how\n Flask  objects are created.  If you are using the\ndevelopment server you can create a\n SimpleCache  object, that one is a simple\ncache that keeps the item stored in the memory of the Python interpreter: \n from   werkzeug.contrib.cache   import   SimpleCache \n cache   =   SimpleCache () \n \n \n If you want to use memcached, make sure to have one of the memcache modules\nsupported (you get them from  PyPI ) and a\nmemcached server running somewhere.  This is how you connect to such an\nmemcached server then: \n from   werkzeug.contrib.cache   import   MemcachedCache \n cache   =   MemcachedCache ([ '127.0.0.1:11211' ]) \n \n \n If you are using App Engine, you can connect to the App Engine memcache\nserver easily: \n from   werkzeug.contrib.cache   import   GAEMemcachedCache \n cache   =   GAEMemcachedCache () \n \n \n \n \n Using a Cache \u00b6 \n Now how can one use such a cache?  There are two very important\noperations:  get()  and\n set() .  This is how to use them: \n To get an item from the cache call\n get()  with a string as key name.\nIf something is in the cache, it is returned.  Otherwise that function\nwill return  None : \n rv   =   cache . get ( 'my-item' ) \n \n \n To add items to the cache, use the  set() \nmethod instead.  The first argument is the key and the second the value\nthat should be set.  Also a timeout can be provided after which the cache\nwill automatically remove item. \n Here a full example how this looks like normally: \n def   get_my_item (): \n     rv   =   cache . get ( 'my-item' ) \n     if   rv   is   None : \n         rv   =   calculate_value () \n         cache . set ( 'my-item' ,   rv ,   timeout = 5   *   60 ) \n     return   rv \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Caching \n Setting up a Cache \n Using a Cache \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Uploading Files \n       Next:  View Decorators \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/fileuploads/", "text": "\n   \n     \n     Uploading Files \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Uploading Files \u00b6 \n Ah yes, the good old problem of file uploads.  The basic idea of file\nuploads is actually quite simple.  It basically works like this: \n \n A  <form>  tag is marked with  enctype=multipart/form-data \nand an  <input   type=file>  is placed in that form. \n The application accesses the file from the  files \ndictionary on the request object. \n use the  save()  method of the file to save\nthe file permanently somewhere on the filesystem. \n \n \n A Gentle Introduction \u00b6 \n Let\u2019s start with a very basic application that uploads a file to a\nspecific upload folder and displays a file to the user.  Let\u2019s look at the\nbootstrapping code for our application: \n import   os \n from   flask   import   Flask ,   request ,   redirect ,   url_for \n from   werkzeug.utils   import   secure_filename \n\n UPLOAD_FOLDER   =   '/path/to/the/uploads' \n ALLOWED_EXTENSIONS   =   set ([ 'txt' ,   'pdf' ,   'png' ,   'jpg' ,   'jpeg' ,   'gif' ]) \n\n app   =   Flask ( __name__ ) \n app . config [ 'UPLOAD_FOLDER' ]   =   UPLOAD_FOLDER \n \n \n So first we need a couple of imports.  Most should be straightforward, the\n werkzeug.secure_filename()  is explained a little bit later.  The\n UPLOAD_FOLDER  is where we will store the uploaded files and the\n ALLOWED_EXTENSIONS  is the set of allowed file extensions. \n Why do we limit the extensions that are allowed?  You probably don\u2019t want\nyour users to be able to upload everything there if the server is directly\nsending out the data to the client.  That way you can make sure that users\nare not able to upload HTML files that would cause XSS problems (see\n Cross-Site Scripting (XSS) ).  Also make sure to disallow  .php  files if the server\nexecutes them, but who has PHP installed on their server, right?  :) \n Next the functions that check if an extension is valid and that uploads\nthe file and redirects the user to the URL for the uploaded file: \n def   allowed_file ( filename ): \n     return   '.'   in   filename   and  \\\n            filename . rsplit ( '.' ,   1 )[ 1 ] . lower ()   in   ALLOWED_EXTENSIONS \n\n @app . route ( '/' ,   methods = [ 'GET' ,   'POST' ]) \n def   upload_file (): \n     if   request . method   ==   'POST' : \n         # check if the post request has the file part \n         if   'file'   not   in   request . files : \n             flash ( 'No file part' ) \n             return   redirect ( request . url ) \n         file   =   request . files [ 'file' ] \n         # if user does not select file, browser also \n         # submit a empty part without filename \n         if   file . filename   ==   '' : \n             flash ( 'No selected file' ) \n             return   redirect ( request . url ) \n         if   file   and   allowed_file ( file . filename ): \n             filename   =   secure_filename ( file . filename ) \n             file . save ( os . path . join ( app . config [ 'UPLOAD_FOLDER' ],   filename )) \n             return   redirect ( url_for ( 'uploaded_file' , \n                                     filename = filename )) \n     return   ''' \n     <!doctype html> \n     <title>Upload new File</title> \n     <h1>Upload new File</h1> \n     <form method=post enctype=multipart/form-data> \n       <p><input type=file name=file> \n          <input type=submit value=Upload> \n     </form> \n     ''' \n \n \n So what does that  secure_filename()  function actually do?\nNow the problem is that there is that principle called \u201cnever trust user\ninput\u201d.  This is also true for the filename of an uploaded file.  All\nsubmitted form data can be forged, and filenames can be dangerous.  For\nthe moment just remember: always use that function to secure a filename\nbefore storing it directly on the filesystem. \n \n Information for the Pros \n So you\u2019re interested in what that  secure_filename() \nfunction does and what the problem is if you\u2019re not using it?  So just\nimagine someone would send the following information as  filename  to\nyour application: \n filename   =   \"../../../../home/username/.bashrc\" \n \n \n Assuming the number of  ../  is correct and you would join this with\nthe  UPLOAD_FOLDER  the user might have the ability to modify a file on\nthe server\u2019s filesystem he or she should not modify.  This does require some\nknowledge about how the application looks like, but trust me, hackers\nare patient :) \n Now let\u2019s look how that function works: \n >>>  secure_filename ( '../../../../home/username/.bashrc' ) \n 'home_username_.bashrc' \n \n \n \n Now one last thing is missing: the serving of the uploaded files. In the\n upload_file()  we redirect the user to\n url_for('uploaded_file',   filename=filename) , that is,  /uploads/filename .\nSo we write the  uploaded_file()  function to return the file of that name. As\nof Flask 0.5 we can use a function that does that for us: \n from   flask   import   send_from_directory \n\n @app . route ( '/uploads/<filename>' ) \n def   uploaded_file ( filename ): \n     return   send_from_directory ( app . config [ 'UPLOAD_FOLDER' ], \n                                filename ) \n \n \n Alternatively you can register  uploaded_file  as  build_only  rule and\nuse the  SharedDataMiddleware .  This also works with\nolder versions of Flask: \n from   werkzeug   import   SharedDataMiddleware \n app . add_url_rule ( '/uploads/<filename>' ,   'uploaded_file' , \n                  build_only = True ) \n app . wsgi_app   =   SharedDataMiddleware ( app . wsgi_app ,   { \n     '/uploads' :    app . config [ 'UPLOAD_FOLDER' ] \n }) \n \n \n If you now run the application everything should work as expected. \n \n \n Improving Uploads \u00b6 \n \n New in version 0.6. \n \n So how exactly does Flask handle uploads?  Well it will store them in the\nwebserver\u2019s memory if the files are reasonable small otherwise in a\ntemporary location (as returned by  tempfile.gettempdir() ).  But how\ndo you specify the maximum file size after which an upload is aborted?  By\ndefault Flask will happily accept file uploads to an unlimited amount of\nmemory, but you can limit that by setting the  MAX_CONTENT_LENGTH \nconfig key: \n from   flask   import   Flask ,   Request \n\n app   =   Flask ( __name__ ) \n app . config [ 'MAX_CONTENT_LENGTH' ]   =   16   *   1024   *   1024 \n \n \n The code above will limited the maximum allowed payload to 16 megabytes.\nIf a larger file is transmitted, Flask will raise an\n RequestEntityTooLarge  exception. \n This feature was added in Flask 0.6 but can be achieved in older versions\nas well by subclassing the request object.  For more information on that\nconsult the Werkzeug documentation on file handling. \n \n \n Upload Progress Bars \u00b6 \n A while ago many developers had the idea to read the incoming file in\nsmall chunks and store the upload progress in the database to be able to\npoll the progress with JavaScript from the client.  Long story short: the\nclient asks the server every 5 seconds how much it has transmitted\nalready.  Do you realize the irony?  The client is asking for something it\nshould already know. \n \n \n An Easier Solution \u00b6 \n Now there are better solutions that work faster and are more reliable. There\nare JavaScript libraries like  jQuery  that have form plugins to ease the\nconstruction of progress bar. \n Because the common pattern for file uploads exists almost unchanged in all\napplications dealing with uploads, there is also a Flask extension called\n Flask-Uploads  that implements a full fledged upload mechanism with white and\nblacklisting of extensions and more. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Uploading Files \n A Gentle Introduction \n Improving Uploads \n Upload Progress Bars \n An Easier Solution \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  SQLAlchemy in Flask \n       Next:  Caching \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/sqlalchemy/", "text": "\n   \n     \n     SQLAlchemy in Flask \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n SQLAlchemy in Flask \u00b6 \n Many people prefer  SQLAlchemy  for database access.  In this case it\u2019s\nencouraged to use a package instead of a module for your flask application\nand drop the models into a separate module ( Larger Applications ).\nWhile that is not necessary, it makes a lot of sense. \n There are four very common ways to use SQLAlchemy.  I will outline each\nof them here: \n \n Flask-SQLAlchemy Extension \u00b6 \n Because SQLAlchemy is a common database abstraction layer and object\nrelational mapper that requires a little bit of configuration effort,\nthere is a Flask extension that handles that for you.  This is recommended\nif you want to get started quickly. \n You can download  Flask-SQLAlchemy  from  PyPI . \n \n \n Declarative \u00b6 \n The declarative extension in SQLAlchemy is the most recent method of using\nSQLAlchemy.  It allows you to define tables and models in one go, similar\nto how Django works.  In addition to the following text I recommend the\nofficial documentation on the  declarative  extension. \n Here\u2019s the example  database.py  module for your application: \n from   sqlalchemy   import   create_engine \n from   sqlalchemy.orm   import   scoped_session ,   sessionmaker \n from   sqlalchemy.ext.declarative   import   declarative_base \n\n engine   =   create_engine ( 'sqlite:////tmp/test.db' ,   convert_unicode = True ) \n db_session   =   scoped_session ( sessionmaker ( autocommit = False , \n                                          autoflush = False , \n                                          bind = engine )) \n Base   =   declarative_base () \n Base . query   =   db_session . query_property () \n\n def   init_db (): \n     # import all modules here that might define models so that \n     # they will be registered properly on the metadata.  Otherwise \n     # you will have to import them first before calling init_db() \n     import   yourapplication.models \n     Base . metadata . create_all ( bind = engine ) \n \n \n To define your models, just subclass the  Base  class that was created by\nthe code above.  If you are wondering why we don\u2019t have to care about\nthreads here (like we did in the SQLite3 example above with the\n g  object): that\u2019s because SQLAlchemy does that for us\nalready with the  scoped_session . \n To use SQLAlchemy in a declarative way with your application, you just\nhave to put the following code into your application module.  Flask will\nautomatically remove database sessions at the end of the request or\nwhen the application shuts down: \n from   yourapplication.database   import   db_session \n\n @app . teardown_appcontext \n def   shutdown_session ( exception = None ): \n     db_session . remove () \n \n \n Here is an example model (put this into  models.py , e.g.): \n from   sqlalchemy   import   Column ,   Integer ,   String \n from   yourapplication.database   import   Base \n\n class   User ( Base ): \n     __tablename__   =   'users' \n     id   =   Column ( Integer ,   primary_key = True ) \n     name   =   Column ( String ( 50 ),   unique = True ) \n     email   =   Column ( String ( 120 ),   unique = True ) \n\n     def   __init__ ( self ,   name = None ,   email = None ): \n         self . name   =   name \n         self . email   =   email \n\n     def   __repr__ ( self ): \n         return   '<User  %r >'   %   ( self . name ) \n \n \n To create the database you can use the  init_db  function: \n >>>  from   yourapplication.database   import   init_db \n >>>  init_db () \n \n \n You can insert entries into the database like this: \n >>>  from   yourapplication.database   import   db_session \n >>>  from   yourapplication.models   import   User \n >>>  u   =   User ( 'admin' ,   'admin@localhost' ) \n >>>  db_session . add ( u ) \n >>>  db_session . commit () \n \n \n Querying is simple as well: \n >>>  User . query . all () \n [<User u'admin'>] \n >>>  User . query . filter ( User . name   ==   'admin' ) . first () \n <User u'admin'> \n \n \n \n \n Manual Object Relational Mapping \u00b6 \n Manual object relational mapping has a few upsides and a few downsides\nversus the declarative approach from above.  The main difference is that\nyou define tables and classes separately and map them together.  It\u2019s more\nflexible but a little more to type.  In general it works like the\ndeclarative approach, so make sure to also split up your application into\nmultiple modules in a package. \n Here is an example  database.py  module for your application: \n from   sqlalchemy   import   create_engine ,   MetaData \n from   sqlalchemy.orm   import   scoped_session ,   sessionmaker \n\n engine   =   create_engine ( 'sqlite:////tmp/test.db' ,   convert_unicode = True ) \n metadata   =   MetaData () \n db_session   =   scoped_session ( sessionmaker ( autocommit = False , \n                                          autoflush = False , \n                                          bind = engine )) \n def   init_db (): \n     metadata . create_all ( bind = engine ) \n \n \n As in the declarative approach, you need to close the session after\neach request or application context shutdown.  Put this into your\napplication module: \n from   yourapplication.database   import   db_session \n\n @app . teardown_appcontext \n def   shutdown_session ( exception = None ): \n     db_session . remove () \n \n \n Here is an example table and model (put this into  models.py ): \n from   sqlalchemy   import   Table ,   Column ,   Integer ,   String \n from   sqlalchemy.orm   import   mapper \n from   yourapplication.database   import   metadata ,   db_session \n\n class   User ( object ): \n     query   =   db_session . query_property () \n\n     def   __init__ ( self ,   name = None ,   email = None ): \n         self . name   =   name \n         self . email   =   email \n\n     def   __repr__ ( self ): \n         return   '<User  %r >'   %   ( self . name ) \n\n users   =   Table ( 'users' ,   metadata , \n     Column ( 'id' ,   Integer ,   primary_key = True ), \n     Column ( 'name' ,   String ( 50 ),   unique = True ), \n     Column ( 'email' ,   String ( 120 ),   unique = True ) \n ) \n mapper ( User ,   users ) \n \n \n Querying and inserting works exactly the same as in the example above. \n \n \n SQL Abstraction Layer \u00b6 \n If you just want to use the database system (and SQL) abstraction layer\nyou basically only need the engine: \n from   sqlalchemy   import   create_engine ,   MetaData ,   Table \n\n engine   =   create_engine ( 'sqlite:////tmp/test.db' ,   convert_unicode = True ) \n metadata   =   MetaData ( bind = engine ) \n \n \n Then you can either declare the tables in your code like in the examples\nabove, or automatically load them: \n from   sqlalchemy   import   Table \n\n users   =   Table ( 'users' ,   metadata ,   autoload = True ) \n \n \n To insert data you can use the  insert  method.  We have to get a\nconnection first so that we can use a transaction: \n >>>  con   =   engine . connect () \n >>>  con . execute ( users . insert (),   name = 'admin' ,   email = 'admin@localhost' ) \n \n \n SQLAlchemy will automatically commit for us. \n To query your database, you use the engine directly or use a connection: \n >>>  users . select ( users . c . id   ==   1 ) . execute () . first () \n (1, u'admin', u'admin@localhost') \n \n \n These results are also dict-like tuples: \n >>>  r   =   users . select ( users . c . id   ==   1 ) . execute () . first () \n >>>  r [ 'name' ] \n u'admin' \n \n \n You can also pass strings of SQL statements to the\n execute()  method: \n >>>  engine . execute ( 'select * from users where id = :1' ,   [ 1 ]) . first () \n (1, u'admin', u'admin@localhost') \n \n \n For more information about SQLAlchemy, head over to the\n website . \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n SQLAlchemy in Flask \n Flask-SQLAlchemy Extension \n Declarative \n Manual Object Relational Mapping \n SQL Abstraction Layer \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Using SQLite 3 with Flask \n       Next:  Uploading Files \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/sqlite3/", "text": "\n   \n     \n     Using SQLite 3 with Flask \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Using SQLite 3 with Flask \u00b6 \n In Flask you can easily implement the opening of database connections on\ndemand and closing them when the context dies (usually at the end of the\nrequest). \n Here is a simple example of how you can use SQLite 3 with Flask: \n import   sqlite3 \n from   flask   import   g \n\n DATABASE   =   '/path/to/database.db' \n\n def   get_db (): \n     db   =   getattr ( g ,   '_database' ,   None ) \n     if   db   is   None : \n         db   =   g . _database   =   sqlite3 . connect ( DATABASE ) \n     return   db \n\n @app . teardown_appcontext \n def   close_connection ( exception ): \n     db   =   getattr ( g ,   '_database' ,   None ) \n     if   db   is   not   None : \n         db . close () \n \n \n Now, to use the database, the application must either have an active\napplication context (which is always true if there is a request in flight)\nor create an application context itself.  At that point the  get_db \nfunction can be used to get the current database connection.  Whenever the\ncontext is destroyed the database connection will be terminated. \n Note: if you use Flask 0.9 or older you need to use\n flask._app_ctx_stack.top  instead of  g  as the  flask.g \nobject was bound to the request and not application context. \n Example: \n @app . route ( '/' ) \n def   index (): \n     cur   =   get_db () . cursor () \n     ... \n \n \n \n Note \n Please keep in mind that the teardown request and appcontext functions\nare always executed, even if a before-request handler failed or was\nnever executed.  Because of this we have to make sure here that the\ndatabase is there before we close it. \n \n \n Connect on Demand \u00b6 \n The upside of this approach (connecting on first use) is that this will\nonly open the connection if truly necessary.  If you want to use this\ncode outside a request context you can use it in a Python shell by opening\nthe application context by hand: \n with   app . app_context (): \n     # now you can use get_db() \n \n \n \n \n Easy Querying \u00b6 \n Now in each request handling function you can access  g.db  to get the\ncurrent open database connection.  To simplify working with SQLite, a\nrow factory function is useful.  It is executed for every result returned\nfrom the database to convert the result.  For instance, in order to get\ndictionaries instead of tuples, this could be inserted into the  get_db \nfunction we created above: \n def   make_dicts ( cursor ,   row ): \n     return   dict (( cursor . description [ idx ][ 0 ],   value ) \n                 for   idx ,   value   in   enumerate ( row )) \n\n db . row_factory   =   make_dicts \n \n \n This will make the sqlite3 module return dicts for this database connection, which are much nicer to deal with. Even more simply, we could place this in  get_db  instead: \n db . row_factory   =   sqlite3 . Row \n \n \n This would use Row objects rather than dicts to return the results of queries. These are  namedtuple  s, so we can access them either by index or by key. For example, assuming we have a  sqlite3.Row  called  r  for the rows  id ,  FirstName ,  LastName , and  MiddleInitial : \n >>>  # You can get values based on the row's name \n >>>  r [ 'FirstName' ] \n John \n >>>  # Or, you can get them based on index \n >>>  r [ 1 ] \n John \n # Row objects are also iterable: \n >>>  for   value   in   r : \n ...       print ( value ) \n 1 \n John \n Doe \n M \n \n \n Additionally, it is a good idea to provide a query function that combines\ngetting the cursor, executing and fetching the results: \n def   query_db ( query ,   args = (),   one = False ): \n     cur   =   get_db () . execute ( query ,   args ) \n     rv   =   cur . fetchall () \n     cur . close () \n     return   ( rv [ 0 ]   if   rv   else   None )   if   one   else   rv \n \n \n This handy little function, in combination with a row factory, makes\nworking with the database much more pleasant than it is by just using the\nraw cursor and connection objects. \n Here is how you can use it: \n for   user   in   query_db ( 'select * from users' ): \n     print   user [ 'username' ],   'has the id' ,   user [ 'user_id' ] \n \n \n Or if you just want a single result: \n user   =   query_db ( 'select * from users where username = ?' , \n                 [ the_username ],   one = True ) \n if   user   is   None : \n     print   'No such user' \n else : \n     print   the_username ,   'has the id' ,   user [ 'user_id' ] \n \n \n To pass variable parts to the SQL statement, use a question mark in the\nstatement and pass in the arguments as a list.  Never directly add them to\nthe SQL statement with string formatting because this makes it possible\nto attack the application using  SQL Injections . \n \n \n Initial Schemas \u00b6 \n Relational databases need schemas, so applications often ship a\n schema.sql  file that creates the database.  It\u2019s a good idea to provide\na function that creates the database based on that schema.  This function\ncan do that for you: \n def   init_db (): \n     with   app . app_context (): \n         db   =   get_db () \n         with   app . open_resource ( 'schema.sql' ,   mode = 'r' )   as   f : \n             db . cursor () . executescript ( f . read ()) \n         db . commit () \n \n \n You can then create such a database from the Python shell: \n >>>  from   yourapplication   import   init_db \n >>>  init_db () \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Using SQLite 3 with Flask \n Connect on Demand \n Easy Querying \n Initial Schemas \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Deploying with Fabric \n       Next:  SQLAlchemy in Flask \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/fabric/", "text": "\n   \n     \n     Deploying with Fabric \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Deploying with Fabric \u00b6 \n Fabric  is a tool for Python similar to Makefiles but with the ability\nto execute commands on a remote server.  In combination with a properly\nset up Python package ( Larger Applications ) and a good concept for\nconfigurations ( Configuration Handling ) it is very easy to deploy Flask\napplications to external servers. \n Before we get started, here a quick checklist of things we have to ensure\nupfront: \n \n Fabric 1.0 has to be installed locally.  This tutorial assumes the\nlatest version of Fabric. \n The application already has to be a package and requires a working\n setup.py  file ( Deploying with Setuptools ). \n In the following example we are using  mod_wsgi  for the remote\nservers.  You can of course use your own favourite server there, but\nfor this example we chose Apache +  mod_wsgi  because it\u2019s very easy\nto setup and has a simple way to reload applications without root\naccess. \n \n \n Creating the first Fabfile \u00b6 \n A fabfile is what controls what Fabric executes.  It is named  fabfile.py \nand executed by the  fab  command.  All the functions defined in that file\nwill show up as  fab  subcommands.  They are executed on one or more\nhosts.  These hosts can be defined either in the fabfile or on the command\nline.  In this case we will add them to the fabfile. \n This is a basic first example that has the ability to upload the current\nsource code to the server and install it into a pre-existing\nvirtual environment: \n from   fabric.api   import   * \n\n # the user to use for the remote commands \n env . user   =   'appuser' \n # the servers where the commands are executed \n env . hosts   =   [ 'server1.example.com' ,   'server2.example.com' ] \n\n def   pack (): \n     # build the package \n     local ( 'python setup.py sdist --formats=gztar' ,   capture = False ) \n\n def   deploy (): \n     # figure out the package name and version \n     dist   =   local ( 'python setup.py --fullname' ,   capture = True ) . strip () \n     filename   =   ' %s .tar.gz'   %   dist \n\n     # upload the package to the temporary folder on the server \n     put ( 'dist/ %s '   %   filename ,   '/tmp/ %s '   %   filename ) \n\n     # install the package in the application's virtualenv with pip \n     run ( '/var/www/yourapplication/env/bin/pip install /tmp/ %s '   %   filename ) \n\n     # remove the uploaded package \n     run ( 'rm -r /tmp/ %s '   %   filename ) \n\n     # touch the .wsgi file to trigger a reload in mod_wsgi \n     run ( 'touch /var/www/yourapplication.wsgi' ) \n \n \n \n \n Running Fabfiles \u00b6 \n Now how do you execute that fabfile?  You use the  fab  command.  To\ndeploy the current version of the code on the remote server you would use\nthis command: \n $ fab pack deploy\n \n \n However this requires that our server already has the\n /var/www/yourapplication  folder created and\n /var/www/yourapplication/env  to be a virtual environment.  Furthermore\nare we not creating the configuration or  .wsgi  file on the server.  So\nhow do we bootstrap a new server into our infrastructure? \n This now depends on the number of servers we want to set up.  If we just\nhave one application server (which the majority of applications will\nhave), creating a command in the fabfile for this is overkill.  But\nobviously you can do that.  In that case you would probably call it\n setup  or  bootstrap  and then pass the servername explicitly on the\ncommand line: \n $ fab -H newserver.example.com bootstrap\n \n \n To setup a new server you would roughly do these steps: \n \n Create the directory structure in  /var/www : \n $ mkdir /var/www/yourapplication\n$ cd /var/www/yourapplication\n$ virtualenv --distribute env\n \n \n \n Upload a new  application.wsgi  file to the server and the\nconfiguration file for the application (eg:  application.cfg ) \n \n Create a new Apache config for  yourapplication  and activate it.\nMake sure to activate watching for changes of the  .wsgi  file so\nthat we can automatically reload the application by touching it.\n(See  mod_wsgi (Apache)  for more information) \n \n \n So now the question is, where do the  application.wsgi  and\n application.cfg  files come from? \n \n \n The WSGI File \u00b6 \n The WSGI file has to import the application and also to set an environment\nvariable so that the application knows where to look for the config.  This\nis a short example that does exactly that: \n import   os \n os . environ [ 'YOURAPPLICATION_CONFIG' ]   =   '/var/www/yourapplication/application.cfg' \n from   yourapplication   import   app \n \n \n The application itself then has to initialize itself like this to look for\nthe config at that environment variable: \n app   =   Flask ( __name__ ) \n app . config . from_object ( 'yourapplication.default_config' ) \n app . config . from_envvar ( 'YOURAPPLICATION_CONFIG' ) \n \n \n This approach is explained in detail in the  Configuration Handling  section of the\ndocumentation. \n \n \n The Configuration File \u00b6 \n Now as mentioned above, the application will find the correct\nconfiguration file by looking up the  YOURAPPLICATION_CONFIG  environment\nvariable.  So we have to put the configuration in a place where the\napplication will able to find it.  Configuration files have the unfriendly\nquality of being different on all computers, so you do not version them\nusually. \n A popular approach is to store configuration files for different servers\nin a separate version control repository and check them out on all\nservers.  Then symlink the file that is active for the server into the\nlocation where it\u2019s expected (eg:  /var/www/yourapplication ). \n Either way, in our case here we only expect one or two servers and we can\nupload them ahead of time by hand. \n \n \n First Deployment \u00b6 \n Now we can do our first deployment.  We have set up the servers so that\nthey have their virtual environments and activated apache configs.  Now we\ncan pack up the application and deploy it: \n $ fab pack deploy\n \n \n Fabric will now connect to all servers and run the commands as written\ndown in the fabfile.  First it will execute pack so that we have our\ntarball ready and then it will execute deploy and upload the source code\nto all servers and install it there.  Thanks to the  setup.py  file we\nwill automatically pull in the required libraries into our virtual\nenvironment. \n \n \n Next Steps \u00b6 \n From that point onwards there is so much that can be done to make\ndeployment actually fun: \n \n Create a  bootstrap  command that initializes new servers.  It could\ninitialize a new virtual environment, setup apache appropriately etc. \n Put configuration files into a separate version control repository\nand symlink the active configs into place. \n You could also put your application code into a repository and check\nout the latest version on the server and then install.  That way you\ncan also easily go back to older versions. \n hook in testing functionality so that you can deploy to an external\nserver and run the test suite. \n \n Working with Fabric is fun and you will notice that it\u2019s quite magical to\ntype  fab   deploy  and see your application being deployed automatically\nto one or more remote servers. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Deploying with Fabric \n Creating the first Fabfile \n Running Fabfiles \n The WSGI File \n The Configuration File \n First Deployment \n Next Steps \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Deploying with Setuptools \n       Next:  Using SQLite 3 with Flask \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/distribute/", "text": "\n   \n     \n     Deploying with Setuptools \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Deploying with Setuptools \u00b6 \n Setuptools , is an extension library that is commonly used to\ndistribute Python libraries and extensions. It extends distutils, a basic\nmodule installation system shipped with Python to also support various more\ncomplex constructs that make larger applications easier to distribute: \n \n support for dependencies : a library or application can declare a\nlist of other libraries it depends on which will be installed\nautomatically for you. \n package registry : setuptools registers your package with your\nPython installation.  This makes it possible to query information\nprovided by one package from another package.  The best known feature of\nthis system is the entry point support which allows one package to\ndeclare an \u201centry point\u201d that another package can hook into to extend the\nother package. \n installation manager :  pip  can install other libraries for you. \n \n If you have Python 2 (>=2.7.9) or Python 3 (>=3.4) installed from python.org,\nyou will already have pip and setuptools on your system.  Otherwise, you\nwill need to install them yourself. \n Flask itself, and all the libraries you can find on PyPI are distributed with\neither setuptools or distutils. \n In this case we assume your application is called\n yourapplication.py  and you are not using a module, but a  package . If you have not yet converted your application into\na package, head over to the  Larger Applications  pattern to see\nhow this can be done. \n A working deployment with setuptools is the first step into more complex\nand more automated deployment scenarios.  If you want to fully automate\nthe process, also read the  Deploying with Fabric  chapter. \n \n Basic Setup Script \u00b6 \n Because you have Flask installed, you have setuptools available on your system.\nFlask already depends upon setuptools. \n Standard disclaimer applies:  you better use a virtualenv . \n Your setup code always goes into a file named  setup.py  next to your\napplication.  The name of the file is only convention, but because\neverybody will look for a file with that name, you better not change it. \n A basic  setup.py  file for a Flask application looks like this: \n from   setuptools   import   setup \n\n setup ( \n     name = 'Your Application' , \n     version = '1.0' , \n     long_description = __doc__ , \n     packages = [ 'yourapplication' ], \n     include_package_data = True , \n     zip_safe = False , \n     install_requires = [ 'Flask' ] \n ) \n \n \n Please keep in mind that you have to list subpackages explicitly.  If you\nwant setuptools to lookup the packages for you automatically, you can use\nthe  find_packages  function: \n from   setuptools   import   setup ,   find_packages \n\n setup ( \n     ... \n     packages = find_packages () \n ) \n \n \n Most parameters to the  setup  function should be self explanatory,\n include_package_data  and  zip_safe  might not be.\n include_package_data  tells setuptools to look for a  MANIFEST.in  file\nand install all the entries that match as package data.  We will use this\nto distribute the static files and templates along with the Python module\n(see  Distributing Resources ).  The  zip_safe  flag can be used to\nforce or prevent zip Archive creation.  In general you probably don\u2019t want\nyour packages to be installed as zip files because some tools do not\nsupport them and they make debugging a lot harder. \n \n \n Tagging Builds \u00b6 \n It is useful to distinguish between release and development builds.  Add a\n setup.cfg  file to configure these options. \n \n [egg_info]\ntag_build = .dev\ntag_date = 1 \n [aliases]\nrelease = egg_info -RDb \u2018\u2019 \n \n Running  python   setup.py   sdist  will create a development package\nwith \u201c.dev\u201d and the current date appended:  flaskr-1.0.dev20160314.tar.gz .\nRunning  python   setup.py   release   sdist  will create a release package\nwith only the version:  flaskr-1.0.tar.gz . \n \n \n Distributing Resources \u00b6 \n If you try to install the package you just created, you will notice that\nfolders like  static  or  templates  are not installed for you.  The\nreason for this is that setuptools does not know which files to add for\nyou.  What you should do, is to create a  MANIFEST.in  file next to your\n setup.py  file.  This file lists all the files that should be added to\nyour tarball: \n recursive - include   yourapplication / templates   * \n recursive - include   yourapplication / static   * \n \n \n Don\u2019t forget that even if you enlist them in your  MANIFEST.in  file, they\nwon\u2019t be installed for you unless you set the  include_package_data \nparameter of the  setup  function to  True ! \n \n \n Declaring Dependencies \u00b6 \n Dependencies are declared in the  install_requires  parameter as a list.\nEach item in that list is the name of a package that should be pulled from\nPyPI on installation.  By default it will always use the most recent\nversion, but you can also provide minimum and maximum version\nrequirements.  Here some examples: \n install_requires = [ \n     'Flask>=0.2' , \n     'SQLAlchemy>=0.6' , \n     'BrokenPackage>=0.7,<=1.0' \n ] \n \n \n As mentioned earlier, dependencies are pulled from PyPI.  What if you\nwant to depend on a package that cannot be found on PyPI and won\u2019t be\nbecause it is an internal package you don\u2019t want to share with anyone?\nJust do it as if there was a PyPI entry and provide a list of\nalternative locations where setuptools should look for tarballs: \n dependency_links = [ 'http://example.com/yourfiles' ] \n \n \n Make sure that page has a directory listing and the links on the page are\npointing to the actual tarballs with their correct filenames as this is\nhow setuptools will find the files.  If you have an internal company\nserver that contains the packages, provide the URL to that server. \n \n \n Installing / Developing \u00b6 \n To install your application (ideally into a virtualenv) just run the\n setup.py  script with the  install  parameter.  It will install your\napplication into the virtualenv\u2019s site-packages folder and also download\nand install all dependencies: \n $ python setup.py install\n \n \n If you are developing on the package and also want the requirements to be\ninstalled, you can use the  develop  command instead: \n $ python setup.py develop\n \n \n This has the advantage of just installing a link to the site-packages\nfolder instead of copying the data over.  You can then continue to work on\nthe code without having to run  install  again after each change. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Deploying with Setuptools \n Basic Setup Script \n Tagging Builds \n Distributing Resources \n Declaring Dependencies \n Installing / Developing \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Using URL Processors \n       Next:  Deploying with Fabric \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/urlprocessors/", "text": "\n   \n     \n     Using URL Processors \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Using URL Processors \u00b6 \n \n New in version 0.7. \n \n Flask 0.7 introduces the concept of URL processors.  The idea is that you\nmight have a bunch of resources with common parts in the URL that you\ndon\u2019t always explicitly want to provide.  For instance you might have a\nbunch of URLs that have the language code in it but you don\u2019t want to have\nto handle it in every single function yourself. \n URL processors are especially helpful when combined with blueprints.  We\nwill handle both application specific URL processors here as well as\nblueprint specifics. \n \n Internationalized Application URLs \u00b6 \n Consider an application like this: \n from   flask   import   Flask ,   g \n\n app   =   Flask ( __name__ ) \n\n @app . route ( '/<lang_code>/' ) \n def   index ( lang_code ): \n     g . lang_code   =   lang_code \n     ... \n\n @app . route ( '/<lang_code>/about' ) \n def   about ( lang_code ): \n     g . lang_code   =   lang_code \n     ... \n \n \n This is an awful lot of repetition as you have to handle the language code\nsetting on the  g  object yourself in every single function.\nSure, a decorator could be used to simplify this, but if you want to\ngenerate URLs from one function to another you would have to still provide\nthe language code explicitly which can be annoying. \n For the latter, this is where  url_defaults()  functions\ncome in.  They can automatically inject values into a call for\n url_for()  automatically.  The code below checks if the\nlanguage code is not yet in the dictionary of URL values and if the\nendpoint wants a value named  'lang_code' : \n @app . url_defaults \n def   add_language_code ( endpoint ,   values ): \n     if   'lang_code'   in   values   or   not   g . lang_code : \n         return \n     if   app . url_map . is_endpoint_expecting ( endpoint ,   'lang_code' ): \n         values [ 'lang_code' ]   =   g . lang_code \n \n \n The method  is_endpoint_expecting()  of the URL\nmap can be used to figure out if it would make sense to provide a language\ncode for the given endpoint. \n The reverse of that function are\n url_value_preprocessor() s.  They are executed right\nafter the request was matched and can execute code based on the URL\nvalues.  The idea is that they pull information out of the values\ndictionary and put it somewhere else: \n @app . url_value_preprocessor \n def   pull_lang_code ( endpoint ,   values ): \n     g . lang_code   =   values . pop ( 'lang_code' ,   None ) \n \n \n That way you no longer have to do the  lang_code  assignment to\n g  in every function.  You can further improve that by\nwriting your own decorator that prefixes URLs with the language code, but\nthe more beautiful solution is using a blueprint.  Once the\n 'lang_code'  is popped from the values dictionary and it will no longer\nbe forwarded to the view function reducing the code to this: \n from   flask   import   Flask ,   g \n\n app   =   Flask ( __name__ ) \n\n @app . url_defaults \n def   add_language_code ( endpoint ,   values ): \n     if   'lang_code'   in   values   or   not   g . lang_code : \n         return \n     if   app . url_map . is_endpoint_expecting ( endpoint ,   'lang_code' ): \n         values [ 'lang_code' ]   =   g . lang_code \n\n @app . url_value_preprocessor \n def   pull_lang_code ( endpoint ,   values ): \n     g . lang_code   =   values . pop ( 'lang_code' ,   None ) \n\n @app . route ( '/<lang_code>/' ) \n def   index (): \n     ... \n\n @app . route ( '/<lang_code>/about' ) \n def   about (): \n     ... \n \n \n \n \n Internationalized Blueprint URLs \u00b6 \n Because blueprints can automatically prefix all URLs with a common string\nit\u2019s easy to automatically do that for every function.  Furthermore\nblueprints can have per-blueprint URL processors which removes a whole lot\nof logic from the  url_defaults()  function because it no\nlonger has to check if the URL is really interested in a  'lang_code' \nparameter: \n from   flask   import   Blueprint ,   g \n\n bp   =   Blueprint ( 'frontend' ,   __name__ ,   url_prefix = '/<lang_code>' ) \n\n @bp . url_defaults \n def   add_language_code ( endpoint ,   values ): \n     values . setdefault ( 'lang_code' ,   g . lang_code ) \n\n @bp . url_value_preprocessor \n def   pull_lang_code ( endpoint ,   values ): \n     g . lang_code   =   values . pop ( 'lang_code' ) \n\n @bp . route ( '/' ) \n def   index (): \n     ... \n\n @bp . route ( '/about' ) \n def   about (): \n     ... \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Using URL Processors \n Internationalized Application URLs \n Internationalized Blueprint URLs \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Implementing API Exceptions \n       Next:  Deploying with Setuptools \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/apierrors/", "text": "\n   \n     \n     Implementing API Exceptions \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Implementing API Exceptions \u00b6 \n It\u2019s very common to implement RESTful APIs on top of Flask.  One of the\nfirst things that developers run into is the realization that the builtin\nexceptions are not expressive enough for APIs and that the content type of\n text/html  they are emitting is not very useful for API consumers. \n The better solution than using  abort  to signal errors for invalid API\nusage is to implement your own exception type and install an error handler\nfor it that produces the errors in the format the user is expecting. \n \n Simple Exception Class \u00b6 \n The basic idea is to introduce a new exception that can take a proper\nhuman readable message, a status code for the error and some optional\npayload to give more context for the error. \n This is a simple example: \n from   flask   import   jsonify \n\n class   InvalidUsage ( Exception ): \n     status_code   =   400 \n\n     def   __init__ ( self ,   message ,   status_code = None ,   payload = None ): \n         Exception . __init__ ( self ) \n         self . message   =   message \n         if   status_code   is   not   None : \n             self . status_code   =   status_code \n         self . payload   =   payload \n\n     def   to_dict ( self ): \n         rv   =   dict ( self . payload   or   ()) \n         rv [ 'message' ]   =   self . message \n         return   rv \n \n \n A view can now raise that exception with an error message.  Additionally\nsome extra payload can be provided as a dictionary through the  payload \nparameter. \n \n \n Registering an Error Handler \u00b6 \n At that point views can raise that error, but it would immediately result\nin an internal server error.  The reason for this is that there is no\nhandler registered for this error class.  That however is easy to add: \n @app . errorhandler ( InvalidUsage ) \n def   handle_invalid_usage ( error ): \n     response   =   jsonify ( error . to_dict ()) \n     response . status_code   =   error . status_code \n     return   response \n \n \n \n \n Usage in Views \u00b6 \n Here is how a view can use that functionality: \n @app . route ( '/foo' ) \n def   get_foo (): \n     raise   InvalidUsage ( 'This view is gone' ,   status_code = 410 ) \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Implementing API Exceptions \n Simple Exception Class \n Registering an Error Handler \n Usage in Views \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Application Dispatching \n       Next:  Using URL Processors \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/appdispatch/", "text": "\n   \n     \n     Application Dispatching \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Application Dispatching \u00b6 \n Application dispatching is the process of combining multiple Flask\napplications on the WSGI level.  You can combine not only Flask\napplications but any WSGI application.  This would allow you to run a\nDjango and a Flask application in the same interpreter side by side if\nyou want.  The usefulness of this depends on how the applications work\ninternally. \n The fundamental difference from the  module approach  is that in this case you are running the same or\ndifferent Flask applications that are entirely isolated from each other.\nThey run different configurations and are dispatched on the WSGI level. \n \n Working with this Document \u00b6 \n Each of the techniques and examples below results in an  application  object\nthat can be run with any WSGI server.  For production, see  Deployment Options .\nFor development, Werkzeug provides a builtin server for development available\nat  werkzeug.serving.run_simple() : \n from   werkzeug.serving   import   run_simple \n run_simple ( 'localhost' ,   5000 ,   application ,   use_reloader = True ) \n \n \n Note that  run_simple  is not intended for\nuse in production.  Use a  full-blown WSGI server . \n In order to use the interactive debugger, debugging must be enabled both on\nthe application and the simple server. Here is the \u201chello world\u201d example with\ndebugging and  run_simple : \n from   flask   import   Flask \n from   werkzeug.serving   import   run_simple \n\n app   =   Flask ( __name__ ) \n app . debug   =   True \n\n @app . route ( '/' ) \n def   hello_world (): \n     return   'Hello World!' \n\n if   __name__   ==   '__main__' : \n     run_simple ( 'localhost' ,   5000 ,   app , \n                use_reloader = True ,   use_debugger = True ,   use_evalex = True ) \n \n \n \n \n Combining Applications \u00b6 \n If you have entirely separated applications and you want them to work next\nto each other in the same Python interpreter process you can take\nadvantage of the  werkzeug.wsgi.DispatcherMiddleware .  The idea\nhere is that each Flask application is a valid WSGI application and they\nare combined by the dispatcher middleware into a larger one that is\ndispatched based on prefix. \n For example you could have your main application run on  /  and your\nbackend interface on  /backend : \n from   werkzeug.wsgi   import   DispatcherMiddleware \n from   frontend_app   import   application   as   frontend \n from   backend_app   import   application   as   backend \n\n application   =   DispatcherMiddleware ( frontend ,   { \n     '/backend' :       backend \n }) \n \n \n \n \n Dispatch by Subdomain \u00b6 \n Sometimes you might want to use multiple instances of the same application\nwith different configurations.  Assuming the application is created inside\na function and you can call that function to instantiate it, that is\nreally easy to implement.  In order to develop your application to support\ncreating new instances in functions have a look at the\n Application Factories  pattern. \n A very common example would be creating applications per subdomain.  For\ninstance you configure your webserver to dispatch all requests for all\nsubdomains to your application and you then use the subdomain information\nto create user-specific instances.  Once you have your server set up to\nlisten on all subdomains you can use a very simple WSGI application to do\nthe dynamic application creation. \n The perfect level for abstraction in that regard is the WSGI layer.  You\nwrite your own WSGI application that looks at the request that comes and\ndelegates it to your Flask application.  If that application does not\nexist yet, it is dynamically created and remembered: \n from   threading   import   Lock \n\n class   SubdomainDispatcher ( object ): \n\n     def   __init__ ( self ,   domain ,   create_app ): \n         self . domain   =   domain \n         self . create_app   =   create_app \n         self . lock   =   Lock () \n         self . instances   =   {} \n\n     def   get_application ( self ,   host ): \n         host   =   host . split ( ':' )[ 0 ] \n         assert   host . endswith ( self . domain ),   'Configuration error' \n         subdomain   =   host [: - len ( self . domain )] . rstrip ( '.' ) \n         with   self . lock : \n             app   =   self . instances . get ( subdomain ) \n             if   app   is   None : \n                 app   =   self . create_app ( subdomain ) \n                 self . instances [ subdomain ]   =   app \n             return   app \n\n     def   __call__ ( self ,   environ ,   start_response ): \n         app   =   self . get_application ( environ [ 'HTTP_HOST' ]) \n         return   app ( environ ,   start_response ) \n \n \n This dispatcher can then be used like this: \n from   myapplication   import   create_app ,   get_user_for_subdomain \n from   werkzeug.exceptions   import   NotFound \n\n def   make_app ( subdomain ): \n     user   =   get_user_for_subdomain ( subdomain ) \n     if   user   is   None : \n         # if there is no user for that subdomain we still have \n         # to return a WSGI application that handles that request. \n         # We can then just return the NotFound() exception as \n         # application which will render a default 404 page. \n         # You might also redirect the user to the main page then \n         return   NotFound () \n\n     # otherwise create the application for the specific user \n     return   create_app ( user ) \n\n application   =   SubdomainDispatcher ( 'example.com' ,   make_app ) \n \n \n \n \n Dispatch by Path \u00b6 \n Dispatching by a path on the URL is very similar.  Instead of looking at\nthe  Host  header to figure out the subdomain one simply looks at the\nrequest path up to the first slash: \n from   threading   import   Lock \n from   werkzeug.wsgi   import   pop_path_info ,   peek_path_info \n\n class   PathDispatcher ( object ): \n\n     def   __init__ ( self ,   default_app ,   create_app ): \n         self . default_app   =   default_app \n         self . create_app   =   create_app \n         self . lock   =   Lock () \n         self . instances   =   {} \n\n     def   get_application ( self ,   prefix ): \n         with   self . lock : \n             app   =   self . instances . get ( prefix ) \n             if   app   is   None : \n                 app   =   self . create_app ( prefix ) \n                 if   app   is   not   None : \n                     self . instances [ prefix ]   =   app \n             return   app \n\n     def   __call__ ( self ,   environ ,   start_response ): \n         app   =   self . get_application ( peek_path_info ( environ )) \n         if   app   is   not   None : \n             pop_path_info ( environ ) \n         else : \n             app   =   self . default_app \n         return   app ( environ ,   start_response ) \n \n \n The big difference between this and the subdomain one is that this one\nfalls back to another application if the creator function returns  None : \n from   myapplication   import   create_app ,   default_app ,   get_user_for_prefix \n\n def   make_app ( prefix ): \n     user   =   get_user_for_prefix ( prefix ) \n     if   user   is   not   None : \n         return   create_app ( user ) \n\n application   =   PathDispatcher ( default_app ,   make_app ) \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Application Dispatching \n Working with this Document \n Combining Applications \n Dispatch by Subdomain \n Dispatch by Path \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Application Factories \n       Next:  Implementing API Exceptions \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/deploying/wsgi-standalone/", "text": "\n   \n     \n     Standalone WSGI Containers \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Deployment Options  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Standalone WSGI Containers \u00b6 \n There are popular servers written in Python that contain WSGI applications and\nserve HTTP.  These servers stand alone when they run; you can proxy to them\nfrom your web server.  Note the section on  Proxy Setups  if you\nrun into issues. \n \n Gunicorn \u00b6 \n Gunicorn  \u2018Green Unicorn\u2019 is a WSGI HTTP Server for UNIX. It\u2019s a pre-fork\nworker model ported from Ruby\u2019s Unicorn project. It supports both  eventlet \nand  greenlet . Running a Flask application on this server is quite simple: \n gunicorn   myproject : app \n \n \n Gunicorn  provides many command-line options \u2013 see  gunicorn   -h .\nFor example, to run a Flask application with 4 worker processes ( -w \n 4 ) binding to localhost port 4000 ( -b   127.0.0.1:4000 ): \n gunicorn   - w   4   - b   127.0 . 0.1 : 4000   myproject : app \n \n \n \n \n Gevent \u00b6 \n Gevent  is a coroutine-based Python networking library that uses\n greenlet  to provide a high-level synchronous API on top of  libev \nevent loop: \n from   gevent.wsgi   import   WSGIServer \n from   yourapplication   import   app \n\n http_server   =   WSGIServer (( '' ,   5000 ),   app ) \n http_server . serve_forever () \n \n \n \n \n Twisted Web \u00b6 \n Twisted Web  is the web server shipped with  Twisted , a mature,\nnon-blocking event-driven networking library. Twisted Web comes with a\nstandard WSGI container which can be controlled from the command line using\nthe  twistd  utility: \n twistd   web   -- wsgi   myproject . app \n \n \n This example will run a Flask application called  app  from a module named\n myproject . \n Twisted Web supports many flags and options, and the  twistd  utility does\nas well; see  twistd   -h  and  twistd   web   -h  for more information. For\nexample, to run a Twisted Web server in the foreground, on port 8080, with an\napplication from  myproject : \n twistd   - n   web   -- port   8080   -- wsgi   myproject . app \n \n \n \n \n Proxy Setups \u00b6 \n If you deploy your application using one of these servers behind an HTTP proxy\nyou will need to rewrite a few headers in order for the application to work.\nThe two problematic values in the WSGI environment usually are  REMOTE_ADDR \nand  HTTP_HOST .  You can configure your httpd to pass these headers, or you\ncan fix them in middleware.  Werkzeug ships a fixer that will solve some common\nsetups, but you might want to write your own WSGI middleware for specific\nsetups. \n Here\u2019s a simple nginx configuration which proxies to an application served on\nlocalhost at port 8000, setting appropriate headers: \n server   { \n     listen   80 ; \n\n     server_name   _ ; \n\n     access_log    /var/log/nginx/access.log ; \n     error_log    /var/log/nginx/error.log ; \n\n     location   /   { \n         proxy_pass           http://127.0.0.1:8000/ ; \n         proxy_redirect       off ; \n\n         proxy_set_header     Host                   $host ; \n         proxy_set_header     X-Real-IP              $remote_addr ; \n         proxy_set_header     X-Forwarded-For        $proxy_add_x_forwarded_for ; \n         proxy_set_header     X-Forwarded-Proto      $scheme ; \n     } \n } \n \n \n If your httpd is not providing these headers, the most common setup invokes the\nhost being set from  X-Forwarded-Host  and the remote address from\n X-Forwarded-For : \n from   werkzeug.contrib.fixers   import   ProxyFix \n app . wsgi_app   =   ProxyFix ( app . wsgi_app ) \n \n \n \n Trusting Headers \n Please keep in mind that it is a security issue to use such a middleware in\na non-proxy setup because it will blindly trust the incoming headers which\nmight be forged by malicious clients. \n \n If you want to rewrite the headers from another header, you might want to\nuse a fixer like this: \n class   CustomProxyFix ( object ): \n\n     def   __init__ ( self ,   app ): \n         self . app   =   app \n\n     def   __call__ ( self ,   environ ,   start_response ): \n         host   =   environ . get ( 'HTTP_X_FHOST' ,   '' ) \n         if   host : \n             environ [ 'HTTP_HOST' ]   =   host \n         return   self . app ( environ ,   start_response ) \n\n app . wsgi_app   =   CustomProxyFix ( app . wsgi_app ) \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Standalone WSGI Containers \n Gunicorn \n Gevent \n Twisted Web \n Proxy Setups \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Deployment Options \n       Previous:  mod_wsgi (Apache) \n       Next:  uWSGI \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/deploying/cgi/", "text": "\n   \n     \n     CGI \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Deployment Options  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n CGI \u00b6 \n If all other deployment methods do not work, CGI will work for sure.\nCGI is supported by all major servers but usually has a sub-optimal\nperformance. \n This is also the way you can use a Flask application on Google\u2019s  App\nEngine , where execution happens in a CGI-like environment. \n \n Watch Out \n Please make sure in advance that any  app.run()  calls you might\nhave in your application file are inside an  if   __name__   == \n '__main__':  block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to CGI / app engine. \n With CGI, you will also have to make sure that your code does not contain\nany  print  statements, or that  sys.stdout  is overridden by something\nthat doesn\u2019t write into the HTTP response. \n \n \n Creating a  .cgi  file \u00b6 \n First you need to create the CGI application file.  Let\u2019s call it\n yourapplication.cgi : \n #!/usr/bin/python \n from   wsgiref.handlers   import   CGIHandler \n from   yourapplication   import   app \n\n CGIHandler () . run ( app ) \n \n \n \n \n Server Setup \u00b6 \n Usually there are two ways to configure the server.  Either just copy the\n .cgi  into a  cgi-bin  (and use  mod_rewrite  or something similar to\nrewrite the URL) or let the server point to the file directly. \n In Apache for example you can put something like this into the config: \n ScriptAlias   /app   /path/to/the/application.cgi \n \n \n On shared webhosting, though, you might not have access to your Apache config.\nIn this case, a file called  .htaccess , sitting in the public directory you want\nyour app to be available, works too but the  ScriptAlias  directive won\u2019t\nwork in that case: \n RewriteEngine   On \n RewriteCond  %{REQUEST_FILENAME} !-f # Don't interfere with static files\n RewriteRule  ^(.*)$  /path/to/the/application.cgi/ $1 [L]\n \n \n For more information consult the documentation of your webserver. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n CGI \n Creating a  .cgi  file \n Server Setup \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Deployment Options \n       Previous:  FastCGI \n       Next:  Becoming Big \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/appfactories/", "text": "\n   \n     \n     Application Factories \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Application Factories \u00b6 \n If you are already using packages and blueprints for your application\n( Modular Applications with Blueprints ) there are a couple of really nice ways to further improve\nthe experience.  A common pattern is creating the application object when\nthe blueprint is imported.  But if you move the creation of this object\ninto a function, you can then create multiple instances of this app later. \n So why would you want to do this? \n \n Testing.  You can have instances of the application with different\nsettings to test every case. \n Multiple instances.  Imagine you want to run different versions of the\nsame application.  Of course you could have multiple instances with\ndifferent configs set up in your webserver, but if you use factories,\nyou can have multiple instances of the same application running in the\nsame application process which can be handy. \n \n So how would you then actually implement that? \n \n Basic Factories \u00b6 \n The idea is to set up the application in a function.  Like this: \n def   create_app ( config_filename ): \n     app   =   Flask ( __name__ ) \n     app . config . from_pyfile ( config_filename ) \n\n     from   yourapplication.model   import   db \n     db . init_app ( app ) \n\n     from   yourapplication.views.admin   import   admin \n     from   yourapplication.views.frontend   import   frontend \n     app . register_blueprint ( admin ) \n     app . register_blueprint ( frontend ) \n\n     return   app \n \n \n The downside is that you cannot use the application object in the blueprints\nat import time.  You can however use it from within a request.  How do you\nget access to the application with the config?  Use\n current_app : \n from   flask   import   current_app ,   Blueprint ,   render_template \n admin   =   Blueprint ( 'admin' ,   __name__ ,   url_prefix = '/admin' ) \n\n @admin . route ( '/' ) \n def   index (): \n     return   render_template ( current_app . config [ 'INDEX_TEMPLATE' ]) \n \n \n Here we look up the name of a template in the config. \n \n \n Factories & Extensions \u00b6 \n It\u2019s preferable to create your extensions and app factories so that the\nextension object does not initially get bound to the application. \n Using  Flask-SQLAlchemy ,\nas an example, you should not do something along those lines: \n def   create_app ( config_filename ): \n     app   =   Flask ( __name__ ) \n     app . config . from_pyfile ( config_filename ) \n\n     db   =   SQLAlchemy ( app ) \n \n \n But, rather, in model.py (or equivalent): \n db   =   SQLAlchemy () \n \n \n and in your application.py (or equivalent): \n def   create_app ( config_filename ): \n     app   =   Flask ( __name__ ) \n     app . config . from_pyfile ( config_filename ) \n\n     from   yourapplication.model   import   db \n     db . init_app ( app ) \n \n \n Using this design pattern, no application-specific state is stored on the\nextension object, so one extension object can be used for multiple apps.\nFor more information about the design of extensions refer to  Flask Extension Development . \n \n \n Using Applications \u00b6 \n So to use such an application you then have to create the application\nfirst in a separate file otherwise the  flask  command won\u2019t be able\nto find it.  Here an example  exampleapp.py  file that creates such\nan application: \n from   yourapplication   import   create_app \n app   =   create_app ( '/path/to/config.cfg' ) \n \n \n It can then be used with the  flask  command: \n export   FLASK_APP = exampleapp \n flask   run \n \n \n \n \n Factory Improvements \u00b6 \n The factory function from above is not very clever so far, you can improve\nit.  The following changes are straightforward and possible: \n \n make it possible to pass in configuration values for unittests so that\nyou don\u2019t have to create config files on the filesystem \n call a function from a blueprint when the application is setting up so\nthat you have a place to modify attributes of the application (like\nhooking in before / after request handlers etc.) \n Add in WSGI middlewares when the application is creating if necessary. \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Application Factories \n Basic Factories \n Factories & Extensions \n Using Applications \n Factory Improvements \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Larger Applications \n       Next:  Application Dispatching \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/patterns/packages/", "text": "\n   \n     \n     Larger Applications \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Larger Applications \u00b6 \n For larger applications it\u2019s a good idea to use a package instead of a\nmodule.  That is quite simple.  Imagine a small application looks like\nthis: \n / yourapplication \n     yourapplication . py \n     / static \n         style . css \n     / templates \n         layout . html \n         index . html \n         login . html \n         ... \n \n \n \n Simple Packages \u00b6 \n To convert that into a larger one, just create a new folder\n yourapplication  inside the existing one and move everything below it.\nThen rename  yourapplication.py  to  __init__.py .  (Make sure to delete\nall  .pyc  files first, otherwise things would most likely break) \n You should then end up with something like that: \n / yourapplication \n     / yourapplication \n         __init__ . py \n         / static \n             style . css \n         / templates \n             layout . html \n             index . html \n             login . html \n             ... \n \n \n But how do you run your application now?  The naive  python \n yourapplication/__init__.py  will not work.  Let\u2019s just say that Python\ndoes not want modules in packages to be the startup file.  But that is not\na big problem, just add a new file called  setup.py  next to the inner\n yourapplication  folder with the following contents: \n from   setuptools   import   setup \n\n setup ( \n     name = 'yourapplication' , \n     packages = [ 'yourapplication' ], \n     include_package_data = True , \n     install_requires = [ \n         'flask' , \n     ], \n ) \n \n \n In order to run the application you need to export an environment variable\nthat tells Flask where to find the application instance: \n export   FLASK_APP = yourapplication \n \n \n If you are outside of the project directory make sure to provide the exact\npath to your application directory. Similiarly you can turn on \u201cdebug\nmode\u201d with this environment variable: \n export   FLASK_DEBUG = true \n \n \n In order to install and run the application you need to issue the following\ncommands: \n pip   install   - e   . \n flask   run \n \n \n What did we gain from this?  Now we can restructure the application a bit\ninto multiple modules.  The only thing you have to remember is the\nfollowing quick checklist: \n \n the  Flask  application object creation has to be in the\n __init__.py  file.  That way each module can import it safely and the\n __name__  variable will resolve to the correct package. \n all the view functions (the ones with a  route() \ndecorator on top) have to be imported in the  __init__.py  file.\nNot the object itself, but the module it is in. Import the view module\n after the application object is created . \n \n Here\u2019s an example  __init__.py : \n from   flask   import   Flask \n app   =   Flask ( __name__ ) \n\n import   yourapplication.views \n \n \n And this is what  views.py  would look like: \n from   yourapplication   import   app \n\n @app . route ( '/' ) \n def   index (): \n     return   'Hello World!' \n \n \n You should then end up with something like that: \n / yourapplication \n     setup . py \n     / yourapplication \n         __init__ . py \n         views . py \n         / static \n             style . css \n         / templates \n             layout . html \n             index . html \n             login . html \n             ... \n \n \n \n Circular Imports \n Every Python programmer hates them, and yet we just added some:\ncircular imports (That\u2019s when two modules depend on each other.  In this\ncase  views.py  depends on  __init__.py ).  Be advised that this is a\nbad idea in general but here it is actually fine.  The reason for this is\nthat we are not actually using the views in  __init__.py  and just\nensuring the module is imported and we are doing that at the bottom of\nthe file. \n There are still some problems with that approach but if you want to use\ndecorators there is no way around that.  Check out the\n Becoming Big  section for some inspiration how to deal with that. \n \n \n \n Working with Blueprints \u00b6 \n If you have larger applications it\u2019s recommended to divide them into\nsmaller groups where each group is implemented with the help of a\nblueprint.  For a gentle introduction into this topic refer to the\n Modular Applications with Blueprints  chapter of the documentation. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Larger Applications \n Simple Packages \n Working with Blueprints \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Patterns for Flask \n       Previous:  Patterns for Flask \n       Next:  Application Factories \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/deploying/fastcgi/", "text": "\n   \n     \n     FastCGI \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Deployment Options  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n FastCGI \u00b6 \n FastCGI is a deployment option on servers like  nginx ,  lighttpd , and\n cherokee ; see  uWSGI  and  Standalone WSGI Containers \nfor other options.  To use your WSGI application with any of them you will need\na FastCGI server first.  The most popular one is  flup  which we will use for\nthis guide.  Make sure to have it installed to follow along. \n \n Watch Out \n Please make sure in advance that any  app.run()  calls you might\nhave in your application file are inside an  if   __name__   == \n '__main__':  block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to FastCGI. \n \n \n Creating a  .fcgi  file \u00b6 \n First you need to create the FastCGI server file.  Let\u2019s call it\n yourapplication.fcgi : \n #!/usr/bin/python \n from   flup.server.fcgi   import   WSGIServer \n from   yourapplication   import   app \n\n if   __name__   ==   '__main__' : \n     WSGIServer ( app ) . run () \n \n \n This is enough for Apache to work, however nginx and older versions of\nlighttpd need a socket to be explicitly passed to communicate with the\nFastCGI server.  For that to work you need to pass the path to the\nsocket to the  WSGIServer : \n WSGIServer ( application ,   bindAddress = '/path/to/fcgi.sock' ) . run () \n \n \n The path has to be the exact same path you define in the server\nconfig. \n Save the  yourapplication.fcgi  file somewhere you will find it again.\nIt makes sense to have that in  /var/www/yourapplication  or something\nsimilar. \n Make sure to set the executable bit on that file so that the servers\ncan execute it: \n # chmod +x /var/www/yourapplication/yourapplication.fcgi\n \n \n \n \n Configuring Apache \u00b6 \n The example above is good enough for a basic Apache deployment but your\n .fcgi  file will appear in your application URL e.g.\n example.com/yourapplication.fcgi/news/ . There are few ways to configure\nyour application so that yourapplication.fcgi does not appear in the URL.\nA preferable way is to use the ScriptAlias and SetHandler configuration\ndirectives to route requests to the FastCGI server. The following example\nuses FastCgiServer to start 5 instances of the application which will\nhandle all incoming requests: \n LoadModule   fastcgi_module   / usr / lib64 / httpd / modules / mod_fastcgi . so \n\n FastCgiServer   / var / www / html / yourapplication / app . fcgi   - idle - timeout   300   - processes   5 \n\n < VirtualHost   *> \n     ServerName   webapp1 . mydomain . com \n     DocumentRoot   / var / www / html / yourapplication \n\n     AddHandler   fastcgi - script   fcgi \n     ScriptAlias   /   / var / www / html / yourapplication / app . fcgi / \n\n     < Location   /> \n         SetHandler   fastcgi - script \n     </ Location > \n </ VirtualHost > \n \n \n These processes will be managed by Apache. If you\u2019re using a standalone\nFastCGI server, you can use the FastCgiExternalServer directive instead.\nNote that in the following the path is not real, it\u2019s simply used as an\nidentifier to other\ndirectives such as AliasMatch: \n FastCgiServer   / var / www / html / yourapplication   - host   127.0 . 0.1 : 3000 \n \n \n If you cannot set ScriptAlias, for example on a shared web host, you can use\nWSGI middleware to remove yourapplication.fcgi from the URLs. Set .htaccess: \n <IfModule mod_fcgid.c>\n   AddHandler fcgid-script .fcgi\n   <Files ~ (\\.fcgi)>\n       SetHandler fcgid-script\n       Options +FollowSymLinks +ExecCGI\n   </Files>\n</IfModule>\n\n<IfModule mod_rewrite.c>\n   Options +FollowSymlinks\n   RewriteEngine On\n   RewriteBase /\n   RewriteCond %{REQUEST_FILENAME} !-f\n   RewriteRule ^(.*)$ yourapplication.fcgi/$1 [QSA,L]\n</IfModule>\n \n \n Set yourapplication.fcgi: \n #!/usr/bin/python \n #: optional path to your local python site-packages folder \n import   sys \n sys . path . insert ( 0 ,   '<your_local_path>/lib/python2.6/site-packages' ) \n\n from   flup.server.fcgi   import   WSGIServer \n from   yourapplication   import   app \n\n class   ScriptNameStripper ( object ): \n    def   __init__ ( self ,   app ): \n        self . app   =   app \n\n    def   __call__ ( self ,   environ ,   start_response ): \n        environ [ 'SCRIPT_NAME' ]   =   '' \n        return   self . app ( environ ,   start_response ) \n\n app   =   ScriptNameStripper ( app ) \n\n if   __name__   ==   '__main__' : \n     WSGIServer ( app ) . run () \n \n \n \n \n Configuring lighttpd \u00b6 \n A basic FastCGI configuration for lighttpd looks like that: \n fastcgi . server   =   ( \"/yourapplication.fcgi\"   => \n     (( \n         \"socket\"   =>   \"/tmp/yourapplication-fcgi.sock\" , \n         \"bin-path\"   =>   \"/var/www/yourapplication/yourapplication.fcgi\" , \n         \"check-local\"   =>   \"disable\" , \n         \"max-procs\"   =>   1 \n     )) \n ) \n\n alias . url   =   ( \n     \"/static/\"   =>   \"/path/to/your/static\" \n ) \n\n url . rewrite - once   =   ( \n     \"^(/static($|/.*))$\"   =>   \"$1\" , \n     \"^(/.*)$\"   =>   \"/yourapplication.fcgi$1\" \n ) \n \n \n Remember to enable the FastCGI, alias and rewrite modules. This configuration\nbinds the application to  /yourapplication .  If you want the application to\nwork in the URL root you have to work around a lighttpd bug with the\n LighttpdCGIRootFix  middleware. \n Make sure to apply it only if you are mounting the application the URL\nroot. Also, see the Lighty docs for more information on  FastCGI and Python  (note that\nexplicitly passing a socket to run() is no longer necessary). \n \n \n Configuring nginx \u00b6 \n Installing FastCGI applications on nginx is a bit different because by\ndefault no FastCGI parameters are forwarded. \n A basic Flask FastCGI configuration for nginx looks like this: \n location = /yourapplication { rewrite ^ /yourapplication/ last; }\nlocation /yourapplication { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include fastcgi_params;\n    fastcgi_split_path_info ^(/yourapplication)(.*)$;\n    fastcgi_param PATH_INFO $fastcgi_path_info;\n    fastcgi_param SCRIPT_NAME $fastcgi_script_name;\n    fastcgi_pass unix:/tmp/yourapplication-fcgi.sock;\n}\n \n \n This configuration binds the application to  /yourapplication .  If you\nwant to have it in the URL root it\u2019s a bit simpler because you don\u2019t\nhave to figure out how to calculate  PATH_INFO  and  SCRIPT_NAME : \n location / { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include fastcgi_params;\n    fastcgi_param PATH_INFO $fastcgi_script_name;\n    fastcgi_param SCRIPT_NAME \"\";\n    fastcgi_pass unix:/tmp/yourapplication-fcgi.sock;\n}\n \n \n \n \n Running FastCGI Processes \u00b6 \n Since nginx and others do not load FastCGI apps, you have to do it by\nyourself.   Supervisor can manage FastCGI processes. \nYou can look around for other FastCGI process managers or write a script\nto run your  .fcgi  file at boot, e.g. using a SysV  init.d  script.\nFor a temporary solution, you can always run the  .fcgi  script inside\nGNU screen.  See  man   screen  for details, and note that this is a\nmanual solution which does not persist across system restart: \n $ screen\n$ /var/www/yourapplication/yourapplication.fcgi\n \n \n \n \n Debugging \u00b6 \n FastCGI deployments tend to be hard to debug on most web servers.  Very\noften the only thing the server log tells you is something along the\nlines of \u201cpremature end of headers\u201d.  In order to debug the application\nthe only thing that can really give you ideas why it breaks is switching\nto the correct user and executing the application by hand. \n This example assumes your application is called  application.fcgi  and\nthat your web server user is  www-data : \n $ su www-data\n$ cd /var/www/yourapplication\n$ python application.fcgi\nTraceback (most recent call last):\n  File \"yourapplication.fcgi\", line 4, in <module>\nImportError: No module named yourapplication\n \n \n In this case the error seems to be \u201cyourapplication\u201d not being on the\npython path.  Common problems are: \n \n Relative paths being used.  Don\u2019t rely on the current working directory. \n The code depending on environment variables that are not set by the\nweb server. \n Different python interpreters being used. \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n FastCGI \n Creating a  .fcgi  file \n Configuring Apache \n Configuring lighttpd \n Configuring nginx \n Running FastCGI Processes \n Debugging \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Deployment Options \n       Previous:  uWSGI \n       Next:  CGI \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/deploying/uwsgi/", "text": "\n   \n     \n     uWSGI \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Deployment Options  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n uWSGI \u00b6 \n uWSGI is a deployment option on servers like  nginx ,  lighttpd , and\n cherokee ; see  FastCGI  and  Standalone WSGI Containers \nfor other options.  To use your WSGI application with uWSGI protocol you will\nneed a uWSGI server first. uWSGI is both a protocol and an application server;\nthe application server can serve uWSGI, FastCGI, and HTTP protocols. \n The most popular uWSGI server is  uwsgi , which we will use for this\nguide.  Make sure to have it installed to follow along. \n \n Watch Out \n Please make sure in advance that any  app.run()  calls you might\nhave in your application file are inside an  if   __name__   == \n '__main__':  block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to uWSGI. \n \n \n Starting your app with uwsgi \u00b6 \n uwsgi  is designed to operate on WSGI callables found in python modules. \n Given a flask application in myapp.py, use the following command: \n $ uwsgi -s /tmp/yourapplication.sock --manage-script-name --mount /yourapplication=myapp:app\n \n \n The  --manage-script-name  will move the handling of  SCRIPT_NAME  to uwsgi,\nsince its smarter about that. It is used together with the  --mount  directive\nwhich will make requests to  /yourapplication  be directed to  myapp:app .\nIf your application is accessible at root level, you can use a single  / \ninstead of  /yourapplication .  myapp  refers to the name of the file of\nyour flask application (without extension) or the module which provides  app .\n app  is the callable inside of your application (usually the line reads\n app   =   Flask(__name__) . \n If you want to deploy your flask application inside of a virtual environment,\nyou need to also add  --virtualenv   /path/to/virtual/environment . You might\nalso need to add  --plugin   python  or  --plugin   python3  depending on which\npython version you use for your project. \n \n \n Configuring nginx \u00b6 \n A basic flask nginx configuration looks like this: \n location = /yourapplication { rewrite ^ /yourapplication/; }\nlocation /yourapplication { try_files $uri @yourapplication; }\nlocation @yourapplication {\n  include uwsgi_params;\n  uwsgi_pass unix:/tmp/yourapplication.sock;\n}\n \n \n This configuration binds the application to  /yourapplication .  If you want\nto have it in the URL root its a bit simpler: \n location / { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include uwsgi_params;\n    uwsgi_pass unix:/tmp/yourapplication.sock;\n}\n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n uWSGI \n Starting your app with uwsgi \n Configuring nginx \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Deployment Options \n       Previous:  Standalone WSGI Containers \n       Next:  FastCGI \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/deploying/mod_wsgi/", "text": "\n   \n     \n     mod_wsgi (Apache) \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Deployment Options  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n mod_wsgi (Apache) \u00b6 \n If you are using the  Apache  webserver, consider using  mod_wsgi . \n \n Watch Out \n Please make sure in advance that any  app.run()  calls you might\nhave in your application file are inside an  if   __name__   == \n '__main__':  block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to mod_wsgi. \n \n \n Installing  mod_wsgi \u00b6 \n If you don\u2019t have  mod_wsgi  installed yet you have to either install it\nusing a package manager or compile it yourself.  The mod_wsgi\n installation instructions  cover source installations on UNIX systems. \n If you are using Ubuntu/Debian you can apt-get it and activate it as\nfollows: \n # apt-get install libapache2-mod-wsgi\n \n \n If you are using a yum based distribution (Fedora, OpenSUSE, etc..) you\ncan install it as follows: \n # yum install mod_wsgi\n \n \n On FreeBSD install  mod_wsgi  by compiling the  www/mod_wsgi  port or by\nusing pkg_add: \n # pkg install ap22-mod_wsgi2\n \n \n If you are using pkgsrc you can install  mod_wsgi  by compiling the\n www/ap2-wsgi  package. \n If you encounter segfaulting child processes after the first apache\nreload you can safely ignore them.  Just restart the server. \n \n \n Creating a  .wsgi  file \u00b6 \n To run your application you need a  yourapplication.wsgi  file.  This file\ncontains the code  mod_wsgi  is executing on startup to get the application\nobject.  The object called  application  in that file is then used as\napplication. \n For most applications the following file should be sufficient: \n from   yourapplication   import   app   as   application \n \n \n If you don\u2019t have a factory function for application creation but a singleton\ninstance you can directly import that one as  application . \n Store that file somewhere that you will find it again (e.g.:\n /var/www/yourapplication ) and make sure that  yourapplication  and all\nthe libraries that are in use are on the python load path.  If you don\u2019t\nwant to install it system wide consider using a  virtual python \ninstance.  Keep in mind that you will have to actually install your\napplication into the virtualenv as well.  Alternatively there is the\noption to just patch the path in the  .wsgi  file before the import: \n import   sys \n sys . path . insert ( 0 ,   '/path/to/the/application' ) \n \n \n \n \n Configuring Apache \u00b6 \n The last thing you have to do is to create an Apache configuration file\nfor your application.  In this example we are telling  mod_wsgi  to\nexecute the application under a different user for security reasons: \n <VirtualHost   * > \n     ServerName  example.com\n\n     WSGIDaemonProcess  yourapplication  user =user1  group =group1 threads=5\n     WSGIScriptAlias  /  /var/www/yourapplication/yourapplication.wsgi \n\n     <Directory   /var/www/yourapplication > \n         WSGIProcessGroup  yourapplication\n         WSGIApplicationGroup  %{GLOBAL}\n         Order  deny,allow\n         Allow  from  all \n     </Directory> \n </VirtualHost> \n \n \n Note: WSGIDaemonProcess isn\u2019t implemented in Windows and Apache will\nrefuse to run with the above configuration. On a Windows system, eliminate those lines: \n <VirtualHost   * > \n         ServerName  example.com\n         WSGIScriptAlias  / C:\\yourdir\\yourapp.wsgi\n         <Directory   C:\\yourdir > \n                 Order  deny,allow\n                 Allow  from  all \n         </Directory> \n </VirtualHost> \n \n \n Note: There have been some changes in access control configuration for  Apache 2.4 . \n Most notably, the syntax for directory permissions has changed from httpd 2.2 \n Order  allow,deny\n Allow  from  all \n \n \n to httpd 2.4 syntax \n Require   all  granted\n \n \n For more information consult the  mod_wsgi documentation . \n \n \n Troubleshooting \u00b6 \n If your application does not run, follow this guide to troubleshoot: \n \n Problem:  application does not run, errorlog shows SystemExit ignored \n You have an  app.run()  call in your application file that is not\nguarded by an  if   __name__   ==   '__main__':  condition.  Either\nremove that  run()  call from the file and move it\ninto a separate  run.py  file or put it into such an if block. \n Problem:  application gives permission errors \n Probably caused by your application running as the wrong user.  Make\nsure the folders the application needs access to have the proper\nprivileges set and the application runs as the correct user\n( user  and  group  parameter to the  WSGIDaemonProcess \ndirective) \n Problem:  application dies with an error on print \n Keep in mind that mod_wsgi disallows doing anything with\n sys.stdout  and  sys.stderr .  You can disable this\nprotection from the config by setting the  WSGIRestrictStdout  to\n off : \n WSGIRestrictStdout   Off \n \n \n Alternatively you can also replace the standard out in the .wsgi file\nwith a different stream: \n import   sys \n sys . stdout   =   sys . stderr \n \n \n \n Problem:  accessing resources gives IO errors \n Your application probably is a single .py file you symlinked into\nthe site-packages folder.  Please be aware that this does not work,\ninstead you either have to put the folder into the pythonpath the\nfile is stored in, or convert your application into a package. \n The reason for this is that for non-installed packages, the module\nfilename is used to locate the resources and for symlinks the wrong\nfilename is picked up. \n \n \n \n \n Support for Automatic Reloading \u00b6 \n To help deployment tools you can activate support for automatic\nreloading.  Whenever something changes the  .wsgi  file,  mod_wsgi  will\nreload all the daemon processes for us. \n For that, just add the following directive to your  Directory  section: \n WSGIScriptReloading   On \n \n \n \n \n Working with Virtual Environments \u00b6 \n Virtual environments have the advantage that they never install the\nrequired dependencies system wide so you have a better control over what\nis used where.  If you want to use a virtual environment with mod_wsgi\nyou have to modify your  .wsgi  file slightly. \n Add the following lines to the top of your  .wsgi  file: \n activate_this   =   '/path/to/env/bin/activate_this.py' \n execfile ( activate_this ,   dict ( __file__ = activate_this )) \n \n \n For Python 3 add the following lines to the top of your  .wsgi  file: \n activate_this   =   '/path/to/env/bin/activate_this.py' \n with   open ( activate_this )   as   file_ : \n     exec ( file_ . read (),   dict ( __file__ = activate_this )) \n \n \n This sets up the load paths according to the settings of the virtual\nenvironment.  Keep in mind that the path has to be absolute. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n mod_wsgi (Apache) \n Installing  mod_wsgi \n Creating a  .wsgi  file \n Configuring Apache \n Troubleshooting \n Support for Automatic Reloading \n Working with Virtual Environments \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Deployment Options \n       Previous:  Deployment Options \n       Next:  Standalone WSGI Containers \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/shell/", "text": "\n   \n     \n     Working with the Shell \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Working with the Shell \u00b6 \n \n New in version 0.3. \n \n One of the reasons everybody loves Python is the interactive shell.  It\nbasically allows you to execute Python commands in real time and\nimmediately get results back.  Flask itself does not come with an\ninteractive shell, because it does not require any specific setup upfront,\njust import your application and start playing around. \n There are however some handy helpers to make playing around in the shell a\nmore pleasant experience.  The main issue with interactive console\nsessions is that you\u2019re not triggering a request like a browser does which\nmeans that  g ,  request  and others are not\navailable.  But the code you want to test might depend on them, so what\ncan you do? \n This is where some helper functions come in handy.  Keep in mind however\nthat these functions are not only there for interactive shell usage, but\nalso for unittesting and other situations that require a faked request\ncontext. \n Generally it\u2019s recommended that you read the  The Request Context \nchapter of the documentation first. \n \n Command Line Interface \u00b6 \n Starting with Flask 0.11 the recommended way to work with the shell is the\n flask   shell  command which does a lot of this automatically for you.\nFor instance the shell is automatically initialized with a loaded\napplication context. \n For more information see  Command Line Interface . \n \n \n Creating a Request Context \u00b6 \n The easiest way to create a proper request context from the shell is by\nusing the  test_request_context  method which creates\nus a  RequestContext : \n >>>  ctx   =   app . test_request_context () \n \n \n Normally you would use the  with  statement to make this request object\nactive, but in the shell it\u2019s easier to use the\n push()  and\n pop()  methods by hand: \n >>>  ctx . push () \n \n \n From that point onwards you can work with the request object until you\ncall  pop : \n >>>  ctx . pop () \n \n \n \n \n Firing Before/After Request \u00b6 \n By just creating a request context, you still don\u2019t have run the code that\nis normally run before a request.  This might result in your database\nbeing unavailable if you are connecting to the database in a\nbefore-request callback or the current user not being stored on the\n g  object etc. \n This however can easily be done yourself.  Just call\n preprocess_request() : \n >>>  ctx   =   app . test_request_context () \n >>>  ctx . push () \n >>>  app . preprocess_request () \n \n \n Keep in mind that the  preprocess_request()  function\nmight return a response object, in that case just ignore it. \n To shutdown a request, you need to trick a bit before the after request\nfunctions (triggered by  process_response() ) operate on\na response object: \n >>>  app . process_response ( app . response_class ()) \n <Response 0 bytes [200 OK]> \n >>>  ctx . pop () \n \n \n The functions registered as  teardown_request()  are\nautomatically called when the context is popped.  So this is the perfect\nplace to automatically tear down resources that were needed by the request\ncontext (such as database connections). \n \n \n Further Improving the Shell Experience \u00b6 \n If you like the idea of experimenting in a shell, create yourself a module\nwith stuff you want to star import into your interactive session.  There\nyou could also define some more helper methods for common things such as\ninitializing the database, dropping tables etc. \n Just put them into a module (like  shelltools ) and import from there: \n >>>  from   shelltools   import   * \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Working with the Shell \n Command Line Interface \n Creating a Request Context \n Firing Before/After Request \n Further Improving the Shell Experience \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Development Server \n       Next:  Patterns for Flask \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/cli/", "text": "\n   \n     \n     Command Line Interface \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Command Line Interface \u00b6 \n \n New in version 0.11. \n \n One of the nice new features in Flask 0.11 is the built-in integration of\nthe  click  command line interface.  This\nenables a wide range of new features for the Flask ecosystem and your own\napplications. \n \n Basic Usage \u00b6 \n After installation of Flask you will now find a  flask  script\ninstalled into your virtualenv.  If you don\u2019t want to install Flask or you\nhave a special use-case you can also use  python   -m   flask  to accomplish\nexactly the same. \n The way this script works is by providing access to all the commands on\nyour Flask application\u2019s  Flask.cli  instance as well as some\nbuilt-in commands that are always there.  Flask extensions can also\nregister more commands there if they desire so. \n For the  flask  script to work, an application needs to be\ndiscovered.  This is achieved by exporting the  FLASK_APP  environment\nvariable.  It can be either set to an import path or to a filename of a\nPython module that contains a Flask application. \n In that imported file the name of the app needs to be called  app  or\noptionally be specified after a colon.  For instance\n mymodule:application  would tell it to use the  application  object in\nthe  mymodule.py  file. \n Given a  hello.py  file with the application in it named  app \nthis is how it can be run. \n Environment variables (On Windows use  set  instead of  export ): \n export   FLASK_APP = hello \n flask   run \n \n \n Or with a filename: \n export   FLASK_APP =/ path / to / hello . py \n flask   run \n \n \n \n \n Virtualenv Integration \u00b6 \n If you are constantly working with a virtualenv you can also put the\n export   FLASK_APP  into your  activate  script by adding it to the\nbottom of the file.  That way every time you activate your virtualenv you\nautomatically also activate the correct application name. \n \n \n Debug Flag \u00b6 \n The  flask  script can also be instructed to enable the debug\nmode of the application automatically by exporting  FLASK_DEBUG .  If\nset to  1  debug is enabled or  0  disables it: \n export   FLASK_DEBUG = 1 \n \n \n \n \n Running a Shell \u00b6 \n To run an interactive Python shell you can use the  shell  command: \n flask   shell \n \n \n This will start up an interactive Python shell, setup the correct\napplication context and setup the local variables in the shell.  This is\ndone by invoking the  Flask.make_shell_context()  method of the\napplication.  By default you have access to your  app  and  g . \n \n \n Custom Commands \u00b6 \n If you want to add more commands to the shell script you can do this\neasily.  Flask uses  click  for the command interface which makes\ncreating custom commands very easy.  For instance if you want a shell\ncommand to initialize the database you can do this: \n import   click \n from   flask   import   Flask \n\n app   =   Flask ( __name__ ) \n\n @app . cli . command () \n def   initdb (): \n     \"\"\"Initialize the database.\"\"\" \n     click . echo ( 'Init the db' ) \n \n \n The command will then show up on the command line: \n $ flask initdb\nInit the db\n \n \n \n \n Application Context \u00b6 \n Most commands operate on the application so it makes a lot of sense if\nthey have the application context setup.  Because of this, if you register\na callback on  app.cli  with the  command()  the\ncallback will automatically be wrapped through  cli.with_appcontext() \nwhich informs the cli system to ensure that an application context is set\nup.  This behavior is not available if a command is added later with\n add_command()  or through other means. \n It can also be disabled by passing  with_appcontext=False  to the\ndecorator: \n @app . cli . command ( with_appcontext = False ) \n def   example (): \n     pass \n \n \n \n \n Factory Functions \u00b6 \n In case you are using factory functions to create your application (see\n Application Factories ) you will discover that the  flask  command\ncannot work with them directly.  Flask won\u2019t be able to figure out how to\ninstantiate your application properly by itself.  Because of this reason\nthe recommendation is to create a separate file that instantiates\napplications.  This is not the only way to make this work.  Another is the\n Custom Scripts  support. \n For instance if you have a factory function that creates an application\nfrom a filename you could make a separate file that creates such an\napplication from an environment variable. \n This could be a file named  autoapp.py  with these contents: \n import   os \n from   yourapplication   import   create_app \n app   =   create_app ( os . environ [ 'YOURAPPLICATION_CONFIG' ]) \n \n \n Once this has happened you can make the  flask  command automatically\npick it up: \n export   YOURAPPLICATION_CONFIG =/ path / to / config . cfg \n export   FLASK_APP =/ path / to / autoapp . py \n \n \n From this point onwards  flask  will find your application. \n \n \n Custom Scripts \u00b6 \n While the most common way is to use the  flask  command, you can\nalso make your own \u201cdriver scripts\u201d.  Since Flask uses click for the\nscripts there is no reason you cannot hook these scripts into any click\napplication.  There is one big caveat and that is, that commands\nregistered to  Flask.cli  will expect to be (indirectly at least)\nlaunched from a  flask.cli.FlaskGroup  click group.  This is\nnecessary so that the commands know which Flask application they have to\nwork with. \n To understand why you might want custom scripts you need to understand how\nclick finds and executes the Flask application.  If you use the\n flask  script you specify the application to work with on the\ncommand line or environment variable as an import name.  This is simple\nbut it has some limitations.  Primarily it does not work with application\nfactory functions (see  Application Factories ). \n With a custom script you don\u2019t have this problem as you can fully\ncustomize how the application will be created.  This is very useful if you\nwrite reusable applications that you want to ship to users and they should\nbe presented with a custom management script. \n To explain all of this, here is an example  manage.py  script that\nmanages a hypothetical wiki application.  We will go through the details\nafterwards: \n import   os \n import   click \n from   flask.cli   import   FlaskGroup \n\n def   create_wiki_app ( info ): \n     from   yourwiki   import   create_app \n     return   create_app ( \n         config = os . environ . get ( 'WIKI_CONFIG' ,   'wikiconfig.py' )) \n\n @click . group ( cls = FlaskGroup ,   create_app = create_wiki_app ) \n def   cli (): \n     \"\"\"This is a management script for the wiki application.\"\"\" \n\n if   __name__   ==   '__main__' : \n     cli () \n \n \n That\u2019s a lot of code for not much, so let\u2019s go through all parts step by\nstep. \n \n First we import the  click  library as well as the click extensions\nfrom the  flask.cli  package.  Primarily we are here interested\nin the  FlaskGroup  click group. \n \n The next thing we do is defining a function that is invoked with the\nscript info object ( ScriptInfo ) from Flask and its\npurpose is to fully import and create the application.  This can\neither directly import an application object or create it (see\n Application Factories ).  In this case we load the config from an\nenvironment variable. \n \n Next step is to create a  FlaskGroup .  In this case we just\nmake an empty function with a help doc string that just does nothing\nand then pass the  create_wiki_app  function as a factory function. \n Whenever click now needs to operate on a Flask application it will\ncall that function with the script info and ask for it to be created. \n \n All is rounded up by invoking the script. \n \n \n \n \n CLI Plugins \u00b6 \n Flask extensions can always patch the  Flask.cli  instance with more\ncommands if they want.  However there is a second way to add CLI plugins\nto Flask which is through  setuptools .  If you make a Python package that\nshould export a Flask command line plugin you can ship a  setup.py  file\nthat declares an entrypoint that points to a click command: \n Example  setup.py : \n from   setuptools   import   setup \n\n setup ( \n     name = 'flask-my-extension' , \n     ... \n     entry_points = ''' \n         [flask.commands] \n         my-command=mypackage.commands:cli \n     ''' , \n ) \n \n \n Inside  mypackage/commands.py  you can then export a Click object: \n import   click \n\n @click . command () \n def   cli (): \n     \"\"\"This is an example command.\"\"\" \n \n \n Once that package is installed in the same virtualenv as Flask itself you\ncan run  flask   my-command  to invoke your command.  This is useful to\nprovide extra functionality that Flask itself cannot ship. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Command Line Interface \n Basic Usage \n Virtualenv Integration \n Debug Flag \n Running a Shell \n Custom Commands \n Application Context \n Factory Functions \n Custom Scripts \n CLI Plugins \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Flask Extensions \n       Next:  Development Server \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/extensions/", "text": "\n   \n     \n     Flask Extensions \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Flask Extensions \u00b6 \n Flask extensions extend the functionality of Flask in various different\nways.  For instance they add support for databases and other common tasks. \n \n Finding Extensions \u00b6 \n Flask extensions are listed on the  Flask Extension Registry  and can be\ndownloaded with  easy_install  or  pip .  If you add a Flask extension\nas dependency to your  requirements.txt  or  setup.py  file they are\nusually installed with a simple command or when your application installs. \n \n \n Using Extensions \u00b6 \n Extensions typically have documentation that goes along that shows how to\nuse it.  There are no general rules in how extensions are supposed to\nbehave but they are imported from common locations.  If you have an\nextension called  Flask-Foo  or  Foo-Flask  it should be always\nimportable from  flask_foo : \n import   flask_foo \n \n \n \n \n Building Extensions \u00b6 \n While  Flask Extension Registry  contains many Flask extensions, you may not find\nan extension that fits your need. If this is the case, you can always create your own.\nConsider reading  Flask Extension Development  to develop your own Flask extension. \n \n \n Flask Before 0.8 \u00b6 \n If you are using Flask 0.7 or earlier the  flask.ext  package will not\nexist, instead you have to import from  flaskext.foo  or  flask_foo \ndepending on how the extension is distributed.  If you want to develop an\napplication that supports Flask 0.7 or earlier you should still import\nfrom the  flask.ext  package.  We provide you with a compatibility\nmodule that provides this package for older versions of Flask.  You can\ndownload it from GitHub:  flaskext_compat.py \n And here is how you can use it: \n import   flaskext_compat \n flaskext_compat . activate () \n\n from   flask.ext   import   foo \n \n \n Once the  flaskext_compat  module is activated the  flask.ext  will\nexist and you can start importing from there. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Flask Extensions \n Finding Extensions \n Using Extensions \n Building Extensions \n Flask Before 0.8 \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Modular Applications with Blueprints \n       Next:  Command Line Interface \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/blueprints/", "text": "\n   \n     \n     Modular Applications with Blueprints \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Modular Applications with Blueprints \u00b6 \n \n New in version 0.7. \n \n Flask uses a concept of  blueprints  for making application components and\nsupporting common patterns within an application or across applications.\nBlueprints can greatly simplify how large applications work and provide a\ncentral means for Flask extensions to register operations on applications.\nA  Blueprint  object works similarly to a  Flask \napplication object, but it is not actually an application.  Rather it is a\n blueprint  of how to construct or extend an application. \n \n Why Blueprints? \u00b6 \n Blueprints in Flask are intended for these cases: \n \n Factor an application into a set of blueprints.  This is ideal for\nlarger applications; a project could instantiate an application object,\ninitialize several extensions, and register a collection of blueprints. \n Register a blueprint on an application at a URL prefix and/or subdomain.\nParameters in the URL prefix/subdomain become common view arguments\n(with defaults) across all view functions in the blueprint. \n Register a blueprint multiple times on an application with different URL\nrules. \n Provide template filters, static files, templates, and other utilities\nthrough blueprints.  A blueprint does not have to implement applications\nor view functions. \n Register a blueprint on an application for any of these cases when\ninitializing a Flask extension. \n \n A blueprint in Flask is not a pluggable app because it is not actually an\napplication \u2013 it\u2019s a set of operations which can be registered on an\napplication, even multiple times.  Why not have multiple application\nobjects?  You can do that (see  Application Dispatching ), but your applications\nwill have separate configs and will be managed at the WSGI layer. \n Blueprints instead provide separation at the Flask level, share\napplication config, and can change an application object as necessary with\nbeing registered. The downside is that you cannot unregister a blueprint\nonce an application was created without having to destroy the whole\napplication object. \n \n \n The Concept of Blueprints \u00b6 \n The basic concept of blueprints is that they record operations to execute\nwhen registered on an application.  Flask associates view functions with\nblueprints when dispatching requests and generating URLs from one endpoint\nto another. \n \n \n My First Blueprint \u00b6 \n This is what a very basic blueprint looks like.  In this case we want to\nimplement a blueprint that does simple rendering of static templates: \n from   flask   import   Blueprint ,   render_template ,   abort \n from   jinja2   import   TemplateNotFound \n\n simple_page   =   Blueprint ( 'simple_page' ,   __name__ , \n                         template_folder = 'templates' ) \n\n @simple_page . route ( '/' ,   defaults = { 'page' :   'index' }) \n @simple_page . route ( '/<page>' ) \n def   show ( page ): \n     try : \n         return   render_template ( 'pages/ %s .html'   %   page ) \n     except   TemplateNotFound : \n         abort ( 404 ) \n \n \n When you bind a function with the help of the  @simple_page.route \ndecorator the blueprint will record the intention of registering the\nfunction  show  on the application when it\u2019s later registered.\nAdditionally it will prefix the endpoint of the function with the\nname of the blueprint which was given to the  Blueprint \nconstructor (in this case also  simple_page ). \n \n \n Registering Blueprints \u00b6 \n So how do you register that blueprint?  Like this: \n from   flask   import   Flask \n from   yourapplication.simple_page   import   simple_page \n\n app   =   Flask ( __name__ ) \n app . register_blueprint ( simple_page ) \n \n \n If you check the rules registered on the application, you will find\nthese: \n [ < Rule   '/static/<filename>'   ( HEAD ,   OPTIONS ,   GET )   ->   static > , \n  < Rule   '/<page>'   ( HEAD ,   OPTIONS ,   GET )   ->   simple_page . show > , \n  < Rule   '/'   ( HEAD ,   OPTIONS ,   GET )   ->   simple_page . show > ] \n \n \n The first one is obviously from the application itself for the static\nfiles.  The other two are for the  show  function of the  simple_page \nblueprint.  As you can see, they are also prefixed with the name of the\nblueprint and separated by a dot ( . ). \n Blueprints however can also be mounted at different locations: \n app . register_blueprint ( simple_page ,   url_prefix = '/pages' ) \n \n \n And sure enough, these are the generated rules: \n [ < Rule   '/static/<filename>'   ( HEAD ,   OPTIONS ,   GET )   ->   static > , \n  < Rule   '/pages/<page>'   ( HEAD ,   OPTIONS ,   GET )   ->   simple_page . show > , \n  < Rule   '/pages/'   ( HEAD ,   OPTIONS ,   GET )   ->   simple_page . show > ] \n \n \n On top of that you can register blueprints multiple times though not every\nblueprint might respond properly to that.  In fact it depends on how the\nblueprint is implemented if it can be mounted more than once. \n \n \n Blueprint Resources \u00b6 \n Blueprints can provide resources as well.  Sometimes you might want to\nintroduce a blueprint only for the resources it provides. \n \n Blueprint Resource Folder \u00b6 \n Like for regular applications, blueprints are considered to be contained\nin a folder.  While multiple blueprints can originate from the same folder,\nit does not have to be the case and it\u2019s usually not recommended. \n The folder is inferred from the second argument to  Blueprint  which\nis usually  __name__ .  This argument specifies what logical Python\nmodule or package corresponds to the blueprint.  If it points to an actual\nPython package that package (which is a folder on the filesystem) is the\nresource folder.  If it\u2019s a module, the package the module is contained in\nwill be the resource folder.  You can access the\n Blueprint.root_path  property to see what the resource folder is: \n >>>  simple_page . root_path \n '/Users/username/TestProject/yourapplication' \n \n \n To quickly open sources from this folder you can use the\n open_resource()  function: \n with   simple_page . open_resource ( 'static/style.css' )   as   f : \n     code   =   f . read () \n \n \n \n \n Static Files \u00b6 \n A blueprint can expose a folder with static files by providing a path to a\nfolder on the filesystem via the  static_folder  keyword argument.  It can\neither be an absolute path or one relative to the folder of the\nblueprint: \n admin   =   Blueprint ( 'admin' ,   __name__ ,   static_folder = 'static' ) \n \n \n By default the rightmost part of the path is where it is exposed on the\nweb.  Because the folder is called  static  here it will be available at\nthe location of the blueprint +  /static .  Say the blueprint is\nregistered for  /admin  the static folder will be at  /admin/static . \n The endpoint is named  blueprint_name.static  so you can generate URLs to\nit like you would do to the static folder of the application: \n url_for ( 'admin.static' ,   filename = 'style.css' ) \n \n \n \n \n Templates \u00b6 \n If you want the blueprint to expose templates you can do that by providing\nthe  template_folder  parameter to the  Blueprint  constructor: \n admin   =   Blueprint ( 'admin' ,   __name__ ,   template_folder = 'templates' ) \n \n \n For static files, the path can be absolute or relative to the blueprint\nresource folder. \n The template folder is added to the search path of templates but with a lower\npriority than the actual application\u2019s template folder. That way you can\neasily override templates that a blueprint provides in the actual application.\nThis also means that if you don\u2019t want a blueprint template to be accidentally\noverridden, make sure that no other blueprint or actual application template\nhas the same relative path. When multiple blueprints provide the same relative\ntemplate path the first blueprint registered takes precedence over the others. \n So if you have a blueprint in the folder  yourapplication/admin  and you\nwant to render the template  'admin/index.html'  and you have provided\n templates  as a  template_folder  you will have to create a file like\nthis:  yourapplication/admin/templates/admin/index.html . The reason\nfor the extra  admin  folder is to avoid getting our template overridden\nby a template named  index.html  in the actual application template\nfolder. \n To further reiterate this: if you have a blueprint named  admin  and you\nwant to render a template called  index.html  which is specific to this\nblueprint, the best idea is to lay out your templates like this: \n yourpackage / \n     blueprints / \n         admin / \n             templates / \n                 admin / \n                     index . html \n             __init__ . py \n \n \n And then when you want to render the template, use  admin/index.html  as\nthe name to look up the template by.  If you encounter problems loading\nthe correct templates enable the  EXPLAIN_TEMPLATE_LOADING  config\nvariable which will instruct Flask to print out the steps it goes through\nto locate templates on every  render_template  call. \n \n \n \n Building URLs \u00b6 \n If you want to link from one page to another you can use the\n url_for()  function just like you normally would do just that you\nprefix the URL endpoint with the name of the blueprint and a dot ( . ): \n url_for ( 'admin.index' ) \n \n \n Additionally if you are in a view function of a blueprint or a rendered\ntemplate and you want to link to another endpoint of the same blueprint,\nyou can use relative redirects by prefixing the endpoint with a dot only: \n url_for ( '.index' ) \n \n \n This will link to  admin.index  for instance in case the current request\nwas dispatched to any other admin blueprint endpoint. \n \n \n Error Handlers \u00b6 \n Blueprints support the errorhandler decorator just like the  Flask \napplication object, so it is easy to make Blueprint-specific custom error\npages. \n Here is an example for a \u201c404 Page Not Found\u201d exception: \n @simple_page . errorhandler ( 404 ) \n def   page_not_found ( e ): \n     return   render_template ( 'pages/404.html' ) \n \n \n More information on error handling see  Custom Error Pages . \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Modular Applications with Blueprints \n Why Blueprints? \n The Concept of Blueprints \n My First Blueprint \n Registering Blueprints \n Blueprint Resources \n Blueprint Resource Folder \n Static Files \n Templates \n \n \n Building URLs \n Error Handlers \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  The Request Context \n       Next:  Flask Extensions \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/server/", "text": "\n   \n     \n     Development Server \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Development Server \u00b6 \n Starting with Flask 0.11 there are multiple built-in ways to run a\ndevelopment server.  The best one is the  flask  command line utility\nbut you can also continue using the  Flask.run()  method. \n \n Command Line \u00b6 \n The  flask  command line script ( Command Line Interface ) is strongly recommended for\ndevelopment because it provides a superior reload experience due to how it\nloads the application.  The basic usage is like this: \n $ export FLASK_APP=my_application\n$ export FLASK_DEBUG=1\n$ flask run\n \n \n This will enable the debugger, the reloader and then start the server on\n http://localhost:5000/ . \n The individual features of the server can be controlled by passing more\narguments to the  run  option.  For instance the reloader can be\ndisabled: \n $ flask run --no-reload\n \n \n \n \n In Code \u00b6 \n The alternative way to start the application is through the\n Flask.run()  method.  This will immediately launch a local server\nexactly the same way the  flask  script does. \n Example: \n if   __name__   ==   '__main__' : \n     app . run () \n \n \n This works well for the common case but it does not work well for\ndevelopment which is why from Flask 0.11 onwards the  flask \nmethod is recommended.  The reason for this is that due to how the reload\nmechanism works there are some bizarre side-effects (like executing\ncertain code twice, sometimes crashing without message or dying when a\nsyntax or import error happens). \n It is however still a perfectly valid method for invoking a non automatic\nreloading application. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Development Server \n Command Line \n In Code \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Command Line Interface \n       Next:  Working with the Shell \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/views/", "text": "\n   \n     \n     Pluggable Views \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Pluggable Views \u00b6 \n \n New in version 0.7. \n \n Flask 0.7 introduces pluggable views inspired by the generic views from\nDjango which are based on classes instead of functions.  The main\nintention is that you can replace parts of the implementations and this\nway have customizable pluggable views. \n \n Basic Principle \u00b6 \n Consider you have a function that loads a list of objects from the\ndatabase and renders into a template: \n @app . route ( '/users/' ) \n def   show_users ( page ): \n     users   =   User . query . all () \n     return   render_template ( 'users.html' ,   users = users ) \n \n \n This is simple and flexible, but if you want to provide this view in a\ngeneric fashion that can be adapted to other models and templates as well\nyou might want more flexibility.  This is where pluggable class-based\nviews come into place.  As the first step to convert this into a class\nbased view you would do this: \n from   flask.views   import   View \n\n class   ShowUsers ( View ): \n\n     def   dispatch_request ( self ): \n         users   =   User . query . all () \n         return   render_template ( 'users.html' ,   objects = users ) \n\n app . add_url_rule ( '/users/' ,   view_func = ShowUsers . as_view ( 'show_users' )) \n \n \n As you can see what you have to do is to create a subclass of\n flask.views.View  and implement\n dispatch_request() .  Then we have to convert that\nclass into an actual view function by using the\n as_view()  class method.  The string you pass to\nthat function is the name of the endpoint that view will then have.  But\nthis by itself is not helpful, so let\u2019s refactor the code a bit: \n from   flask.views   import   View \n\n class   ListView ( View ): \n\n     def   get_template_name ( self ): \n         raise   NotImplementedError () \n\n     def   render_template ( self ,   context ): \n         return   render_template ( self . get_template_name (),   ** context ) \n\n     def   dispatch_request ( self ): \n         context   =   { 'objects' :   self . get_objects ()} \n         return   self . render_template ( context ) \n\n class   UserView ( ListView ): \n\n     def   get_template_name ( self ): \n         return   'users.html' \n\n     def   get_objects ( self ): \n         return   User . query . all () \n \n \n This of course is not that helpful for such a small example, but it\u2019s good\nenough to explain the basic principle.  When you have a class-based view\nthe question comes up what  self  points to.  The way this works is that\nwhenever the request is dispatched a new instance of the class is created\nand the  dispatch_request()  method is called with\nthe parameters from the URL rule.  The class itself is instantiated with\nthe parameters passed to the  as_view()  function.\nFor instance you can write a class like this: \n class   RenderTemplateView ( View ): \n     def   __init__ ( self ,   template_name ): \n         self . template_name   =   template_name \n     def   dispatch_request ( self ): \n         return   render_template ( self . template_name ) \n \n \n And then you can register it like this: \n app . add_url_rule ( '/about' ,   view_func = RenderTemplateView . as_view ( \n     'about_page' ,   template_name = 'about.html' )) \n \n \n \n \n Method Hints \u00b6 \n Pluggable views are attached to the application like a regular function by\neither using  route()  or better\n add_url_rule() .  That however also means that you would\nhave to provide the names of the HTTP methods the view supports when you\nattach this.  In order to move that information to the class you can\nprovide a  methods  attribute that has this\ninformation: \n class   MyView ( View ): \n     methods   =   [ 'GET' ,   'POST' ] \n\n     def   dispatch_request ( self ): \n         if   request . method   ==   'POST' : \n             ... \n         ... \n\n app . add_url_rule ( '/myview' ,   view_func = MyView . as_view ( 'myview' )) \n \n \n \n \n Method Based Dispatching \u00b6 \n For RESTful APIs it\u2019s especially helpful to execute a different function\nfor each HTTP method.  With the  flask.views.MethodView  you can\neasily do that.  Each HTTP method maps to a function with the same name\n(just in lowercase): \n from   flask.views   import   MethodView \n\n class   UserAPI ( MethodView ): \n\n     def   get ( self ): \n         users   =   User . query . all () \n         ... \n\n     def   post ( self ): \n         user   =   User . from_form_data ( request . form ) \n         ... \n\n app . add_url_rule ( '/users/' ,   view_func = UserAPI . as_view ( 'users' )) \n \n \n That way you also don\u2019t have to provide the\n methods  attribute.  It\u2019s automatically set based\non the methods defined in the class. \n \n \n Decorating Views \u00b6 \n Since the view class itself is not the view function that is added to the\nrouting system it does not make much sense to decorate the class itself.\nInstead you either have to decorate the return value of\n as_view()  by hand: \n def   user_required ( f ): \n     \"\"\"Checks whether user is logged in or raises error 401.\"\"\" \n     def   decorator ( * args ,   ** kwargs ): \n         if   not   g . user : \n             abort ( 401 ) \n         return   f ( * args ,   ** kwargs ) \n     return   decorator \n\n view   =   user_required ( UserAPI . as_view ( 'users' )) \n app . add_url_rule ( '/users/' ,   view_func = view ) \n \n \n Starting with Flask 0.8 there is also an alternative way where you can\nspecify a list of decorators to apply in the class declaration: \n class   UserAPI ( MethodView ): \n     decorators   =   [ user_required ] \n \n \n Due to the implicit self from the caller\u2019s perspective you cannot use\nregular view decorators on the individual methods of the view however,\nkeep this in mind. \n \n \n Method Views for APIs \u00b6 \n Web APIs are often working very closely with HTTP verbs so it makes a lot\nof sense to implement such an API based on the\n MethodView .  That said, you will notice that the API\nwill require different URL rules that go to the same method view most of\nthe time.  For instance consider that you are exposing a user object on\nthe web: \n \n \n \n \n \n \n \n URL \n Method \n Description \n \n /users/ \n GET \n Gives a list of all users \n \n /users/ \n POST \n Creates a new user \n \n /users/<id> \n GET \n Shows a single user \n \n /users/<id> \n PUT \n Updates a single user \n \n /users/<id> \n DELETE \n Deletes a single user \n \n \n \n So how would you go about doing that with the\n MethodView ?  The trick is to take advantage of the\nfact that you can provide multiple rules to the same view. \n Let\u2019s assume for the moment the view would look like this: \n class   UserAPI ( MethodView ): \n\n     def   get ( self ,   user_id ): \n         if   user_id   is   None : \n             # return a list of users \n             pass \n         else : \n             # expose a single user \n             pass \n\n     def   post ( self ): \n         # create a new user \n         pass \n\n     def   delete ( self ,   user_id ): \n         # delete a single user \n         pass \n\n     def   put ( self ,   user_id ): \n         # update a single user \n         pass \n \n \n So how do we hook this up with the routing system?  By adding two rules\nand explicitly mentioning the methods for each: \n user_view   =   UserAPI . as_view ( 'user_api' ) \n app . add_url_rule ( '/users/' ,   defaults = { 'user_id' :   None }, \n                  view_func = user_view ,   methods = [ 'GET' ,]) \n app . add_url_rule ( '/users/' ,   view_func = user_view ,   methods = [ 'POST' ,]) \n app . add_url_rule ( '/users/<int:user_id>' ,   view_func = user_view , \n                  methods = [ 'GET' ,   'PUT' ,   'DELETE' ]) \n \n \n If you have a lot of APIs that look similar you can refactor that\nregistration code: \n def   register_api ( view ,   endpoint ,   url ,   pk = 'id' ,   pk_type = 'int' ): \n     view_func   =   view . as_view ( endpoint ) \n     app . add_url_rule ( url ,   defaults = { pk :   None }, \n                      view_func = view_func ,   methods = [ 'GET' ,]) \n     app . add_url_rule ( url ,   view_func = view_func ,   methods = [ 'POST' ,]) \n     app . add_url_rule ( ' %s < %s : %s >'   %   ( url ,   pk_type ,   pk ),   view_func = view_func , \n                      methods = [ 'GET' ,   'PUT' ,   'DELETE' ]) \n\n register_api ( UserAPI ,   'user_api' ,   '/users/' ,   pk = 'user_id' ) \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Pluggable Views \n Basic Principle \n Method Hints \n Method Based Dispatching \n Decorating Views \n Method Views for APIs \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Signals \n       Next:  The Application Context \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/signals/", "text": "\n   \n     \n     Signals \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Signals \u00b6 \n \n New in version 0.6. \n \n Starting with Flask 0.6, there is integrated support for signalling in\nFlask.  This support is provided by the excellent  blinker  library and\nwill gracefully fall back if it is not available. \n What are signals?  Signals help you decouple applications by sending\nnotifications when actions occur elsewhere in the core framework or\nanother Flask extensions.  In short, signals allow certain senders to\nnotify subscribers that something happened. \n Flask comes with a couple of signals and other extensions might provide\nmore.  Also keep in mind that signals are intended to notify subscribers\nand should not encourage subscribers to modify data.  You will notice that\nthere are signals that appear to do the same thing like some of the\nbuiltin decorators do (eg:  request_started  is very similar\nto  before_request() ).  However, there are differences in\nhow they work.  The core  before_request()  handler, for\nexample, is executed in a specific order and is able to abort the request\nearly by returning a response.  In contrast all signal handlers are\nexecuted in undefined order and do not modify any data. \n The big advantage of signals over handlers is that you can safely\nsubscribe to them for just a split second.  These temporary\nsubscriptions are helpful for unittesting for example.  Say you want to\nknow what templates were rendered as part of a request: signals allow you\nto do exactly that. \n \n Subscribing to Signals \u00b6 \n To subscribe to a signal, you can use the\n connect()  method of a signal.  The first\nargument is the function that should be called when the signal is emitted,\nthe optional second argument specifies a sender.  To unsubscribe from a\nsignal, you can use the  disconnect()  method. \n For all core Flask signals, the sender is the application that issued the\nsignal.  When you subscribe to a signal, be sure to also provide a sender\nunless you really want to listen for signals from all applications.  This is\nespecially true if you are developing an extension. \n For example, here is a helper context manager that can be used in a unittest\nto determine which templates were rendered and what variables were passed\nto the template: \n from   flask   import   template_rendered \n from   contextlib   import   contextmanager \n\n @contextmanager \n def   captured_templates ( app ): \n     recorded   =   [] \n     def   record ( sender ,   template ,   context ,   ** extra ): \n         recorded . append (( template ,   context )) \n     template_rendered . connect ( record ,   app ) \n     try : \n         yield   recorded \n     finally : \n         template_rendered . disconnect ( record ,   app ) \n \n \n This can now easily be paired with a test client: \n with   captured_templates ( app )   as   templates : \n     rv   =   app . test_client () . get ( '/' ) \n     assert   rv . status_code   ==   200 \n     assert   len ( templates )   ==   1 \n     template ,   context   =   templates [ 0 ] \n     assert   template . name   ==   'index.html' \n     assert   len ( context [ 'items' ])   ==   10 \n \n \n Make sure to subscribe with an extra  **extra  argument so that your\ncalls don\u2019t fail if Flask introduces new arguments to the signals. \n All the template rendering in the code issued by the application  app \nin the body of the  with  block will now be recorded in the  templates \nvariable.  Whenever a template is rendered, the template object as well as\ncontext are appended to it. \n Additionally there is a convenient helper method\n( connected_to() )  that allows you to\ntemporarily subscribe a function to a signal with a context manager on\nits own.  Because the return value of the context manager cannot be\nspecified that way, you have to pass the list in as an argument: \n from   flask   import   template_rendered \n\n def   captured_templates ( app ,   recorded ,   ** extra ): \n     def   record ( sender ,   template ,   context ): \n         recorded . append (( template ,   context )) \n     return   template_rendered . connected_to ( record ,   app ) \n \n \n The example above would then look like this: \n templates   =   [] \n with   captured_templates ( app ,   templates ,   ** extra ): \n     ... \n     template ,   context   =   templates [ 0 ] \n \n \n \n Blinker API Changes \n The  connected_to()  method arrived in Blinker\nwith version 1.1. \n \n \n \n Creating Signals \u00b6 \n If you want to use signals in your own application, you can use the\nblinker library directly.  The most common use case are named signals in a\ncustom  Namespace ..  This is what is recommended\nmost of the time: \n from   blinker   import   Namespace \n my_signals   =   Namespace () \n \n \n Now you can create new signals like this: \n model_saved   =   my_signals . signal ( 'model-saved' ) \n \n \n The name for the signal here makes it unique and also simplifies\ndebugging.  You can access the name of the signal with the\n name  attribute. \n \n For Extension Developers \n If you are writing a Flask extension and you want to gracefully degrade for\nmissing blinker installations, you can do so by using the\n flask.signals.Namespace  class. \n \n \n \n Sending Signals \u00b6 \n If you want to emit a signal, you can do so by calling the\n send()  method.  It accepts a sender as first\nargument and optionally some keyword arguments that are forwarded to the\nsignal subscribers: \n class   Model ( object ): \n     ... \n\n     def   save ( self ): \n         model_saved . send ( self ) \n \n \n Try to always pick a good sender.  If you have a class that is emitting a\nsignal, pass  self  as sender.  If you are emitting a signal from a random\nfunction, you can pass  current_app._get_current_object()  as sender. \n \n Passing Proxies as Senders \n Never pass  current_app  as sender to a signal.  Use\n current_app._get_current_object()  instead.  The reason for this is\nthat  current_app  is a proxy and not the real application\nobject. \n \n \n \n Signals and Flask\u2019s Request Context \u00b6 \n Signals fully support  The Request Context  when receiving signals.\nContext-local variables are consistently available between\n request_started  and  request_finished , so you can\nrely on  flask.g  and others as needed.  Note the limitations described\nin  Sending Signals  and the  request_tearing_down  signal. \n \n \n Decorator Based Signal Subscriptions \u00b6 \n With Blinker 1.1 you can also easily subscribe to signals by using the new\n connect_via()  decorator: \n from   flask   import   template_rendered \n\n @template_rendered . connect_via ( app ) \n def   when_template_rendered ( sender ,   template ,   context ,   ** extra ): \n     print   'Template  %s  is rendered with  %s '   %   ( template . name ,   context ) \n \n \n \n \n Core Signals \u00b6 \n Take a look at  Signals  for a list of all builtin signals. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Signals \n Subscribing to Signals \n Creating Signals \n Sending Signals \n Signals and Flask\u2019s Request Context \n Decorator Based Signal Subscriptions \n Core Signals \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Configuration Handling \n       Next:  Pluggable Views \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/reqcontext/", "text": "\n   \n     \n     The Request Context \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n The Request Context \u00b6 \n This document describes the behavior in Flask 0.7 which is mostly in line\nwith the old behavior but has some small, subtle differences. \n It is recommended that you read the  The Application Context  chapter first. \n \n Diving into Context Locals \u00b6 \n Say you have a utility function that returns the URL the user should be\nredirected to.  Imagine it would always redirect to the URL\u2019s  next \nparameter or the HTTP referrer or the index page: \n from   flask   import   request ,   url_for \n\n def   redirect_url (): \n     return   request . args . get ( 'next' )   or  \\\n            request . referrer   or  \\\n            url_for ( 'index' ) \n \n \n As you can see, it accesses the request object.  If you try to run this\nfrom a plain Python shell, this is the exception you will see: \n >>>  redirect_url () \n Traceback (most recent call last): \n  File  \"<stdin>\" , line  1 , in  <module> \n AttributeError :  'NoneType' object has no attribute 'request' \n \n \n That makes a lot of sense because we currently do not have a request we\ncould access.  So we have to make a request and bind it to the current\ncontext.  The  test_request_context  method can create\nus a  RequestContext : \n >>>  ctx   =   app . test_request_context ( '/?next=http://example.com/' ) \n \n \n This context can be used in two ways.  Either with the  with  statement\nor by calling the  push()  and\n pop()  methods: \n >>>  ctx . push () \n \n \n From that point onwards you can work with the request object: \n >>>  redirect_url () \n u'http://example.com/' \n \n \n Until you call  pop : \n >>>  ctx . pop () \n \n \n Because the request context is internally maintained as a stack you can\npush and pop multiple times.  This is very handy to implement things like\ninternal redirects. \n For more information of how to utilize the request context from the\ninteractive Python shell, head over to the  Working with the Shell  chapter. \n \n \n How the Context Works \u00b6 \n If you look into how the Flask WSGI application internally works, you will\nfind a piece of code that looks very much like this: \n def   wsgi_app ( self ,   environ ): \n     with   self . request_context ( environ ): \n         try : \n             response   =   self . full_dispatch_request () \n         except   Exception   as   e : \n             response   =   self . make_response ( self . handle_exception ( e )) \n         return   response ( environ ,   start_response ) \n \n \n The method  request_context()  returns a new\n RequestContext  object and uses it in combination with\nthe  with  statement to bind the context.  Everything that is called from\nthe same thread from this point onwards until the end of the  with \nstatement will have access to the request globals ( flask.request \nand others). \n The request context internally works like a stack: The topmost level on\nthe stack is the current active request.\n push()  adds the context to the stack on\nthe very top,  pop()  removes it from the\nstack again.  On popping the application\u2019s\n teardown_request()  functions are also executed. \n Another thing of note is that the request context will automatically also\ncreate an  application context  when it\u2019s pushed and\nthere is no application context for that application so far. \n \n \n Callbacks and Errors \u00b6 \n What happens if an error occurs in Flask during request processing?  This\nparticular behavior changed in 0.7 because we wanted to make it easier to\nunderstand what is actually happening.  The new behavior is quite simple: \n \n Before each request,  before_request()  functions are\nexecuted.  If one of these functions return a response, the other\nfunctions are no longer called.  In any case however the return value\nis treated as a replacement for the view\u2019s return value. \n If the  before_request()  functions did not return a\nresponse, the regular request handling kicks in and the view function\nthat was matched has the chance to return a response. \n The return value of the view is then converted into an actual response\nobject and handed over to the  after_request() \nfunctions which have the chance to replace it or modify it in place. \n At the end of the request the  teardown_request() \nfunctions are executed.  This always happens, even in case of an\nunhandled exception down the road or if a before-request handler was\nnot executed yet or at all (for example in test environments sometimes\nyou might want to not execute before-request callbacks). \n \n Now what happens on errors?  In production mode if an exception is not\ncaught, the 500 internal server handler is called.  In development mode\nhowever the exception is not further processed and bubbles up to the WSGI\nserver.  That way things like the interactive debugger can provide helpful\ndebug information. \n An important change in 0.7 is that the internal server error is now no\nlonger post processed by the after request callbacks and after request\ncallbacks are no longer guaranteed to be executed.  This way the internal\ndispatching code looks cleaner and is easier to customize and understand. \n The new teardown functions are supposed to be used as a replacement for\nthings that absolutely need to happen at the end of request. \n \n \n Teardown Callbacks \u00b6 \n The teardown callbacks are special callbacks in that they are executed at\na different point.  Strictly speaking they are independent of the actual\nrequest handling as they are bound to the lifecycle of the\n RequestContext  object.  When the request context is\npopped, the  teardown_request()  functions are called. \n This is important to know if the life of the request context is prolonged\nby using the test client in a with statement or when using the request\ncontext from the command line: \n with   app . test_client ()   as   client : \n     resp   =   client . get ( '/foo' ) \n     # the teardown functions are still not called at that point \n     # even though the response ended and you have the response \n     # object in your hand \n\n # only when the code reaches this point the teardown functions \n # are called.  Alternatively the same thing happens if another \n # request was triggered from the test client \n \n \n It\u2019s easy to see the behavior from the command line: \n >>>  app   =   Flask ( __name__ ) \n >>>  @app . teardown_request \n ...  def   teardown_request ( exception = None ): \n ...       print   'this runs after request' \n ... \n >>>  ctx   =   app . test_request_context () \n >>>  ctx . push () \n >>>  ctx . pop () \n this runs after request \n >>> \n \n \n Keep in mind that teardown callbacks are always executed, even if\nbefore-request callbacks were not executed yet but an exception happened.\nCertain parts of the test system might also temporarily create a request\ncontext without calling the before-request handlers.  Make sure to write\nyour teardown-request handlers in a way that they will never fail. \n \n \n Notes On Proxies \u00b6 \n Some of the objects provided by Flask are proxies to other objects.  The\nreason behind this is that these proxies are shared between threads and\nthey have to dispatch to the actual object bound to a thread behind the\nscenes as necessary. \n Most of the time you don\u2019t have to care about that, but there are some\nexceptions where it is good to know that this object is an actual proxy: \n \n The proxy objects do not fake their inherited types, so if you want to\nperform actual instance checks, you have to do that on the instance\nthat is being proxied (see  _get_current_object  below). \n if the object reference is important (so for example for sending\n Signals ) \n \n If you need to get access to the underlying object that is proxied, you\ncan use the  _get_current_object()  method: \n app   =   current_app . _get_current_object () \n my_signal . send ( app ) \n \n \n \n \n Context Preservation on Error \u00b6 \n If an error occurs or not, at the end of the request the request context\nis popped and all data associated with it is destroyed.  During\ndevelopment however that can be problematic as you might want to have the\ninformation around for a longer time in case an exception occurred.  In\nFlask 0.6 and earlier in debug mode, if an exception occurred, the\nrequest context was not popped so that the interactive debugger can still\nprovide you with important information. \n Starting with Flask 0.7 you have finer control over that behavior by\nsetting the  PRESERVE_CONTEXT_ON_EXCEPTION  configuration variable.  By\ndefault it\u2019s linked to the setting of  DEBUG .  If the application is in\ndebug mode the context is preserved, in production mode it\u2019s not. \n Do not force activate  PRESERVE_CONTEXT_ON_EXCEPTION  in production mode\nas it will cause your application to leak memory on exceptions.  However\nit can be useful during development to get the same error preserving\nbehavior as in development mode when attempting to debug an error that\nonly occurs under production settings. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n The Request Context \n Diving into Context Locals \n How the Context Works \n Callbacks and Errors \n Teardown Callbacks \n Notes On Proxies \n Context Preservation on Error \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  The Application Context \n       Next:  Modular Applications with Blueprints \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/appcontext/", "text": "\n   \n     \n     The Application Context \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n The Application Context \u00b6 \n \n New in version 0.9. \n \n One of the design ideas behind Flask is that there are two different\n\u201cstates\u201d in which code is executed.  The application setup state in which\nthe application implicitly is on the module level.  It starts when the\n Flask  object is instantiated, and it implicitly ends when the\nfirst request comes in.  While the application is in this state a few\nassumptions are true: \n \n the programmer can modify the application object safely. \n no request handling happened so far \n you have to have a reference to the application object in order to\nmodify it, there is no magic proxy that can give you a reference to\nthe application object you\u2019re currently creating or modifying. \n \n In contrast, during request handling, a couple of other rules exist: \n \n while a request is active, the context local objects\n( flask.request  and others) point to the current request. \n any code can get hold of these objects at any time. \n \n There is a third state which is sitting in between a little bit.\nSometimes you are dealing with an application in a way that is similar to\nhow you interact with applications during request handling; just that there\nis no request active.  Consider, for instance, that you\u2019re sitting in an\ninteractive Python shell and interacting with the application, or a\ncommand line application. \n The application context is what powers the  current_app \ncontext local. \n \n Purpose of the Application Context \u00b6 \n The main reason for the application\u2019s context existence is that in the\npast a bunch of functionality was attached to the request context for lack\nof a better solution.  Since one of the pillars of Flask\u2019s design is that\nyou can have more than one application in the same Python process. \n So how does the code find the \u201cright\u201d application?  In the past we\nrecommended passing applications around explicitly, but that caused issues\nwith libraries that were not designed with that in mind. \n A common workaround for that problem was to use the\n current_app  proxy later on, which was bound to the current\nrequest\u2019s application reference.  Since creating such a request context is\nan unnecessarily expensive operation in case there is no request around,\nthe application context was introduced. \n \n \n Creating an Application Context \u00b6 \n There are two ways to make an application context.  The first one is\nimplicit: whenever a request context is pushed, an application context\nwill be created alongside if this is necessary.  As a result, you can\nignore the existence of the application context unless you need it. \n The second way is the explicit way using the\n app_context()  method: \n from   flask   import   Flask ,   current_app \n\n app   =   Flask ( __name__ ) \n with   app . app_context (): \n     # within this block, current_app points to app. \n     print   current_app . name \n \n \n The application context is also used by the  url_for() \nfunction in case a  SERVER_NAME  was configured.  This allows you to\ngenerate URLs even in the absence of a request. \n If no request context has been pushed and an application context has\nnot been explicitly set, a  RuntimeError  will be raised. \n RuntimeError :   Working   outside   of   application   context . \n \n \n \n \n Locality of the Context \u00b6 \n The application context is created and destroyed as necessary.  It never\nmoves between threads and it will not be shared between requests.  As such\nit is the perfect place to store database connection information and other\nthings.  The internal stack object is called  flask._app_ctx_stack .\nExtensions are free to store additional information on the topmost level,\nassuming they pick a sufficiently unique name and should put their\ninformation there, instead of on the  flask.g  object which is reserved\nfor user code. \n For more information about that, see  Flask Extension Development . \n \n \n Context Usage \u00b6 \n The context is typically used to cache resources that need to be created\non a per-request or usage case.  For instance, database connections are\ndestined to go there.  When storing things on the application context\nunique names should be chosen as this is a place that is shared between\nFlask applications and extensions. \n The most common usage is to split resource management into two parts: \n \n an implicit resource caching on the context. \n a context teardown based resource deallocation. \n \n Generally there would be a  get_X()  function that creates resource\n X  if it does not exist yet and otherwise returns the same resource,\nand a  teardown_X()  function that is registered as teardown handler. \n This is an example that connects to a database: \n import   sqlite3 \n from   flask   import   g \n\n def   get_db (): \n     db   =   getattr ( g ,   '_database' ,   None ) \n     if   db   is   None : \n         db   =   g . _database   =   connect_to_database () \n     return   db \n\n @app . teardown_appcontext \n def   teardown_db ( exception ): \n     db   =   getattr ( g ,   '_database' ,   None ) \n     if   db   is   not   None : \n         db . close () \n \n \n The first time  get_db()  is called the connection will be established.\nTo make this implicit a  LocalProxy  can be used: \n from   werkzeug.local   import   LocalProxy \n db   =   LocalProxy ( get_db ) \n \n \n That way a user can directly access  db  which internally calls\n get_db() . \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n The Application Context \n Purpose of the Application Context \n Creating an Application Context \n Locality of the Context \n Context Usage \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Pluggable Views \n       Next:  The Request Context \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/config/", "text": "\n   \n     \n     Configuration Handling \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Configuration Handling \u00b6 \n \n New in version 0.3. \n \n Applications need some kind of configuration.  There are different settings\nyou might want to change depending on the application environment like\ntoggling the debug mode, setting the secret key, and other such\nenvironment-specific things. \n The way Flask is designed usually requires the configuration to be\navailable when the application starts up.  You can hardcode the\nconfiguration in the code, which for many small applications is not\nactually that bad, but there are better ways. \n Independent of how you load your config, there is a config object\navailable which holds the loaded configuration values:\nThe  config  attribute of the  Flask \nobject.  This is the place where Flask itself puts certain configuration\nvalues and also where extensions can put their configuration values.  But\nthis is also where you can have your own configuration. \n \n Configuration Basics \u00b6 \n The  config  is actually a subclass of a dictionary and\ncan be modified just like any dictionary: \n app   =   Flask ( __name__ ) \n app . config [ 'DEBUG' ]   =   True \n \n \n Certain configuration values are also forwarded to the\n Flask  object so you can read and write them from there: \n app . debug   =   True \n \n \n To update multiple keys at once you can use the  dict.update() \nmethod: \n app . config . update ( \n     DEBUG = True , \n     SECRET_KEY = '...' \n ) \n \n \n \n \n Builtin Configuration Values \u00b6 \n The following configuration values are used internally by Flask: \n \n \n \n \n \n \n DEBUG \n enable/disable debug mode \n \n TESTING \n enable/disable testing mode \n \n PROPAGATE_EXCEPTIONS \n explicitly enable or disable the\npropagation of exceptions.  If not set or\nexplicitly set to  None  this is\nimplicitly true if either  TESTING  or\n DEBUG  is true. \n \n PRESERVE_CONTEXT_ON_EXCEPTION \n By default if the application is in\ndebug mode the request context is not\npopped on exceptions to enable debuggers\nto introspect the data.  This can be\ndisabled by this key.  You can also use\nthis setting to force-enable it for non\ndebug execution which might be useful to\ndebug production applications (but also\nvery risky). \n \n SECRET_KEY \n the secret key \n \n SESSION_COOKIE_NAME \n the name of the session cookie \n \n SESSION_COOKIE_DOMAIN \n the domain for the session cookie.  If\nthis is not set, the cookie will be\nvalid for all subdomains of\n SERVER_NAME . \n \n SESSION_COOKIE_PATH \n the path for the session cookie.  If\nthis is not set the cookie will be valid\nfor all of  APPLICATION_ROOT  or if\nthat is not set for  '/' . \n \n SESSION_COOKIE_HTTPONLY \n controls if the cookie should be set\nwith the httponly flag.  Defaults to\n True . \n \n SESSION_COOKIE_SECURE \n controls if the cookie should be set\nwith the secure flag.  Defaults to\n False . \n \n PERMANENT_SESSION_LIFETIME \n the lifetime of a permanent session as\n datetime.timedelta  object.\nStarting with Flask 0.8 this can also be\nan integer representing seconds. \n \n SESSION_REFRESH_EACH_REQUEST \n this flag controls how permanent\nsessions are refreshed.  If set to  True \n(which is the default) then the cookie\nis refreshed each request which\nautomatically bumps the lifetime.  If\nset to  False  a  set-cookie  header is\nonly sent if the session is modified.\nNon permanent sessions are not affected\nby this. \n \n USE_X_SENDFILE \n enable/disable x-sendfile \n \n LOGGER_NAME \n the name of the logger \n \n LOGGER_HANDLER_POLICY \n the policy of the default logging\nhandler.  The default is  'always' \nwhich means that the default logging\nhandler is always active.   'debug' \nwill only activate logging in debug\nmode,  'production'  will only log in\nproduction and  'never'  disables it\nentirely. \n \n SERVER_NAME \n the name and port number of the server.\nRequired for subdomain support (e.g.:\n 'myapp.dev:5000' )  Note that\nlocalhost does not support subdomains so\nsetting this to \u201clocalhost\u201d does not\nhelp.  Setting a  SERVER_NAME  also\nby default enables URL generation\nwithout a request context but with an\napplication context. \n \n APPLICATION_ROOT \n If the application does not occupy\na whole domain or subdomain this can\nbe set to the path where the application\nis configured to live.  This is for\nsession cookie as path value.  If\ndomains are used, this should be\n None . \n \n MAX_CONTENT_LENGTH \n If set to a value in bytes, Flask will\nreject incoming requests with a\ncontent length greater than this by\nreturning a 413 status code. \n \n SEND_FILE_MAX_AGE_DEFAULT \n Default cache control max age to use with\n send_static_file()  (the\ndefault static file handler) and\n send_file() , as\n datetime.timedelta  or as seconds.\nOverride this value on a per-file\nbasis using the\n get_send_file_max_age() \nhook on  Flask  or\n Blueprint ,\nrespectively. Defaults to 43200 (12 hours). \n \n TRAP_HTTP_EXCEPTIONS \n If this is set to  True  Flask will\nnot execute the error handlers of HTTP\nexceptions but instead treat the\nexception like any other and bubble it\nthrough the exception stack.  This is\nhelpful for hairy debugging situations\nwhere you have to find out where an HTTP\nexception is coming from. \n \n TRAP_BAD_REQUEST_ERRORS \n Werkzeug\u2019s internal data structures that\ndeal with request specific data will\nraise special key errors that are also\nbad request exceptions.  Likewise many\noperations can implicitly fail with a\nBadRequest exception for consistency.\nSince it\u2019s nice for debugging to know\nwhy exactly it failed this flag can be\nused to debug those situations.  If this\nconfig is set to  True  you will get\na regular traceback instead. \n \n PREFERRED_URL_SCHEME \n The URL scheme that should be used for\nURL generation if no URL scheme is\navailable.  This defaults to  http . \n \n JSON_AS_ASCII \n By default Flask serialize object to\nascii-encoded JSON.  If this is set to\n False  Flask will not encode to ASCII\nand output strings as-is and return\nunicode strings.   jsonify  will\nautomatically encode it in  utf-8 \nthen for transport for instance. \n \n JSON_SORT_KEYS \n By default Flask will serialize JSON\nobjects in a way that the keys are\nordered.  This is done in order to\nensure that independent of the hash seed\nof the dictionary the return value will\nbe consistent to not trash external HTTP\ncaches.  You can override the default\nbehavior by changing this variable.\nThis is not recommended but might give\nyou a performance improvement on the\ncost of cacheability. \n \n JSONIFY_PRETTYPRINT_REGULAR \n If this is set to  True  (the default)\njsonify responses will be pretty printed\nif they are not requested by an\nXMLHttpRequest object (controlled by\nthe  X-Requested-With  header) \n \n JSONIFY_MIMETYPE \n MIME type used for jsonify responses. \n \n TEMPLATES_AUTO_RELOAD \n Whether to check for modifications of\nthe template source and reload it\nautomatically. By default the value is\n None  which means that Flask checks\noriginal file only in debug mode. \n \n EXPLAIN_TEMPLATE_LOADING \n If this is enabled then every attempt to\nload a template will write an info\nmessage to the logger explaining the\nattempts to locate the template.  This\ncan be useful to figure out why\ntemplates cannot be found or wrong\ntemplates appear to be loaded. \n \n \n \n \n More on  SERVER_NAME \n The  SERVER_NAME  key is used for the subdomain support.  Because\nFlask cannot guess the subdomain part without the knowledge of the\nactual server name, this is required if you want to work with\nsubdomains.  This is also used for the session cookie. \n Please keep in mind that not only Flask has the problem of not knowing\nwhat subdomains are, your web browser does as well.  Most modern web\nbrowsers will not allow cross-subdomain cookies to be set on a\nserver name without dots in it.  So if your server name is\n 'localhost'  you will not be able to set a cookie for\n 'localhost'  and every subdomain of it.  Please choose a different\nserver name in that case, like  'myapplication.local'  and add\nthis name + the subdomains you want to use into your host config\nor setup a local  bind . \n \n \n New in version 0.4:  LOGGER_NAME \n \n \n New in version 0.5:  SERVER_NAME \n \n \n New in version 0.6:  MAX_CONTENT_LENGTH \n \n \n New in version 0.7:  PROPAGATE_EXCEPTIONS ,  PRESERVE_CONTEXT_ON_EXCEPTION \n \n \n New in version 0.8:  TRAP_BAD_REQUEST_ERRORS ,  TRAP_HTTP_EXCEPTIONS ,\n APPLICATION_ROOT ,  SESSION_COOKIE_DOMAIN ,\n SESSION_COOKIE_PATH ,  SESSION_COOKIE_HTTPONLY ,\n SESSION_COOKIE_SECURE \n \n \n New in version 0.9:  PREFERRED_URL_SCHEME \n \n \n New in version 0.10:  JSON_AS_ASCII ,  JSON_SORT_KEYS ,  JSONIFY_PRETTYPRINT_REGULAR \n \n \n New in version 0.11:  SESSION_REFRESH_EACH_REQUEST ,  TEMPLATES_AUTO_RELOAD ,\n LOGGER_HANDLER_POLICY ,  EXPLAIN_TEMPLATE_LOADING \n \n \n \n Configuring from Files \u00b6 \n Configuration becomes more useful if you can store it in a separate file,\nideally located outside the actual application package. This makes\npackaging and distributing your application possible via various package\nhandling tools ( Deploying with Setuptools ) and finally modifying the\nconfiguration file afterwards. \n So a common pattern is this: \n app   =   Flask ( __name__ ) \n app . config . from_object ( 'yourapplication.default_settings' ) \n app . config . from_envvar ( 'YOURAPPLICATION_SETTINGS' ) \n \n \n This first loads the configuration from the\n yourapplication.default_settings  module and then overrides the values\nwith the contents of the file the  YOURAPPLICATION_SETTINGS \nenvironment variable points to.  This environment variable can be set on\nLinux or OS X with the export command in the shell before starting the\nserver: \n $ export YOURAPPLICATION_SETTINGS=/path/to/settings.cfg\n$ python run-app.py\n * Running on http://127.0.0.1:5000/\n * Restarting with reloader...\n \n \n On Windows systems use the  set  builtin instead: \n > set   YOURAPPLICATION_SETTINGS = \\ path \\ to \\ settings . cfg \n \n \n The configuration files themselves are actual Python files.  Only values\nin uppercase are actually stored in the config object later on.  So make\nsure to use uppercase letters for your config keys. \n Here is an example of a configuration file: \n # Example configuration \n DEBUG   =   False \n SECRET_KEY   =   '? \\xbf , \\xb4\\x8d\\xa3 \"< \\x9c\\xb0 @ \\x0f 5 \\xab ,w \\xee\\x8d $0 \\x13\\x8b 83' \n \n \n Make sure to load the configuration very early on, so that extensions have\nthe ability to access the configuration when starting up.  There are other\nmethods on the config object as well to load from individual files.  For a\ncomplete reference, read the  Config  object\u2019s\ndocumentation. \n \n \n Configuration Best Practices \u00b6 \n The downside with the approach mentioned earlier is that it makes testing\na little harder.  There is no single 100% solution for this problem in\ngeneral, but there are a couple of things you can keep in mind to improve\nthat experience: \n \n Create your application in a function and register blueprints on it.\nThat way you can create multiple instances of your application with\ndifferent configurations attached which makes unittesting a lot\neasier.  You can use this to pass in configuration as needed. \n Do not write code that needs the configuration at import time.  If you\nlimit yourself to request-only accesses to the configuration you can\nreconfigure the object later on as needed. \n \n \n \n Development / Production \u00b6 \n Most applications need more than one configuration.  There should be at\nleast separate configurations for the production server and the one used\nduring development.  The easiest way to handle this is to use a default\nconfiguration that is always loaded and part of the version control, and a\nseparate configuration that overrides the values as necessary as mentioned\nin the example above: \n app   =   Flask ( __name__ ) \n app . config . from_object ( 'yourapplication.default_settings' ) \n app . config . from_envvar ( 'YOURAPPLICATION_SETTINGS' ) \n \n \n Then you just have to add a separate  config.py  file and export\n YOURAPPLICATION_SETTINGS=/path/to/config.py  and you are done.  However\nthere are alternative ways as well.  For example you could use imports or\nsubclassing. \n What is very popular in the Django world is to make the import explicit in\nthe config file by adding  from   yourapplication.default_settings \n import   *  to the top of the file and then overriding the changes by hand.\nYou could also inspect an environment variable like\n YOURAPPLICATION_MODE  and set that to  production ,  development  etc\nand import different hardcoded files based on that. \n An interesting pattern is also to use classes and inheritance for\nconfiguration: \n class   Config ( object ): \n     DEBUG   =   False \n     TESTING   =   False \n     DATABASE_URI   =   'sqlite://:memory:' \n\n class   ProductionConfig ( Config ): \n     DATABASE_URI   =   'mysql://user@localhost/foo' \n\n class   DevelopmentConfig ( Config ): \n     DEBUG   =   True \n\n class   TestingConfig ( Config ): \n     TESTING   =   True \n \n \n To enable such a config you just have to call into\n from_object() : \n app . config . from_object ( 'configmodule.ProductionConfig' ) \n \n \n There are many different ways and it\u2019s up to you how you want to manage\nyour configuration files.  However here a list of good recommendations: \n \n Keep a default configuration in version control.  Either populate the\nconfig with this default configuration or import it in your own\nconfiguration files before overriding values. \n Use an environment variable to switch between the configurations.\nThis can be done from outside the Python interpreter and makes\ndevelopment and deployment much easier because you can quickly and\neasily switch between different configs without having to touch the\ncode at all.  If you are working often on different projects you can\neven create your own script for sourcing that activates a virtualenv\nand exports the development configuration for you. \n Use a tool like  fabric  in production to push code and\nconfigurations separately to the production server(s).  For some\ndetails about how to do that, head over to the\n Deploying with Fabric  pattern. \n \n \n \n Instance Folders \u00b6 \n \n New in version 0.8. \n \n Flask 0.8 introduces instance folders.  Flask for a long time made it\npossible to refer to paths relative to the application\u2019s folder directly\n(via  Flask.root_path ).  This was also how many developers loaded\nconfigurations stored next to the application.  Unfortunately however this\nonly works well if applications are not packages in which case the root\npath refers to the contents of the package. \n With Flask 0.8 a new attribute was introduced:\n Flask.instance_path .  It refers to a new concept called the\n\u201cinstance folder\u201d.  The instance folder is designed to not be under\nversion control and be deployment specific.  It\u2019s the perfect place to\ndrop things that either change at runtime or configuration files. \n You can either explicitly provide the path of the instance folder when\ncreating the Flask application or you can let Flask autodetect the\ninstance folder.  For explicit configuration use the  instance_path \nparameter: \n app   =   Flask ( __name__ ,   instance_path = '/path/to/instance/folder' ) \n \n \n Please keep in mind that this path  must  be absolute when provided. \n If the  instance_path  parameter is not provided the following default\nlocations are used: \n \n Uninstalled module: \n / myapp . py \n / instance \n \n \n \n Uninstalled package: \n / myapp \n     / __init__ . py \n / instance \n \n \n \n Installed module or package: \n $PREFIX/lib/python2.X/site-packages/myapp\n$PREFIX/var/myapp-instance\n \n \n $PREFIX  is the prefix of your Python installation.  This can be\n /usr  or the path to your virtualenv.  You can print the value of\n sys.prefix  to see what the prefix is set to. \n \n \n Since the config object provided loading of configuration files from\nrelative filenames we made it possible to change the loading via filenames\nto be relative to the instance path if wanted.  The behavior of relative\npaths in config files can be flipped between \u201crelative to the application\nroot\u201d (the default) to \u201crelative to instance folder\u201d via the\n instance_relative_config  switch to the application constructor: \n app   =   Flask ( __name__ ,   instance_relative_config = True ) \n \n \n Here is a full example of how to configure Flask to preload the config\nfrom a module and then override the config from a file in the config\nfolder if it exists: \n app   =   Flask ( __name__ ,   instance_relative_config = True ) \n app . config . from_object ( 'yourapplication.default_settings' ) \n app . config . from_pyfile ( 'application.cfg' ,   silent = True ) \n \n \n The path to the instance folder can be found via the\n Flask.instance_path .  Flask also provides a shortcut to open a\nfile from the instance folder with  Flask.open_instance_resource() . \n Example usage for both: \n filename   =   os . path . join ( app . instance_path ,   'application.cfg' ) \n with   open ( filename )   as   f : \n     config   =   f . read () \n\n # or via open_instance_resource: \n with   app . open_instance_resource ( 'application.cfg' )   as   f : \n     config   =   f . read () \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Configuration Handling \n Configuration Basics \n Builtin Configuration Values \n Configuring from Files \n Configuration Best Practices \n Development / Production \n Instance Folders \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Application Errors \n       Next:  Signals \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/errorhandling/", "text": "\n   \n     \n     Application Errors \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Application Errors \u00b6 \n \n New in version 0.3. \n \n Applications fail, servers fail.  Sooner or later you will see an exception\nin production.  Even if your code is 100% correct, you will still see\nexceptions from time to time.  Why?  Because everything else involved will\nfail.  Here are some situations where perfectly fine code can lead to server\nerrors: \n \n the client terminated the request early and the application was still\nreading from the incoming data \n the database server was overloaded and could not handle the query \n a filesystem is full \n a harddrive crashed \n a backend server overloaded \n a programming error in a library you are using \n network connection of the server to another system failed \n \n And that\u2019s just a small sample of issues you could be facing.  So how do we\ndeal with that sort of problem?  By default if your application runs in\nproduction mode, Flask will display a very simple page for you and log the\nexception to the  logger . \n But there is more you can do, and we will cover some better setups to deal\nwith errors. \n \n Error Logging Tools \u00b6 \n Sending error mails, even if just for critical ones, can become\noverwhelming if enough users are hitting the error and log files are\ntypically never looked at. This is why we recommend using  Sentry  for dealing with application errors.  It\u2019s\navailable as an Open Source project  on GitHub  and is also available as a  hosted version  which you can try for free. Sentry\naggregates duplicate errors, captures the full stack trace and local\nvariables for debugging, and sends you mails based on new errors or\nfrequency thresholds. \n To use Sentry you need to install the  raven  client: \n $ pip install raven\n \n \n And then add this to your Flask app: \n from   raven.contrib.flask   import   Sentry \n sentry   =   Sentry ( app ,   dsn = 'YOUR_DSN_HERE' ) \n \n \n Or if you are using factories you can also init it later: \n from   raven.contrib.flask   import   Sentry \n sentry   =   Sentry ( dsn = 'YOUR_DSN_HERE' ) \n\n def   create_app (): \n     app   =   Flask ( __name__ ) \n     sentry . init_app ( app ) \n     ... \n     return   app \n \n \n The  YOUR_DSN_HERE  value needs to be replaced with the DSN value you get\nfrom your Sentry installation. \n Afterwards failures are automatically reported to Sentry and from there\nyou can receive error notifications. \n \n \n Error handlers \u00b6 \n You might want to show custom error pages to the user when an error occurs.\nThis can be done by registering error handlers. \n Error handlers are normal  Pluggable Views  but instead of being registered for\nroutes, they are registered for exceptions that are raised while trying to\ndo something else. \n \n Registering \u00b6 \n Register error handlers using  errorhandler()  or\n register_error_handler() : \n @app . errorhandler ( werkzeug . exceptions . BadRequest ) \n def   handle_bad_request ( e ): \n     return   'bad request!' \n\n app . register_error_handler ( 400 ,   lambda   e :   'bad request!' ) \n \n \n Those two ways are equivalent, but the first one is more clear and leaves\nyou with a function to call on your whim (and in tests).  Note that\n werkzeug.exceptions.HTTPException  subclasses like\n BadRequest  from the example and their HTTP codes\nare interchangeable when handed to the registration methods or decorator\n( BadRequest.code   ==   400 ). \n You are however not limited to  HTTPException \nor HTTP status codes but can register a handler for every exception class you\nlike. \n \n Changed in version 0.11:  Errorhandlers are now prioritized by specificity of the exception classes\nthey are registered for instead of the order they are registered in. \n \n \n \n Handling \u00b6 \n Once an exception instance is raised, its class hierarchy is traversed,\nand searched for in the exception classes for which handlers are registered.\nThe most specific handler is selected. \n E.g. if an instance of  ConnectionRefusedError  is raised, and a handler\nis registered for  ConnectionError  and  ConnectionRefusedError ,\nthe more specific  ConnectionRefusedError  handler is called on the\nexception instance, and its response is shown to the user. \n \n \n \n Error Mails \u00b6 \n If the application runs in production mode (which it will do on your\nserver) you might not see any log messages.  The reason for that is that\nFlask by default will just report to the WSGI error stream or stderr\n(depending on what\u2019s available).  Where this ends up is sometimes hard to\nfind.  Often it\u2019s in your webserver\u2019s log files. \n I can pretty much promise you however that if you only use a logfile for\nthe application errors you will never look at it except for debugging an\nissue when a user reported it for you.  What you probably want instead is\na mail the second the exception happened.  Then you get an alert and you\ncan do something about it. \n Flask uses the Python builtin logging system, and it can actually send\nyou mails for errors which is probably what you want.  Here is how you can\nconfigure the Flask logger to send you mails for exceptions: \n ADMINS   =   [ 'yourname@example.com' ] \n if   not   app . debug : \n     import   logging \n     from   logging.handlers   import   SMTPHandler \n     mail_handler   =   SMTPHandler ( '127.0.0.1' , \n                                'server-error@example.com' , \n                                ADMINS ,   'YourApplication Failed' ) \n     mail_handler . setLevel ( logging . ERROR ) \n     app . logger . addHandler ( mail_handler ) \n \n \n So what just happened?  We created a new\n SMTPHandler  that will send mails with the mail\nserver listening on  127.0.0.1  to all the  ADMINS  from the address\n server-error@example.com  with the subject \u201cYourApplication Failed\u201d.  If\nyour mail server requires credentials, these can also be provided.  For\nthat check out the documentation for the\n SMTPHandler . \n We also tell the handler to only send errors and more critical messages.\nBecause we certainly don\u2019t want to get a mail for warnings or other\nuseless logs that might happen during request handling. \n Before you run that in production, please also look at  Controlling the Log Format  to\nput more information into that error mail.  That will save you from a lot\nof frustration. \n \n \n Logging to a File \u00b6 \n Even if you get mails, you probably also want to log warnings.  It\u2019s a\ngood idea to keep as much information around that might be required to\ndebug a problem.  By default as of Flask 0.11, errors are logged to your\nwebserver\u2019s log automatically.  Warnings however are not.  Please note\nthat Flask itself will not issue any warnings in the core system, so it\u2019s\nyour responsibility to warn in the code if something seems odd. \n There are a couple of handlers provided by the logging system out of the\nbox but not all of them are useful for basic error logging.  The most\ninteresting are probably the following: \n \n FileHandler  - logs messages to a file on the\nfilesystem. \n RotatingFileHandler  - logs messages to a file\non the filesystem and will rotate after a certain number of messages. \n NTEventLogHandler  - will log to the system\nevent log of a Windows system.  If you are deploying on a Windows box,\nthis is what you want to use. \n SysLogHandler  - sends logs to a UNIX\nsyslog. \n \n Once you picked your log handler, do like you did with the SMTP handler\nabove, just make sure to use a lower setting (I would recommend\n WARNING ): \n if   not   app . debug : \n     import   logging \n     from   themodule   import   TheHandlerYouWant \n     file_handler   =   TheHandlerYouWant ( ... ) \n     file_handler . setLevel ( logging . WARNING ) \n     app . logger . addHandler ( file_handler ) \n \n \n \n \n Controlling the Log Format \u00b6 \n By default a handler will only write the message string into a file or\nsend you that message as mail.  A log record stores more information,\nand it makes a lot of sense to configure your logger to also contain that\ninformation so that you have a better idea of why that error happened, and\nmore importantly, where it did. \n A formatter can be instantiated with a format string.  Note that\ntracebacks are appended to the log entry automatically.  You don\u2019t have to\ndo that in the log formatter format string. \n Here are some example setups: \n \n Email \u00b6 \n from   logging   import   Formatter \n mail_handler . setFormatter ( Formatter ( ''' \n Message type:        %(levelname)s \n Location:            %(pathname)s : %(lineno)d \n Module:              %(module)s \n Function:            %(funcName)s \n Time:                %(asctime)s \n\n Message: \n\n %(message)s \n ''' )) \n \n \n \n \n File logging \u00b6 \n from   logging   import   Formatter \n file_handler . setFormatter ( Formatter ( \n     ' %(asctime)s   %(levelname)s :  %(message)s  ' \n     '[in  %(pathname)s : %(lineno)d ]' \n )) \n \n \n \n \n Complex Log Formatting \u00b6 \n Here is a list of useful formatting variables for the format string.  Note\nthat this list is not complete, consult the official documentation of the\n logging  package for a full list. \n \n \n \n \n \n \n Format \n Description \n \n \n \n %(levelname)s \n Text logging level for the message\n( 'DEBUG' ,  'INFO' ,  'WARNING' ,\n 'ERROR' ,  'CRITICAL' ). \n \n %(pathname)s \n Full pathname of the source file where the\nlogging call was issued (if available). \n \n %(filename)s \n Filename portion of pathname. \n \n %(module)s \n Module (name portion of filename). \n \n %(funcName)s \n Name of function containing the logging call. \n \n %(lineno)d \n Source line number where the logging call was\nissued (if available). \n \n %(asctime)s \n Human-readable time when the\n LogRecord  was created.\nBy default this is of the form\n \"2003-07-08   16:49:45,896\"  (the numbers after\nthe comma are millisecond portion of the time).\nThis can be changed by subclassing the formatter\nand overriding the\n formatTime()  method. \n \n %(message)s \n The logged message, computed as  msg   %   args \n \n \n \n If you want to further customize the formatting, you can subclass the\nformatter.  The formatter has three interesting methods: \n \n format() : \n handles the actual formatting.  It is passed a\n LogRecord  object and has to return the formatted\nstring. \n formatTime() : \n called for  asctime  formatting.  If you want a different time format\nyou can override this method. \n formatException() \n called for exception formatting.  It is passed an  exc_info \ntuple and has to return a string.  The default is usually fine, you\ndon\u2019t have to override it. \n \n For more information, head over to the official documentation. \n \n \n \n Other Libraries \u00b6 \n So far we only configured the logger your application created itself.\nOther libraries might log themselves as well.  For example, SQLAlchemy uses\nlogging heavily in its core.  While there is a method to configure all\nloggers at once in the  logging  package, I would not recommend using\nit.  There might be a situation in which you want to have multiple\nseparate applications running side by side in the same Python interpreter\nand then it becomes impossible to have different logging setups for those. \n Instead, I would recommend figuring out which loggers you are interested\nin, getting the loggers with the  getLogger()  function and\niterating over them to attach handlers: \n from   logging   import   getLogger \n loggers   =   [ app . logger ,   getLogger ( 'sqlalchemy' ), \n            getLogger ( 'otherlibrary' )] \n for   logger   in   loggers : \n     logger . addHandler ( mail_handler ) \n     logger . addHandler ( file_handler ) \n \n \n \n \n \n Debugging Application Errors \u00b6 \n For production applications, configure your application with logging and\nnotifications as described in  Application Errors .  This section provides\npointers when debugging deployment configuration and digging deeper with a\nfull-featured Python debugger. \n \n When in Doubt, Run Manually \u00b6 \n Having problems getting your application configured for production?  If you\nhave shell access to your host, verify that you can run your application\nmanually from the shell in the deployment environment.  Be sure to run under\nthe same user account as the configured deployment to troubleshoot permission\nissues.  You can use Flask\u2019s builtin development server with  debug=True  on\nyour production host, which is helpful in catching configuration issues, but\n be sure to do this temporarily in a controlled environment.  Do not run in\nproduction with  debug=True . \n \n \n Working with Debuggers \u00b6 \n To dig deeper, possibly to trace code execution, Flask provides a debugger out\nof the box (see  Debug Mode ).  If you would like to use another Python\ndebugger, note that debuggers interfere with each other.  You have to set some\noptions in order to use your favorite debugger: \n \n debug         - whether to enable debug mode and catch exceptions \n use_debugger  - whether to use the internal Flask debugger \n use_reloader  - whether to reload and fork the process on exception \n \n debug  must be True (i.e., exceptions must be caught) in order for the other\ntwo options to have any value. \n If you\u2019re using Aptana/Eclipse for debugging you\u2019ll need to set both\n use_debugger  and  use_reloader  to False. \n A possible useful pattern for configuration is to set the following in your\nconfig.yaml (change the block as appropriate for your application, of course): \n FLASK : \n     DEBUG :   True \n     DEBUG_WITH_APTANA :   True \n \n \n Then in your application\u2019s entry-point (main.py), you could have something like: \n if   __name__   ==   \"__main__\" : \n     # To allow aptana to receive errors, set use_debugger=False \n     app   =   create_app ( config = \"config.yaml\" ) \n\n     if   app . debug :   use_debugger   =   True \n     try : \n         # Disable Flask's debugger if external debugger is requested \n         use_debugger   =   not ( app . config . get ( 'DEBUG_WITH_APTANA' )) \n     except : \n         pass \n     app . run ( use_debugger = use_debugger ,   debug = app . debug , \n             use_reloader = use_debugger ,   host = '0.0.0.0' ) \n \n \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Application Errors \n Error Logging Tools \n Error handlers \n Registering \n Handling \n \n \n Error Mails \n Logging to a File \n Controlling the Log Format \n Email \n File logging \n Complex Log Formatting \n \n \n Other Libraries \n \n \n Debugging Application Errors \n When in Doubt, Run Manually \n Working with Debuggers \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n       Previous:  Testing Flask Applications \n       Next:  Configuration Handling \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/tutorial/templates/", "text": "\n   \n     \n     Step 7: The Templates \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Step 7: The Templates \u00b6 \n Now it is time to start working on the templates.  As you may have\nnoticed, if you make requests with the app running, you will get\nan exception that Flask cannot find the templates.  The templates\nare using  Jinja2  syntax and have autoescaping enabled by\ndefault.  This means that unless you mark a value in the code with\n Markup  or with the  |safe  filter in the template,\nJinja2 will ensure that special characters such as  <  or  >  are\nescaped with their XML equivalents. \n We are also using template inheritance which makes it possible to reuse\nthe layout of the website in all pages. \n Put the following templates into the  templates  folder: \n \n layout.html \u00b6 \n This template contains the HTML skeleton, the header and a link to log in\n(or log out if the user was already logged in).  It also displays the\nflashed messages if there are any.  The  {%   block   body   %}  block can be\nreplaced by a block of the same name ( body ) in a child template. \n The  session  dict is available in the template as well and\nyou can use that to check if the user is logged in or not.  Note that in\nJinja you can access missing attributes and items of objects / dicts which\nmakes the following code work, even if there is no  'logged_in'  key in\nthe session: \n <!doctype html> \n < title > Flaskr </ title > \n < link   rel = stylesheet   type = text/css   href = \" {{   url_for ( 'static' ,   filename = 'style.css' )   }} \" > \n < div   class = page > \n   < h1 > Flaskr </ h1 > \n   < div   class = metanav > \n   {%   if   not   session.logged_in   %} \n     < a   href = \" {{   url_for ( 'login' )   }} \" > log in </ a > \n   {%   else   %} \n     < a   href = \" {{   url_for ( 'logout' )   }} \" > log out </ a > \n   {%   endif   %} \n   </ div > \n   {%   for   message   in   get_flashed_messages ()   %} \n     < div   class = flash > {{   message   }} </ div > \n   {%   endfor   %} \n   {%   block   body   %}{%   endblock   %} \n </ div > \n \n \n \n \n show_entries.html \u00b6 \n This template extends the  layout.html  template from above to display the\nmessages.  Note that the  for  loop iterates over the messages we passed\nin with the  render_template()  function.  Notice that the form is\nconfigured to to submit to the  add_entry  view function and use  POST  as\nHTTP method: \n {%   extends   \"layout.html\"   %} \n {%   block   body   %} \n   {%   if   session.logged_in   %} \n     < form   action = \" {{   url_for ( 'add_entry' )   }} \"   method = post   class = add-entry > \n       < dl > \n         < dt > Title:\n         < dd >< input   type = text   size = 30   name = title > \n         < dt > Text:\n         < dd >< textarea   name = text   rows = 5   cols = 40 ></ textarea > \n         < dd >< input   type = submit   value = Share > \n       </ dl > \n     </ form > \n   {%   endif   %} \n   < ul   class = entries > \n   {%   for   entry   in   entries   %} \n     < li >< h2 > {{   entry.title   }} </ h2 > {{   entry.text | safe   }} \n   {%   else   %} \n     < li >< em > Unbelievable.  No entries here so far </ em > \n   {%   endfor   %} \n   </ ul > \n {%   endblock   %} \n \n \n \n \n login.html \u00b6 \n This is the login template, which basically just displays a form to allow\nthe user to login: \n {%   extends   \"layout.html\"   %} \n {%   block   body   %} \n   < h2 > Login </ h2 > \n   {%   if   error   %} < p   class = error >< strong > Error: </ strong >   {{   error   }}{%   endif   %} \n   < form   action = \" {{   url_for ( 'login' )   }} \"   method = post > \n     < dl > \n       < dt > Username:\n       < dd >< input   type = text   name = username > \n       < dt > Password:\n       < dd >< input   type = password   name = password > \n       < dd >< input   type = submit   value = Login > \n     </ dl > \n   </ form > \n {%   endblock   %} \n \n \n Continue with  Step 8: Adding Style . \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Step 7: The Templates \n layout.html \n show_entries.html \n login.html \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Tutorial \n       Previous:  Step 6: The View Functions \n       Next:  Step 8: Adding Style \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/tutorial/packaging/", "text": "\n   \n     \n     Step 3: Installing flaskr as a Package \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Step 3: Installing flaskr as a Package \u00b6 \n Flask is now shipped with built-in support for  Click .  Click provides\nFlask with enhanced and extensible command line utilities.  Later in this\ntutorial you will see exactly how to extend the  flask  command line\ninterface (CLI). \n A useful pattern to manage a Flask application is to install your app\nfollowing the  Python Packaging Guide .  Presently this involves\ncreating two new files;  setup.py  and  MANIFEST.in  in the\nprojects root directory.  You also need to add an  __init__.py \nfile to make the  flaskr/flaskr  directory a package.  After these\nchanges, your code structure should be: \n / flaskr \n     / flaskr \n         __init__ . py \n         / static \n         / templates \n         flaskr . py \n         schema . sql \n     setup . py \n     MANIFEST . in \n \n \n The content of the  setup.py  file for  flaskr  is: \n from   setuptools   import   setup \n\n setup ( \n     name = 'flaskr' , \n     packages = [ 'flaskr' ], \n     include_package_data = True , \n     install_requires = [ \n         'flask' , \n     ], \n ) \n \n \n When using setuptools, it is also necessary to specify any special files\nthat should be included in your package (in the  MANIFEST.in ).\nIn this case, the static and templates directories need to be included,\nas well as the schema. Create the  MANIFEST.in  and add the\nfollowing lines: \n graft   flaskr / templates \n graft   flaskr / static \n include   flaskr / schema . sql \n \n \n To simplify locating the application, add the following import statement\ninto this file,  flaskr/__init__.py : \n from   .flaskr   import   app \n \n \n This import statement brings the application instance into the top-level\nof the application package.  When it is time to run the application, the\nFlask development server needs the location of the app instance.  This\nimport statement simplifies the location process.  Without it the export\nstatement a few steps below would need to be\n export   FLASK_APP=flaskr.flaskr . \n At this point you should be able to install the application.  As usual, it\nis recommended to install your Flask application within a  virtualenv .\nWith that said, go ahead and install the application with: \n pip   install   -- editable   . \n \n \n The above installation command assumes that it is run within the projects\nroot directory,  flaskr/ .  The  editable  flag allows editing\nsource code without having to reinstall the Flask app each time you make\nchanges.  The flaskr app is now installed in your virtualenv (see output\nof  pip   freeze ). \n With that out of the way, you should be able to start up the application.\nDo this with the following commands: \n export   FLASK_APP = flaskr \n export   FLASK_DEBUG = true \n flask   run \n \n \n (In case you are on Windows you need to use  set  instead of  export ).\nThe  FLASK_DEBUG  flag enables or disables the interactive debugger.\n Never leave debug mode activated in a production system , because it will\nallow users to execute code on the server! \n You will see a message telling you that server has started along with\nthe address at which you can access it. \n When you head over to the server in your browser, you will get a 404 error\nbecause we don\u2019t have any views yet.  That will be addressed a little later,\nbut first, you should get the database working. \n \n Externally Visible Server \n Want your server to be publicly available?  Check out the\n externally visible server  section for more\ninformation. \n \n Continue with  Step 4: Database Connections . \n \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Tutorial \n       Previous:  Step 2: Application Setup Code \n       Next:  Step 4: Database Connections \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/tutorial/setup/", "text": "\n   \n     \n     Step 2: Application Setup Code \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Step 2: Application Setup Code \u00b6 \n Now that the schema is in place, you can create the application module,\n flaskr.py .  This file should be placed inside of the\n flaskr/flaskr  folder.  The first several lines of code in the\napplication module are the needed import statements.  After that there will be a\nfew lines of configuration code. For small applications like  flaskr , it is\npossible to drop the configuration directly into the module.  However, a cleaner\nsolution is to create a separate  .ini  or  .py  file, load that, and\nimport the values from there. \n Here are the import statements (in  flaskr.py ): \n # all the imports \n import   os \n import   sqlite3 \n from   flask   import   Flask ,   request ,   session ,   g ,   redirect ,   url_for ,   abort ,  \\\n      render_template ,   flash \n \n \n The next couple lines will create the actual application instance and\ninitialize it with the config from the same file in  flaskr.py : \n app   =   Flask ( __name__ )   # create the application instance :) \n app . config . from_object ( __name__ )   # load config from this file , flaskr.py \n\n # Load default config and override config from an environment variable \n app . config . update ( dict ( \n     DATABASE = os . path . join ( app . root_path ,   'flaskr.db' ), \n     SECRET_KEY = 'development key' , \n     USERNAME = 'admin' , \n     PASSWORD = 'default' \n )) \n app . config . from_envvar ( 'FLASKR_SETTINGS' ,   silent = True ) \n \n \n The  Config  object works similarly to a dictionary, so it can be\nupdated with new values. \n \n Database Path \n Operating systems know the concept of a current working directory for\neach process.  Unfortunately, you cannot depend on this in web\napplications because you might have more than one application in the\nsame process. \n For this reason the  app.root_path  attribute can be used to\nget the path to the application.  Together with the  os.path  module,\nfiles can then easily be found.  In this example, we place the\ndatabase right next to it. \n For a real-world application, it\u2019s recommended to use\n Instance Folders  instead. \n \n Usually, it is a good idea to load a separate, environment-specific\nconfiguration file.  Flask allows you to import multiple configurations and it\nwill use the setting defined in the last import.  This enables robust\nconfiguration setups.   from_envvar()  can help achieve this. \n app . config . from_envvar ( 'FLASKR_SETTINGS' ,   silent = True ) \n \n \n Simply define the environment variable  FLASKR_SETTINGS  that points to\na config file to be loaded.  The silent switch just tells Flask to not complain\nif no such environment key is set. \n In addition to that, you can use the  from_object() \nmethod on the config object and provide it with an import name of a\nmodule.  Flask will then initialize the variable from that module.  Note\nthat in all cases, only variable names that are uppercase are considered. \n The  SECRET_KEY  is needed to keep the client-side sessions secure.\nChoose that key wisely and as hard to guess and complex as possible. \n Lastly, you will add a method that allows for easy connections to the\nspecified database.  This can be used to open a connection on request and\nalso from the interactive Python shell or a script.  This will come in\nhandy later.  You can create a simple database connection through SQLite and\nthen tell it to use the  sqlite3.Row  object to represent rows.\nThis allows the rows to be treated as if they were dictionaries instead of\ntuples. \n def   connect_db (): \n     \"\"\"Connects to the specific database.\"\"\" \n     rv   =   sqlite3 . connect ( app . config [ 'DATABASE' ]) \n     rv . row_factory   =   sqlite3 . Row \n     return   rv \n \n \n In the next section you will see how to run the application. \n Continue with  Step 3: Installing flaskr as a Package . \n \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Tutorial \n       Previous:  Step 1: Database Schema \n       Next:  Step 3: Installing flaskr as a Package \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/tutorial/views/", "text": "\n   \n     \n     Step 6: The View Functions \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Step 6: The View Functions \u00b6 \n Now that the database connections are working, you can start writing the\nview functions.  You will need four of them: \n \n Show Entries \u00b6 \n This view shows all the entries stored in the database.  It listens on the\nroot of the application and will select title and text from the database.\nThe one with the highest id (the newest entry) will be on top.  The rows\nreturned from the cursor look a bit like dictionaries because we are using\nthe  sqlite3.Row  row factory. \n The view function will pass the entries to the  show_entries.html \ntemplate and return the rendered one: \n @app . route ( '/' ) \n def   show_entries (): \n     db   =   get_db () \n     cur   =   db . execute ( 'select title, text from entries order by id desc' ) \n     entries   =   cur . fetchall () \n     return   render_template ( 'show_entries.html' ,   entries = entries ) \n \n \n \n \n Add New Entry \u00b6 \n This view lets the user add new entries if they are logged in.  This only\nresponds to  POST  requests; the actual form is shown on the\n show_entries  page.  If everything worked out well, it will\n flash()  an information message to the next request and\nredirect back to the  show_entries  page: \n @app . route ( '/add' ,   methods = [ 'POST' ]) \n def   add_entry (): \n     if   not   session . get ( 'logged_in' ): \n         abort ( 401 ) \n     db   =   get_db () \n     db . execute ( 'insert into entries (title, text) values (?, ?)' , \n                  [ request . form [ 'title' ],   request . form [ 'text' ]]) \n     db . commit () \n     flash ( 'New entry was successfully posted' ) \n     return   redirect ( url_for ( 'show_entries' )) \n \n \n Note that this view checks that the user is logged in (that is, if the\n logged_in  key is present in the session and  True ). \n \n Security Note \n Be sure to use question marks when building SQL statements, as done in the\nexample above.  Otherwise, your app will be vulnerable to SQL injection when\nyou use string formatting to build SQL statements.\nSee  Using SQLite 3 with Flask  for more. \n \n \n \n Login and Logout \u00b6 \n These functions are used to sign the user in and out.  Login checks the\nusername and password against the ones from the configuration and sets the\n logged_in  key for the session.  If the user logged in successfully, that\nkey is set to  True , and the user is redirected back to the  show_entries \npage.  In addition, a message is flashed that informs the user that he or\nshe was logged in successfully.  If an error occurred, the template is\nnotified about that, and the user is asked again: \n @app . route ( '/login' ,   methods = [ 'GET' ,   'POST' ]) \n def   login (): \n     error   =   None \n     if   request . method   ==   'POST' : \n         if   request . form [ 'username' ]   !=   app . config [ 'USERNAME' ]: \n             error   =   'Invalid username' \n         elif   request . form [ 'password' ]   !=   app . config [ 'PASSWORD' ]: \n             error   =   'Invalid password' \n         else : \n             session [ 'logged_in' ]   =   True \n             flash ( 'You were logged in' ) \n             return   redirect ( url_for ( 'show_entries' )) \n     return   render_template ( 'login.html' ,   error = error ) \n \n \n The  logout  function, on the other hand, removes that key from the session\nagain.  There is a neat trick here: if you use the  pop()  method\nof the dict and pass a second parameter to it (the default), the method\nwill delete the key from the dictionary if present or do nothing when that\nkey is not in there.  This is helpful because now it is not necessary to\ncheck if the user was logged in. \n @app . route ( '/logout' ) \n def   logout (): \n     session . pop ( 'logged_in' ,   None ) \n     flash ( 'You were logged out' ) \n     return   redirect ( url_for ( 'show_entries' )) \n \n \n \n Security Note \n Passwords should never be stored in plain text in a production\nsystem. This tutorial uses plain text passwords for simplicity. If you\nplan to release a project based off this tutorial out into the world,\npasswords should be both  hashed and salted  before being stored in a\ndatabase or file. \n Fortunately, there are Flask extensions for the purpose of\nhashing passwords and verifying passwords against hashes, so adding\nthis functionality is fairly straight forward. There are also\nmany general python libraries that can be used for hashing. \n You can find a list of recommended Flask extensions\n here \n \n Continue with  Step 7: The Templates . \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n \n   Table Of Contents \n   \n Step 6: The View Functions \n Show Entries \n Add New Entry \n Login and Logout \n \n \n \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Tutorial \n       Previous:  Step 5: Creating The Database \n       Next:  Step 7: The Templates \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/tutorial/dbinit/", "text": "\n   \n     \n     Step 5: Creating The Database \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Step 5: Creating The Database \u00b6 \n As outlined earlier, Flaskr is a database powered application, and more\nprecisely, it is an application powered by a relational database system.  Such\nsystems need a schema that tells them how to store that information.\nBefore starting the server for the first time, it\u2019s important to create\nthat schema. \n Such a schema can be created by piping the  schema.sql  file into the\n sqlite3  command as follows: \n sqlite3   / tmp / flaskr . db   <   schema . sql \n \n \n The downside of this is that it requires the  sqlite3  command to be\ninstalled, which is not necessarily the case on every system.  This also\nrequires that you provide the path to the database, which can introduce\nerrors.  It\u2019s a good idea to add a function that initializes the database\nfor you, to the application. \n To do this, you can create a function and hook it into a  flask \ncommand that initializes the database.  For now just take a look at the\ncode segment below.  A good place to add this function, and command, is\njust below the  connect_db  function in  flaskr.py : \n def   init_db (): \n     db   =   get_db () \n     with   app . open_resource ( 'schema.sql' ,   mode = 'r' )   as   f : \n         db . cursor () . executescript ( f . read ()) \n     db . commit () \n\n @app . cli . command ( 'initdb' ) \n def   initdb_command (): \n     \"\"\"Initializes the database.\"\"\" \n     init_db () \n     print ( 'Initialized the database.' ) \n \n \n The  app.cli.command()  decorator registers a new command with the\n flask  script.  When the command executes, Flask will automatically\ncreate an application context which is bound to the right application.\nWithin the function, you can then access  flask.g  and other things as\nyou might expect.  When the script ends, the application context tears down\nand the database connection is released. \n You will want to keep an actual function around that initializes the database,\nthough, so that we can easily create databases in unit tests later on.  (For\nmore information see  Testing Flask Applications .) \n The  open_resource()  method of the application object\nis a convenient helper function that will open a resource that the\napplication provides.  This function opens a file from the resource\nlocation (the  flaskr/flaskr  folder) and allows you to read from it.\nIt is used in this example to execute a script on the database connection. \n The connection object provided by SQLite can give you a cursor object.\nOn that cursor, there is a method to execute a complete script.  Finally, you\nonly have to commit the changes.  SQLite3 and other transactional\ndatabases will not commit unless you explicitly tell it to. \n Now, it is possible to create a database with the  flask  script: \n flask   initdb \n Initialized   the   database . \n \n \n \n Troubleshooting \n If you get an exception later on stating that a table cannot be found, check\nthat you did execute the  initdb  command and that your table names are\ncorrect (singular vs. plural, for example). \n \n Continue with  Step 6: The View Functions \n \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Tutorial \n       Previous:  Step 4: Database Connections \n       Next:  Step 6: The View Functions \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/tutorial/dbcon/", "text": "\n   \n     \n     Step 4: Database Connections \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Step 4: Database Connections \u00b6 \n You currently have a function for establishing a database connection with\n connect_db , but by itself, it is not particularly useful.  Creating and\nclosing database connections all the time is very inefficient, so you will\nneed to keep it around for longer.  Because database connections\nencapsulate a transaction, you will need to make sure that only one\nrequest at a time uses the connection. An elegant way to do this is by\nutilizing the  application context . \n Flask provides two contexts: the  application context  and the\n request context .  For the time being, all you have to know is that there\nare special variables that use these.  For instance, the\n request  variable is the request object associated with\nthe current request, whereas  g  is a general purpose\nvariable associated with the current application context.  The tutorial\nwill cover some more details of this later on. \n For the time being, all you have to know is that you can store information\nsafely on the  g  object. \n So when do you put it on there?  To do that you can make a helper\nfunction.  The first time the function is called, it will create a database\nconnection for the current context, and successive calls will return the\nalready established connection: \n def   get_db (): \n     \"\"\"Opens a new database connection if there is none yet for the \n     current application context. \n     \"\"\" \n     if   not   hasattr ( g ,   'sqlite_db' ): \n         g . sqlite_db   =   connect_db () \n     return   g . sqlite_db \n \n \n Now you know how to connect, but how can you properly disconnect?  For\nthat, Flask provides us with the  teardown_appcontext() \ndecorator.  It\u2019s executed every time the application context tears down: \n @app . teardown_appcontext \n def   close_db ( error ): \n     \"\"\"Closes the database again at the end of the request.\"\"\" \n     if   hasattr ( g ,   'sqlite_db' ): \n         g . sqlite_db . close () \n \n \n Functions marked with  teardown_appcontext()  are called\nevery time the app context tears down.  What does this mean?\nEssentially, the app context is created before the request comes in and is\ndestroyed (torn down) whenever the request finishes.  A teardown can\nhappen because of two reasons: either everything went well (the error\nparameter will be  None ) or an exception happened, in which case the error\nis passed to the teardown function. \n Curious about what these contexts mean?  Have a look at the\n The Application Context  documentation to learn more. \n Continue to  Step 5: Creating The Database . \n \n Hint \n Where do I put this code? \n If you\u2019ve been following along in this tutorial, you might be wondering\nwhere to put the code from this step and the next.  A logical place is to\ngroup these module-level functions together, and put your new\n get_db  and  close_db  functions below your existing\n connect_db  function (following the tutorial line-by-line). \n If you need a moment to find your bearings, take a look at how the  example\nsource  is organized.  In Flask, you can put all of your application code\ninto a single Python module.  You don\u2019t have to, and if your app  grows\nlarger , it\u2019s a good idea not to. \n \n \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Tutorial \n       Previous:  Step 3: Installing flaskr as a Package \n       Next:  Step 5: Creating The Database \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"},
{"url": "http://flask.pocoo.org/docs/0.12/tutorial/schema/", "text": "\n   \n     \n     Step 1: Database Schema \u2014 Flask Documentation (0.12) \n     \n     \n     \n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '../../',\n        VERSION:     '0.12.2',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: '.txt'\n      };\n     \n     \n     \n     \n     \n     \n     \n     \n   \n  \n    \n  \n   \n   \n\n   \n   \n  \n  \n\n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask Documentation (0.12)  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n  \n  \n       \n         \n           \n            \n   \n Step 1: Database Schema \u00b6 \n In this step, you will create the database schema.  Only a single table is\nneeded for this application and it will only support SQLite.  All you need to do\nis put the following contents into a file named  schema.sql  in the\n flaskr/flaskr  folder: \n drop   table   if   exists   entries ; \n create   table   entries   ( \n   id   integer   primary   key   autoincrement , \n   title   text   not   null , \n   'text'   text   not   null \n ); \n \n \n This schema consists of a single table called  entries .  Each row in\nthis table has an  id , a  title , and a  text .  The  id  is an\nautomatically incrementing integer and a primary key, the other two are\nstrings that must not be null. \n Continue with  Step 2: Application Setup Code . \n \n\n\n           \n         \n       \n\n       \n         \n   \n Versions \n \n  \n    \n      \n        \n      \n       Development \n    \n     (unstable) \n  \n    \n       Flask 0.12.x \n    \n     (stable) \n  \n    \n      \n        \n      \n       Flask 0.11.x \n    \n    \n  \n    \n      \n        \n      \n       Flask 0.10.x \n    \n    \n  \n \n \n   \n Related Topics \n \n   Documentation overview \n   Tutorial \n       Previous:  Step 0: Creating The Folders \n       Next:  Step 2: Application Setup Code \n   \n   \n \n \n   Quick search \n     \n       \n       \n     \n \n         \n       \n       \n     \n     \n      \u00a9 Copyright 2010 - 2017, Armin Ronacher.\n      Created using  Sphinx .\n     \n  \n   \n"}
]